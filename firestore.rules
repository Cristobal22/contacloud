/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and restricts company-related data access based on user roles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /companies: Stores company data. Access is role-based (Admin, Accountant).
 * - /companies/{companyId}/*: Stores company-specific data (accounts, vouchers, etc.). Access is role-based and restricted to the specific company.
 * - /account-groups, /institutions, /family-allowance-parameters, /tax-parameters, /health-entities, /afp-entities: Global collections accessible to all authenticated users (read-only).
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the authenticated user.
 * - Listing of users is explicitly denied.
 * - Company and company-related data access are role-based but this is only enforced for the profile, not the data.
 * - Global collections (account-groups, institutions, parameters, entities) are publicly readable but not writable, acting as system data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to a user's profile only to the authenticated user.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - If the authenticated user's UID matches the userId.
     * @deny (get, create, update, delete) - If the authenticated user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to company data.
     * @path /companies
     * @allow (get, list) - Any authenticated user can read.
     * @allow (create, update, delete) - Only admins can create, update, or delete companies.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete companies.
     * @principle Enforces role-based access control for company management.
     */
    match /companies/{companyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Placeholder for admin check.  Replace with actual admin role verification.
      function isAdmin() {
        return false;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();

       match /accounts/{accountId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      match /vouchers/{voucherId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      match /subjects/{subjectId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      match /cost-centers/{costCenterId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      match /employees/{employeeId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
       match /purchases/{purchaseId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      match /sales/{saleId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      match /fees/{feeId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
    }

    /**
     * @description Allows read-only access to account groups for any authenticated user.
     * @path /account-groups
     * @allow (get, list) - Any authenticated user can read.
     * @deny (create, update, delete) - No one can create, update, or delete account groups.
     * @principle Provides global, read-only access to system configuration data.
     */
    match /account-groups/{accountGroupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read-only access to institutions for any authenticated user.
     * @path /institutions
     * @allow (get, list) - Any authenticated user can read.
     * @deny (create, update, delete) - No one can create, update, or delete institutions.
     * @principle Provides global, read-only access to system configuration data.
     */
    match /institutions/{institutionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read-only access to family allowance parameters for any authenticated user.
     * @path /family-allowance-parameters
     * @allow (get, list) - Any authenticated user can read.
     * @deny (create, update, delete) - No one can create, update, or delete family allowance parameters.
     * @principle Provides global, read-only access to system configuration data.
     */
    match /family-allowance-parameters/{familyAllowanceParameterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read-only access to tax parameters for any authenticated user.
     * @path /tax-parameters
     * @allow (get, list) - Any authenticated user can read.
     * @deny (create, update, delete) - No one can create, update, or delete tax parameters.
     * @principle Provides global, read-only access to system configuration data.
     */
    match /tax-parameters/{taxParameterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Allows read-only access to health entities for any authenticated user.
     * @path /health-entities
     * @allow (get, list) - Any authenticated user can read.
     * @deny (create, update, delete) - No one can create, update, or delete health entities.
     * @principle Provides global, read-only access to system configuration data.
     */
    match /health-entities/{healthEntityId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read-only access to AFP entities for any authenticated user.
     * @path /afp-entities
     * @allow (get, list) - Any authenticated user can read.
     * @deny (create, update, delete) - No one can create, update, or delete AFP entities.
     * @principle Provides global, read-only access to system configuration data.
     */
    match /afp-entities/{afpEntityId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}