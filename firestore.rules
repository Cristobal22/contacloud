/**
 * @fileoverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model. Users can only access data
 * related to their own user profile, or data associated with companies they
 * are authorized to access. Some collections are globally available,
 * such as economic indicators and tax parameters.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /companies/{companyId}: Companies, owned by a specific user.
 * - /companies/{companyId}/*: Subcollections related to companies (accounts, vouchers, etc.),
 *   accessible only by users associated with that company.
 * - /economic-indicators/{indicatorId}: Globally available economic indicators.
 * - /health-entities/{entityId}: Globally available health entities.
 * - /afp-entities/{entityId}: Globally available AFP entities.
 * - /family-allowance-parameters/{paramId}: Globally available family allowance parameters.
 * - /tax-parameters/{paramId}: Globally available tax parameters.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Company data can only be accessed by users associated with the company (via `companyIds` in the user profile).
 * - Global collections (economic indicators, tax parameters) are publicly readable.
 * - User listing is disallowed.
 *
 * Denormalization for Authorization:
 * - User's `companyIds` are used to quickly authorize access to company-related data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is associated with the provided company ID.
     */
    function isCompanyUser(companyId) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
    }

    /**
     * @description Checks if the authenticated user is associated with the provided company ID and the document exists
     */
    function isExistingCompanyUser(companyId) {
        return isCompanyUser(companyId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their own profile if the UID matches.
     * @allow (get) User 'user123' can read their own profile.
     * @allow (update) User 'user123' can update their own profile.
     * @allow (delete) User 'user123' can delete their own profile.
     * @deny (create) User 'user456' cannot create a profile for user 'user123'.
     * @deny (get) User 'user456' cannot read user 'user123's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
      allow list: if false;
    }

    /**
     * @description Rules for companies.
     * @path /companies/{companyId}
     * @allow (create) A user associated with the company can create the company.
     * @allow (get) A user associated with the company can read the company data.
     * @allow (update) A user associated with the company can update the company data.
     * @allow (delete) A user associated with the company can delete the company data.
     * @deny (create) A user not associated with the company cannot create it.
     * @deny (get) A user not associated with the company cannot read the company data.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId} {
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow get: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isExistingCompanyUser(companyId);
      allow delete: if isSignedIn() && isExistingCompanyUser(companyId);
      allow list: if false;
    }

    /**
     * @description Rules for accounts within a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (create) A user associated with the company can create accounts.
     * @allow (get) A user associated with the company can read accounts.
     * @allow (update) A user associated with the company can update accounts.
     * @allow (delete) A user associated with the company can delete accounts.
     * @deny (create) A user not associated with the company cannot create accounts.
     * @deny (get) A user not associated with the company cannot read accounts.
     * @principle Enforces company-level access control for accounts.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow get: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isExistingCompanyUser(companyId);
      allow delete: if isSignedIn() && isExistingCompanyUser(companyId);
      allow list: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description Rules for vouchers within a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (create) A user associated with the company can create vouchers.
     * @allow (get) A user associated with the company can read vouchers.
     * @allow (update) A user associated with the company can update vouchers.
     * @allow (delete) A user associated with the company can delete vouchers.
     * @deny (create) A user not associated with the company cannot create vouchers.
     * @deny (get) A user not associated with the company cannot read vouchers.
     * @principle Enforces company-level access control for vouchers.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow get: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isExistingCompanyUser(companyId);
      allow delete: if isSignedIn() && isExistingCompanyUser(companyId);
      allow list: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description Rules for subjects within a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (create) A user associated with the company can create subjects.
     * @allow (get) A user associated with the company can read subjects.
     * @allow (update) A user associated with the company can update subjects.
     * @allow (delete) A user associated with the company can delete subjects.
     * @deny (create) A user not associated with the company cannot create subjects.
     * @deny (get) A user not associated with the company cannot read subjects.
     * @principle Enforces company-level access control for subjects.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow get: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isExistingCompanyUser(companyId);
      allow delete: if isSignedIn() && isExistingCompanyUser(companyId);
      allow list: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description Rules for cost centers within a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (create) A user associated with the company can create cost centers.
     * @allow (get) A user associated with the company can read cost centers.
     * @allow (update) A user associated with the company can update cost centers.
     * @allow (delete) A user associated with the company can delete cost centers.
     * @deny (create) A user not associated with the company cannot create cost centers.
     * @deny (get) A user not associated with the company cannot read cost centers.
     * @principle Enforces company-level access control for cost centers.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow get: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isExistingCompanyUser(companyId);
      allow delete: if isSignedIn() && isExistingCompanyUser(companyId);
      allow list: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description Rules for employees within a company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (create) A user associated with the company can create employees.
     * @allow (get) A user associated with the company can read employees.
     * @allow (update) A user associated with the company can update employees.
     * @allow (delete) A user associated with the company can delete employees.
     * @deny (create) A user not associated with the company cannot create employees.
     * @deny (get) A user not associated with the company cannot read employees.
     * @principle Enforces company-level access control for employees.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow get: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isExistingCompanyUser(companyId);
      allow delete: if isSignedIn() && isExistingCompanyUser(companyId);
      allow list: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description Rules for payrolls within a company.
     * @path /companies/{companyId}/payrolls/{payrollId}
     * @allow (create) A user associated with the company can create payrolls.
     * @allow (get) A user associated with the company can read payrolls.
     * @allow (update) A user associated with the company can update payrolls.
     * @allow (delete) A user associated with the company can delete payrolls.
     * @deny (create) A user not associated with the company cannot create payrolls.
     * @deny (get) A user not associated with the company cannot read payrolls.
     * @principle Enforces company-level access control for payrolls.
     */
    match /companies/{companyId}/payrolls/{payrollId} {
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow get: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isExistingCompanyUser(companyId);
      allow delete: if isSignedIn() && isExistingCompanyUser(companyId);
      allow list: if isSignedIn() && isCompanyUser(companyId);
    }

     /**
      * @description Rules for purchases within a company.
      * @path /companies/{companyId}/purchases/{purchaseId}
      * @allow (create) A user associated with the company can create purchases.
      * @allow (get) A user associated with the company can read purchases.
      * @allow (update) A user associated with the company can update purchases.
      * @allow (delete) A user associated with the company can delete purchases.
      * @deny (create) A user not associated with the company cannot create purchases.
      * @deny (get) A user not associated with the company cannot read purchases.
      * @principle Enforces company-level access control for purchases.
      */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow get: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isExistingCompanyUser(companyId);
      allow delete: if isSignedIn() && isExistingCompanyUser(companyId);
      allow list: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description Rules for sales within a company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (create) A user associated with the company can create sales.
     * @allow (get) A user associated with the company can read sales.
     * @allow (update) A user associated with the company can update sales.
     * @allow (delete) A user associated with the company can delete sales.
     * @deny (create) A user not associated with the company cannot create sales.
     * @deny (get) A user not associated with the company cannot read sales.
     * @principle Enforces company-level access control for sales.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow get: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isExistingCompanyUser(companyId);
      allow delete: if isSignedIn() && isExistingCompanyUser(companyId);
      allow list: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description Rules for fees within a company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (create) A user associated with the company can create fees.
     * @allow (get) A user associated with the company can read fees.
     * @allow (update) A user associated with the company can update fees.
     * @allow (delete) A user associated with the company can delete fees.
     * @deny (create) A user not associated with the company cannot create fees.
     * @deny (get) A user not associated with the company cannot read fees.
     * @principle Enforces company-level access control for fees.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow get: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isExistingCompanyUser(companyId);
      allow delete: if isSignedIn() && isExistingCompanyUser(companyId);
      allow list: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description Rules for company-specific economic indicators.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     * @allow (create) A user associated with the company can create company-specific economic indicators.
     * @allow (get) A user associated with the company can read company-specific economic indicators.
     * @allow (update) A user associated with the company can update company-specific economic indicators.
     * @allow (delete) A user associated with the company can delete company-specific economic indicators.
     * @deny (create) A user not associated with the company cannot create company-specific economic indicators.
     * @deny (get) A user not associated with the company cannot read company-specific economic indicators.
     * @principle Enforces company-level access control for economic indicators.
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow get: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isExistingCompanyUser(companyId);
      allow delete: if isSignedIn() && isExistingCompanyUser(companyId);
      allow list: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description Rules for user-specific account groups.
     * @path /users/{userId}/account-groups/{groupId}
     * @allow (create) The owner can create account groups.
     * @allow (get) The owner can read account groups.
     * @allow (update) The owner can update account groups.
     * @allow (delete) The owner can delete account groups.
     * @deny (create) Other users cannot create account groups for this user.
     * @deny (get) Other users cannot read account groups for this user.
     * @principle Enforces user-ownership for account groups.
     */
    match /users/{userId}/account-groups/{groupId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for global economic indicators.
     * @path /economic-indicators/{indicatorId}
     * @allow (get) Anyone can read economic indicators.
     * @allow (list) Anyone can list economic indicators.
     * // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /economic-indicators/{indicatorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for global health entities.
     * @path /health-entities/{entityId}
     * @allow (get) Anyone can read health entities.
     * @allow (list) Anyone can list health entities.
     * // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /health-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for global AFP entities.
     * @path /afp-entities/{entityId}
     * @allow (get) Anyone can read AFP entities.
     * @allow (list) Anyone can list AFP entities.
     * // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /afp-entities/{entityId} {
      allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for global family allowance parameters.
     * @path /family-allowance-parameters/{paramId}
     * @allow (get) Anyone can read family allowance parameters.
     * @allow (list) Anyone can list family allowance parameters.
     * // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /family-allowance-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for global tax parameters.
     * @path /tax-parameters/{paramId}
     * @allow (get) Anyone can read tax parameters.
     * @allow (list) Anyone can list tax parameters.
     * // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /tax-parameters/{paramId} {
      allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for global taxable caps.
     * @path /taxable-caps/{capId}
     * @allow (get) Anyone can read taxable caps.
     * @allow (list) Anyone can list taxable caps.
     * // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /taxable-caps/{capId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}