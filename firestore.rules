/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isAccountant() {
      return isSignedIn() && getUserRole(request.auth.uid) == 'Accountant';
    }
    
    function isAdmin() {
      return isSignedIn() && getUserRole(request.auth.uid) == 'Admin';
    }

    function isAccountantForCompany(companyId) {
      return isAccountant() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
    }
    
    function isCompanyOwner(companyId) {
      let company = get(/databases/$(database)/documents/companies/$(companyId)).data;
      return isAccountant() && company.ownerId == request.auth.uid;
    }

    // --- User Profiles ---
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false; // Explicitly deny listing all users
      allow create: if isOwner(userId) || isAdmin(); // Allow self-creation or admin creation
      allow update: if isOwner(userId) || isAdmin(); // Allow self-update or admin update
      allow delete: if isAdmin(); // Only admins can delete user profiles
    }

    // --- Company Data ---
    match /companies/{companyId} {
      allow get: if isAccountantForCompany(companyId);
      allow list: if isAccountant();
      allow create: if isAccountant() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isCompanyOwner(companyId);

      // --- Company Subcollections ---
      match /{subcollection}/{docId} {
        allow read, write: if isAccountantForCompany(companyId);
      }
    }
    
    // --- Global Read-Only Data ---
    // These collections contain global parameters and can be read by any authenticated user.
    // Writing is restricted to prevent unauthorized changes.
    match /health-entities/{entityId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    match /afp-entities/{entityId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    match /institutions/{institutionId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    match /family-allowance-parameters/{paramId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    match /tax-parameters/{paramId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
     match /economic-indicators/{indicatorId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn(); // Allow authenticated users to update global values
    }
    
  }
}
