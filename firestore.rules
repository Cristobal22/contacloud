/**
 * @fileoverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. Global data (economic indicators, institutions, AFPs, health entities, tax/family allowance parameters) is publicly readable but only modifiable by a privileged role (not yet defined in this prototype). User profiles are owner-writeable and readable. Company-specific data is restricted to users associated with that company, either as owners or members. Initial data is shared across all companies, and only when a user modifies the initial data is the change made only for the company that is being worked on.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /companies/{companyId}: Stores company data.
 * - /companies/{companyId}/*: Subcollections for company-specific data (accounts, vouchers, subjects, cost centers, employees, payrolls, purchases, sales, fees).
 * - /economic-indicators/{indicatorId}, /institutions/{institutionId}, /afp-entities/{entityId}, /health-entities/{entityId}, /family-allowance-parameters/{paramId}, /tax-parameters/{paramId}: Global collections for platform-wide data.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Global data collections are publicly readable but only modifiable by a privileged role.
 * - Company ownership is verified using the `ownerId` field on the `Company` document.
 * - Company membership for subcollections is verified by comparing the `companyId` field in the subcollection documents.
 * - Data validation is relaxed during the prototyping phase, focusing on authorization and relationship integrity rather than strict schema enforcement.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create a profile document where userId == 'user_abc'.
     * @deny (create) User with UID 'user_abc' cannot create a profile document where userId != 'user_abc'.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete their profile document.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read, update, and delete the profile document of user 'user_abc'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows users to create, read, update, and delete company documents if they are the owner.
     * @path /companies/{companyId}
     * @allow (create) User with UID 'user_abc' can create a company document where request.resource.data.ownerId == 'user_abc'.
     * @deny (create) User with UID 'user_abc' cannot create a company document where request.resource.data.ownerId != 'user_abc'.
     * @allow (get, list) Any authenticated user can read and list company documents.
     * @allow (update, delete) User with UID 'user_abc' can update and delete a company document they own.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete a company document owned by 'user_abc'.
     * @principle Enforces document ownership for writes and allows public read.
     */
    match /companies/{companyId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    /**
     * @description Allows read, create, update, and delete operations on accounts for users associated with the company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) Any authenticated user can read accounts for a company.
     * @allow (create) Any authenticated user can create an account for the company.
     * @allow (update, delete) User with UID 'user_abc' can update and delete account data within company 'company_xyz'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete account data within company 'company_abc'.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }
        function companyIdMatches() {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && companyIdMatches();
      allow update: if isSignedIn() && companyIdMatches();
      allow delete: if isSignedIn() && companyIdMatches();
    }

    /**
     * @description Allows read, create, update, and delete operations on vouchers for users associated with the company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) Any authenticated user can read vouchers for a company.
     * @allow (create) Any authenticated user can create a voucher for the company.
     * @allow (update, delete) User with UID 'user_abc' can update and delete voucher data within company 'company_xyz'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete voucher data within company 'company_abc'.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
       function isSignedIn() {
        return request.auth != null;
      }
        function companyIdMatches() {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && companyIdMatches();
      allow update: if isSignedIn() && companyIdMatches();
      allow delete: if isSignedIn() && companyIdMatches();
    }

    /**
     * @description Allows read, create, update, and delete operations on subjects for users associated with the company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) Any authenticated user can read subjects for a company.
     * @allow (create) Any authenticated user can create a subject for the company.
     * @allow (update, delete) User with UID 'user_abc' can update and delete subject data within company 'company_xyz'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete subject data within company 'company_abc'.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/subjects/{subjectId} {
       function isSignedIn() {
        return request.auth != null;
      }
        function companyIdMatches() {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && companyIdMatches();
      allow update: if isSignedIn() && companyIdMatches();
      allow delete: if isSignedIn() && companyIdMatches();
    }

    /**
     * @description Allows read, create, update, and delete operations on cost centers for users associated with the company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) Any authenticated user can read cost centers for a company.
     * @allow (create) Any authenticated user can create a cost center for the company.
     * @allow (update, delete) User with UID 'user_abc' can update and delete cost center data within company 'company_xyz'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete cost center data within company 'company_abc'.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
       function isSignedIn() {
        return request.auth != null;
      }
        function companyIdMatches() {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && companyIdMatches();
      allow update: if isSignedIn() && companyIdMatches();
      allow delete: if isSignedIn() && companyIdMatches();
    }

    /**
     * @description Allows read, create, update, and delete operations on employees for users associated with the company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) Any authenticated user can read employees for a company.
     * @allow (create) Any authenticated user can create an employee for the company.
     * @allow (update, delete) User with UID 'user_abc' can update and delete employee data within company 'company_xyz'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete employee data within company 'company_abc'.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/employees/{employeeId} {
       function isSignedIn() {
        return request.auth != null;
      }
       function companyIdMatches() {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && companyIdMatches();
      allow update: if isSignedIn() && companyIdMatches();
      allow delete: if isSignedIn() && companyIdMatches();
    }

    /**
     * @description Allows read, create, update, and delete operations on payrolls for users associated with the company.
     * @path /companies/{companyId}/payrolls/{payrollId}
     * @allow (get, list) Any authenticated user can read payrolls for a company.
     * @allow (create) Any authenticated user can create a payroll for the company.
     * @allow (update, delete) User with UID 'user_abc' can update and delete payroll data within company 'company_xyz'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete payroll data within company 'company_abc'.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/payrolls/{payrollId} {
       function isSignedIn() {
        return request.auth != null;
      }
        function companyIdMatches() {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && companyIdMatches();
      allow update: if isSignedIn() && companyIdMatches();
      allow delete: if isSignedIn() && companyIdMatches();
    }

    /**
     * @description Allows read, create, update, and delete operations on purchases for users associated with the company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) Any authenticated user can read purchases for a company.
     * @allow (create) Any authenticated user can create a purchase for the company.
     * @allow (update, delete) User with UID 'user_abc' can update and delete purchase data within company 'company_xyz'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete purchase data within company 'company_abc'.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      function isSignedIn() {
        return request.auth != null;
      }
        function companyIdMatches() {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && companyIdMatches();
      allow update: if isSignedIn() && companyIdMatches();
      allow delete: if isSignedIn() && companyIdMatches();
    }

    /**
     * @description Allows read, create, update, and delete operations on sales for users associated with the company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) Any authenticated user can read sales for a company.
     * @allow (create) Any authenticated user can create a sale for the company.
     * @allow (update, delete) User with UID 'user_abc' can update and delete sale data within company 'company_xyz'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete sale data within company 'company_abc'.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/sales/{saleId} {
       function isSignedIn() {
        return request.auth != null;
      }
        function companyIdMatches() {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && companyIdMatches();
      allow update: if isSignedIn() && companyIdMatches();
      allow delete: if isSignedIn() && companyIdMatches();
    }

    /**
     * @description Allows read, create, update, and delete operations on fees for users associated with the company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) Any authenticated user can read fees for a company.
     * @allow (create) Any authenticated user can create a fee for the company.
     * @allow (update, delete) User with UID 'user_abc' can update and delete fee data within company 'company_xyz'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete fee data within company 'company_abc'.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/fees/{feeId} {
      function isSignedIn() {
        return request.auth != null;
      }
        function companyIdMatches() {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && companyIdMatches();
      allow update: if isSignedIn() && companyIdMatches();
      allow delete: if isSignedIn() && companyIdMatches();
    }

    /**
     * @description Allows read, create, update, and delete operations on economic indicators for users associated with the company.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     * @allow (get, list) Any authenticated user can read economic indicators for a company.
     * @allow (create) Any authenticated user can create an economic indicator for the company.
     * @allow (update, delete) User with UID 'user_abc' can update and delete economic indicator data within company 'company_xyz'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete economic indicator data within company 'company_abc'.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
      function isSignedIn() {
        return request.auth != null;
      }
        function companyIdMatches() {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && companyIdMatches();
      allow update: if isSignedIn() && companyIdMatches();
      allow delete: if isSignedIn() && companyIdMatches();
    }

    /**
     * @description Allows users to read and write their own account groups.
     * @path /users/{userId}/account-groups/{groupId}
     * @allow (create) User with UID 'user_abc' can create an account group where userId == 'user_abc'.
     * @deny (create) User with UID 'user_abc' cannot create an account group where userId != 'user_abc'.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete their account group.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read, update, and delete the account group of user 'user_abc'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/account-groups/{groupId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to economic indicators. Write access should be restricted to a privileged role.
     * @path /economic-indicators/{indicatorId}
     * @allow (get, list) Any user can read economic indicators.
     * @deny (create, update, delete) No user can create, update, or delete economic indicators without proper authorization.
     * // TODO: Implement privileged role check for write operations.
     * @principle Public read, restricted write.
     */
    match /economic-indicators/{indicatorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once roles are defined.
    }

    /**
     * @description Allows public read access to health entities. Write access should be restricted to a privileged role.
     * @path /health-entities/{entityId}
     * @allow (get, list) Any user can read health entities.
     * @deny (create, update, delete) No user can create, update, or delete health entities without proper authorization.
     * // TODO: Implement privileged role check for write operations.
     * @principle Public read, restricted write.
     */
    match /health-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin validation once roles are defined.
    }

    /**
     * @description Allows public read access to AFP entities. Write access should be restricted to a privileged role.
     * @path /afp-entities/{entityId}
     * @allow (get, list) Any user can read AFP entities.
     * @deny (create, update, delete) No user can create, update, or delete AFP entities without proper authorization.
     * // TODO: Implement privileged role check for write operations.
     * @principle Public read, restricted write.
     */
    match /afp-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin validation once roles are defined.
    }

    /**
     * @description Allows public read access to family allowance parameters. Write access should be restricted to a privileged role.
     * @path /family-allowance-parameters/{paramId}
     * @allow (get, list) Any user can read family allowance parameters.
     * @deny (create, update, delete) No user can create, update, or delete family allowance parameters without proper authorization.
     * // TODO: Implement privileged role check for write operations.
     * @principle Public read, restricted write.
     */
    match /family-allowance-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin validation once roles are defined.
    }

    /**
     * @description Allows public read access to tax parameters. Write access should be restricted to a privileged role.
     * @path /tax-parameters/{paramId}
     * @allow (get, list) Any user can read tax parameters.
     * @deny (create, update, delete) No user can create, update, or delete tax parameters without proper authorization.
     * // TODO: Implement privileged role check for write operations.
     * @principle Public read, restricted write.
     */
    match /tax-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin validation once roles are defined.
    }

    /**
     * @description Allows public read access to institutions. Write access should be restricted to a privileged role.
     * @path /institutions/{institutionId}
     * @allow (get, list) Any user can read institutions.
     * @deny (create, update, delete) No user can create, update, or delete institutions without proper authorization.
     * // TODO: Implement privileged role check for write operations.
     * @principle Public read, restricted write.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin validation once roles are defined.
    }
  }
}