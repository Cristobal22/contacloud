rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): Authenticated user can only access their own profile.
     *   e.g., A user with UID 'user123' can read, create, update and delete the document at /users/user123.
     * @deny (get, create, update, delete, list): Authenticated user cannot access another user's profile.
     *   e.g., A user with UID 'user123' cannot read the document at /users/user456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       allow get: if isSignedIn() && isOwner(userId);
       allow list: if false;
       allow create: if isSignedIn() && isOwner(userId);
       allow update: if isSignedIn() && isOwner(userId);
       allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to company data.
     * @path /companies/{companyId}
     * @allow (get, list): Any authenticated user can read the company data.
     * @allow (create): An authenticated user can create a company if they are the owner.
     * @allow (update, delete): Only the company owner can update or delete company data.
     * @deny (create, update, delete): Unauthorized users cannot modify company data.
     * @principle Enforces company ownership for writes, allows public reads.
     */
    match /companies/{companyId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.ownerId;
      }
      function isNewOwner() {
        return request.auth != null && request.auth.uid == request.resource.data.ownerId;
      }
       allow get, list: if true;
       allow create: if isSignedIn() && isNewOwner();
       allow update: if isSignedIn() && isOwner() && resource != null;
       allow delete: if isSignedIn() && isOwner() && resource != null;
    }

    /**
     * @description Controls access to accounts subcollection.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list): Any authenticated user can read the accounts.
     * @allow (create): An authenticated user can create an account if they are the owner of the company.
     * @allow (update, delete): Only the company owner can update or delete accounts.
     * @deny (create, update, delete): Unauthorized users cannot modify accounts.
     * @principle Enforces company ownership for writes, allows public reads.
     */
    match /companies/{companyId}/accounts/{accountId} {
       function isCompanyOwner(companyId) {
         return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
       }
       allow get, list: if true;
       allow create: if isSignedIn() && isCompanyOwner(companyId);
       allow update: if isSignedIn() && isCompanyOwner(companyId);
       allow delete: if isSignedIn() && isCompanyOwner(companyId);
    }

    /**
     * @description Controls access to vouchers subcollection.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list): Any authenticated user can read the vouchers.
     * @allow (create): An authenticated user can create a voucher if they are the owner of the company.
     * @allow (update, delete): Only the company owner can update or delete vouchers.
     * @deny (create, update, delete): Unauthorized users cannot modify vouchers.
     * @principle Enforces company ownership for writes, allows public reads.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
       function isCompanyOwner(companyId) {
         return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
       }
       allow get, list: if true;
       allow create: if isSignedIn() && isCompanyOwner(companyId);
       allow update: if isSignedIn() && isCompanyOwner(companyId);
       allow delete: if isSignedIn() && isCompanyOwner(companyId);
    }

    /**
     * @description Controls access to subjects subcollection.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list): Any authenticated user can read the subjects.
     * @allow (create): An authenticated user can create a subject if they are the owner of the company.
     * @allow (update, delete): Only the company owner can update or delete subjects.
     * @deny (create, update, delete): Unauthorized users cannot modify subjects.
     * @principle Enforces company ownership for writes, allows public reads.
     */
    match /companies/{companyId}/subjects/{subjectId} {
       function isCompanyOwner(companyId) {
         return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
       }
       allow get, list: if true;
       allow create: if isSignedIn() && isCompanyOwner(companyId);
       allow update: if isSignedIn() && isCompanyOwner(companyId);
       allow delete: if isSignedIn() && isCompanyOwner(companyId);
    }

    /**
     * @description Controls access to cost-centers subcollection.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list): Any authenticated user can read the cost centers.
     * @allow (create): An authenticated user can create a cost center if they are the owner of the company.
     * @allow (update, delete): Only the company owner can update or delete cost centers.
     * @deny (create, update, delete): Unauthorized users cannot modify cost centers.
     * @principle Enforces company ownership for writes, allows public reads.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
       function isCompanyOwner(companyId) {
         return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
       }
       allow get, list: if true;
       allow create: if isSignedIn() && isCompanyOwner(companyId);
       allow update: if isSignedIn() && isCompanyOwner(companyId);
       allow delete: if isSignedIn() && isCompanyOwner(companyId);
    }

    /**
     * @description Controls access to employees subcollection.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list): Any authenticated user can read the employees.
     * @allow (create): An authenticated user can create an employee if they are the owner of the company.
     * @allow (update, delete): Only the company owner can update or delete employees.
     * @deny (create, update, delete): Unauthorized users cannot modify employees.
     * @principle Enforces company ownership for writes, allows public reads.
     */
    match /companies/{companyId}/employees/{employeeId} {
       function isCompanyOwner(companyId) {
         return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
       }
       allow get, list: if true;
       allow create: if isSignedIn() && isCompanyOwner(companyId);
       allow update: if isSignedIn() && isCompanyOwner(companyId);
       allow delete: if isSignedIn() && isCompanyOwner(companyId);
    }

    /**
     * @description Controls access to payrolls subcollection.
     * @path /companies/{companyId}/payrolls/{payrollId}
     * @allow (get, list): Any authenticated user can read the payrolls.
     * @allow (create): An authenticated user can create a payroll if they are the owner of the company.
     * @allow (update, delete): Only the company owner can update or delete payrolls.
     * @deny (create, update, delete): Unauthorized users cannot modify payrolls.
     * @principle Enforces company ownership for writes, allows public reads.
     */
    match /companies/{companyId}/payrolls/{payrollId} {
       function isCompanyOwner(companyId) {
         return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
       }
       allow get, list: if true;
       allow create: if isSignedIn() && isCompanyOwner(companyId);
       allow update: if isSignedIn() && isCompanyOwner(companyId);
       allow delete: if isSignedIn() && isCompanyOwner(companyId);
    }

    /**
     * @description Controls access to purchases subcollection.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list): Any authenticated user can read the purchases.
     * @allow (create): An authenticated user can create a purchase if they are the owner of the company.
     * @allow (update, delete): Only the company owner can update or delete purchases.
     * @deny (create, update, delete): Unauthorized users cannot modify purchases.
     * @principle Enforces company ownership for writes, allows public reads.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
       function isCompanyOwner(companyId) {
         return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
       }
       allow get, list: if true;
       allow create: if isSignedIn() && isCompanyOwner(companyId);
       allow update: if isSignedIn() && isCompanyOwner(companyId);
       allow delete: if isSignedIn() && isCompanyOwner(companyId);
    }

    /**
     * @description Controls access to sales subcollection.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list): Any authenticated user can read the sales.
     * @allow (create): An authenticated user can create a sale if they are the owner of the company.
     * @allow (update, delete): Only the company owner can update or delete sales.
     * @deny (create, update, delete): Unauthorized users cannot modify sales.
     * @principle Enforces company ownership for writes, allows public reads.
     */
    match /companies/{companyId}/sales/{saleId} {
       function isCompanyOwner(companyId) {
         return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
       }
       allow get, list: if true;
       allow create: if isSignedIn() && isCompanyOwner(companyId);
       allow update: if isSignedIn() && isCompanyOwner(companyId);
       allow delete: if isSignedIn() && isCompanyOwner(companyId);
    }

    /**
     * @description Controls access to fees subcollection.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list): Any authenticated user can read the fees.
     * @allow (create): An authenticated user can create a fee if they are the owner of the company.
     * @allow (update, delete): Only the company owner can update or delete fees.
     * @deny (create, update, delete): Unauthorized users cannot modify fees.
     * @principle Enforces company ownership for writes, allows public reads.
     */
    match /companies/{companyId}/fees/{feeId} {
       function isCompanyOwner(companyId) {
         return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
       }
       allow get, list: if true;
       allow create: if isSignedIn() && isCompanyOwner(companyId);
       allow update: if isSignedIn() && isCompanyOwner(companyId);
       allow delete: if isSignedIn() && isCompanyOwner(companyId);
    }

    /**
     * @description Controls access to company-specific economic indicators.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     * @allow (get, list): Any authenticated user can read the economic indicators.
     * @allow (create): An authenticated user can create an economic indicator if they are the owner of the company.
     * @allow (update, delete): Only the company owner can update or delete economic indicators.
     * @deny (create, update, delete): Unauthorized users cannot modify economic indicators.
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
       function isCompanyOwner(companyId) {
         return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
       }
       allow get, list: if true;
       allow create: if isSignedIn() && isCompanyOwner(companyId);
       allow update: if isSignedIn() && isCompanyOwner(companyId);
       allow delete: if isSignedIn() && isCompanyOwner(companyId);
    }

     /**
     * @description Controls access to user-specific account groups.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (get, create, update, delete, list): Authenticated user can only access their own account groups.
     *   e.g., A user with UID 'user123' can read, create, update and delete the document at /users/user123/account-groups/group456.
     * @deny (get, create, update, delete, list): Authenticated user cannot access another user's account groups.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       allow get: if isSignedIn() && isOwner(userId);
       allow list: if isSignedIn() && isOwner(userId);
       allow create: if isSignedIn() && isOwner(userId);
       allow update: if isSignedIn() && isOwner(userId);
       allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to global economic indicators.
     * @path /economic-indicators/{indicatorId}
     * @allow (get, list): Any authenticated user can read the global economic indicators.
     * @deny (create, update, delete): No one can create, update, or delete global economic indicators.
     */
    match /economic-indicators/{indicatorId} {
       allow get, list: if true;
       allow create, update, delete: if false;
    }

    /**
     * @description Controls access to health entities.
     * @path /health-entities/{entityId}
     * @allow (get, list): Any authenticated user can read the health entities.
     * @deny (create, update, delete): No one can create, update, or delete health entities.
     */
    match /health-entities/{entityId} {
       allow get, list: if true;
       allow create, update, delete: if false;
    }

    /**
     * @description Controls access to AFP entities.
     * @path /afp-entities/{entityId}
     * @allow (get, list): Any authenticated user can read the AFP entities.
     * @deny (create, update, delete): No one can create, update, or delete AFP entities.
     */
    match /afp-entities/{entityId} {
       allow get, list: if true;
       allow create, update, delete: if false;
    }

    /**
     * @description Controls access to family allowance parameters.
     * @path /family-allowance-parameters/{paramId}
     * @allow (get, list): Any authenticated user can read the family allowance parameters.
     * @deny (create, update, delete): No one can create, update, or delete family allowance parameters.
     */
    match /family-allowance-parameters/{paramId} {
       allow get, list: if true;
       allow create, update, delete: if false;
    }

    /**
     * @description Controls access to tax parameters.
     * @path /tax-parameters/{paramId}
     * @allow (get, list): Any authenticated user can read the tax parameters.
     * @deny (create, update, delete): No one can create, update, or delete tax parameters.
     */
    match /tax-parameters/{paramId} {
       allow get, list: if true;
       allow create, update, delete: if false;
    }

    /**
     * @description Controls access to institutions.
     * @path /institutions/{institutionId}
     * @allow (get, list): Any authenticated user can read the institutions.
     * @deny (create, update, delete): No one can create, update, or delete institutions.
     */
    match /institutions/{institutionId} {
       allow get, list: if true;
       allow create, update, delete: if false;
    }

    function isSignedIn() {
        return request.auth != null;
    }
  }
}