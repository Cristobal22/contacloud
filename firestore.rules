/**
 * @fileoverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. User profiles are strictly private and owned by each user.
 * Company data and related accounting documents are accessible to users associated with those companies,
 * with a fallback for admin users.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, only accessible to the user themselves.
 * - /companies: Companies managed by the platform.
 * - /companies/{companyId}/accounts: Accounts for a specific company.
 * - /companies/{companyId}/vouchers: Vouchers for a specific company.
 * - /companies/{companyId}/subjects: Subjects (clients, providers) for a specific company.
 * - /companies/{companyId}/cost-centers: Cost centers for a specific company.
 * - /companies/{companyId}/employees: Employees for a specific company.
 * - /companies/{companyId}/purchases: Purchase documents for a specific company.
 * - /companies/{companyId}/sales: Sale documents for a specific company.
 * - /companies/{companyId}/fees: Fee documents for a specific company.
 * - /users/{userId}/account-groups: User-specific account groups.
 * - /users/{userId}/institutions: User-specific institutions.
 * - /users/{userId}/family-allowance-parameters: User-specific family allowance parameters.
 * - /users/{userId}/tax-parameters: User-specific tax parameters.
 * - /users/{userId}/health-entities: User-specific health entities.
 * - /users/{userId}/afp-entities: User-specific AFP entities.
 *
 * Key Security Decisions:
 * - Strict user-ownership for /users/{userId} and its subcollections.
 * - Company-level data access is granted to users whose `companyIds` array in their user profile contains the `companyId`.
 * - Listing of companies is denied, based on the provided error report. Listing should be done in code that has security constraints.
 *
 * Denormalization for Authorization:
 * - User profiles contain a `companyIds` array to quickly check company-level access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner (isSignedIn and resource exists).
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has access to a specific company based on their profile.
     */
    function hasCompanyAccess(companyId) {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
    }


    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own profile.
     * @allow (get, update, delete) User can access and modify their own profile.
     * @deny (create) User cannot create a profile with a mismatched ID.
     * @deny (get, update, delete) User cannot access or modify another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
    }

    /**
     * @description Rules for the top-level 'companies' collection.
     * @path /companies
     * @deny (get, list, create, update, delete) No one can get or list or manage root level companies collection
     * @principle Company creation and management are handled through other means.
     */
    match /companies {
      allow get, list, create, update, delete: if false;
    }


    /**
     * @description Rules for accounts within a company.
     * @path /companies/{companyId}/accounts
     * @allow (get, list) Users with access to the company can read accounts.
     * @allow (create, update, delete) Users with access to the company can modify accounts.
     * @deny (create, update, delete) Users without access to the company cannot modify accounts.
     * @principle Grants company-level access to accounts.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create, update, delete: if hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rules for vouchers within a company.
     * @path /companies/{companyId}/vouchers
     * @allow (get, list) Users with access to the company can read vouchers.
     * @allow (create, update, delete) Users with access to the company can modify vouchers.
     * @deny (create, update, delete) Users without access to the company cannot modify vouchers.
     * @principle Grants company-level access to vouchers.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create, update, delete: if hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rules for subjects within a company.
     * @path /companies/{companyId}/subjects
     * @allow (get, list) Users with access to the company can read subjects.
     * @allow (create, update, delete) Users with access to the company can modify subjects.
     * @deny (create, update, delete) Users without access to the company cannot modify subjects.
     * @principle Grants company-level access to subjects.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create, update, delete: if hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rules for cost centers within a company.
     * @path /companies/{companyId}/cost-centers
     * @allow (get, list) Users with access to the company can read cost centers.
     * @allow (create, update, delete) Users with access to the company can modify cost centers.
     * @deny (create, update, delete) Users without access to the company cannot modify cost centers.
     * @principle Grants company-level access to cost centers.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create, update, delete: if hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rules for employees within a company.
     * @path /companies/{companyId}/employees
     * @allow (get, list) Users with access to the company can read employees.
     * @allow (create, update, delete) Users with access to the company can modify employees.
     * @deny (create, update, delete) Users without access to the company cannot modify employees.
     * @principle Grants company-level access to employees.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create, update, delete: if hasCompanyAccess(companyId) && resource != null;
    }

     /**
     * @description Rules for purchases within a company.
     * @path /companies/{companyId}/purchases
     * @allow (get, list) Users with access to the company can read purchases.
     * @allow (create, update, delete) Users with access to the company can modify purchases.
     * @deny (create, update, delete) Users without access to the company cannot modify purchases.
     * @principle Grants company-level access to purchases.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create, update, delete: if hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rules for sales within a company.
     * @path /companies/{companyId}/sales
     * @allow (get, list) Users with access to the company can read sales.
     * @allow (create, update, delete) Users with access to the company can modify sales.
     * @deny (create, update, delete) Users without access to the company cannot modify sales.
     * @principle Grants company-level access to sales.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create, update, delete: if hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rules for fees within a company.
     * @path /companies/{companyId}/fees
     * @allow (get, list) Users with access to the company can read fees.
     * @allow (create, update, delete) Users with access to the company can modify fees.
     * @deny (create, update, delete) Users without access to the company cannot modify fees.
     * @principle Grants company-level access to fees.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create, update, delete: if hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rules for user-specific account groups.
     * @path /users/{userId}/account-groups
     * @allow (get, list) User can access their own account groups.
     * @allow (create, update, delete) User can modify their own account groups.
     * @deny (create, update, delete) User cannot modify another user's account groups.
     * @principle Enforces document ownership for account groups.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get, list: if isOwner(userId);
      allow create, update, delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user-specific institutions.
     * @path /users/{userId}/institutions
     * @allow (get, list) User can access their own institutions.
     * @allow (create, update, delete) User can modify their own institutions.
     * @deny (create, update, delete) User cannot modify another user's institutions.
     * @principle Enforces document ownership for institutions.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get, list: if isOwner(userId);
      allow create, update, delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user-specific family allowance parameters.
     * @path /users/{userId}/family-allowance-parameters
     * @allow (get, list) User can access their own family allowance parameters.
     * @allow (create, update, delete) User can modify their own family allowance parameters.
     * @deny (create, update, delete) User cannot modify another user's family allowance parameters.
     * @principle Enforces document ownership for family allowance parameters.
     */
    match /users/{userId}/family-allowance-parameters/{parameterId} {
      allow get, list: if isOwner(userId);
      allow create, update, delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user-specific tax parameters.
     * @path /users/{userId}/tax-parameters
     * @allow (get, list) User can access their own tax parameters.
     * @allow (create, update, delete) User can modify their own tax parameters.
     * @deny (create, update, delete) User cannot modify another user's tax parameters.
     * @principle Enforces document ownership for tax parameters.
     */
    match /users/{userId}/tax-parameters/{parameterId} {
      allow get, list: if isOwner(userId);
      allow create, update, delete: if isOwner(userId) && resource != null;
    }

     /**
     * @description Rules for user-specific health entities.
     * @path /users/{userId}/health-entities
     * @allow (get, list) User can access their own health entities.
     * @allow (create, update, delete) User can modify their own health entities.
     * @deny (create, update, delete) User cannot modify another user's health entities.
     * @principle Enforces document ownership for health entities.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get, list: if isOwner(userId);
      allow create, update, delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user-specific AFP entities.
     * @path /users/{userId}/afp-entities
     * @allow (get, list) User can access their own AFP entities.
     * @allow (create, update, delete) User can modify their own AFP entities.
     * @deny (create, update, delete) User cannot modify another user's AFP entities.
     * @principle Enforces document ownership for AFP entities.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get, list: if isOwner(userId);
      allow create, update, delete: if isOwner(userId) && resource != null;
    }
  }
}