/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a hybrid security model:
 *   - User profiles are private and only accessible to the owning user.
 *   - Company data and associated subcollections are secured to users who are associated with that company via the user's `companyIds` array.
 *   - Global parameter collections (economic indicators, tax parameters, etc.) are publicly readable but only writable by an 'Admin' role (not yet implemented).
 *   - Data shape validation is relaxed to allow for rapid prototyping, focusing on authorization.
 *
 * Data Structure:
 *   - /users/{userId}: User profile data, owned by the user with matching UID.
 *   - /companies/{companyId}: Company data. Access is granted to users who have the companyId in their user profile's `companyIds` array.
 *   - /companies/{companyId}/*: Subcollections of companies are secured by checking the parent company's access.
 *   - /economic-indicators/{indicatorId}, /tax-parameters/{paramId}, etc.: Global, publicly readable parameter data.
 *
 * Key Security Decisions:
 *   - User listing is disallowed.
 *   - Parameter data is publicly readable to facilitate client-side calculations.
 *   - Default security posture: Strict access control. Explicitly allow what is needed, deny everything else.
 *
 * Denormalization for Authorization:
 *   - User profiles contain a `companyIds` array, which is used to quickly determine which companies a user has access to. This avoids the need for complex queries or additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user has access to the company id passed in as an argument, based on their user profile.
     * @param {string} companyId - The company ID to check access against.
     * @returns {boolean} True if the user has access, false otherwise.
     */
    function hasCompanyAccess(companyId) {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the 'id' field in the document.
     * @returns {boolean} True if the UIDs match and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Rule for securing the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Allow user to create their profile if their UID matches the userId.
     * @allow (get, update, delete) - Allow access only to the user with a matching UID.
     * @deny (list) - Prevent listing all users.
     * @deny (create) - Prevent creating a user with a mismatched UID.
     * @deny (update, delete) - Prevent non-owners from updating or deleting the profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      // Only allow a user to create their own profile.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      // Only allow a user to read, update, or delete their own profile.
      allow get, update, delete: if isExistingOwner(userId);
      // Prevent listing all users.
      allow list: if false;
    }

    /**
     * @description Rule for securing the /companies/{companyId} collection.
     * @path /companies/{companyId}
     * @allow (get, list) - Allow users to read company data if they are associated with the company.
     * @allow (create) - Only allow creating a company if the user's UID matches the ownerId and has access to the company id
     * @allow (update, delete) - Only allow updating/deleting a company if the user's UID matches the ownerId and they have access to the company id.
     * @deny (create) - Prevent creating a company with a mismatched ownerId.
     * @deny (update, delete) - Prevent non-owners from updating/deleting the company.
     * @principle Enforces company-level access control based on user association.
     */
    match /companies/{companyId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid && hasCompanyAccess(companyId);
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid && hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rule for securing the /companies/{companyId}/accounts subcollection.
     * @path /companies/{companyId}/accounts
     * @allow (get, list) - Allow users to read accounts if they are associated with the parent company.
     * @allow (create) - Allow creating accounts if the user is associated with the parent company and the companyId matches the path.
     * @allow (update, delete) - Allow updating/deleting accounts if the user is associated with the parent company.
     * @deny (create) - Prevent creating an account with a mismatched companyId.
     * @principle Enforces company-level access control for accounts.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create: if isSignedIn() && hasCompanyAccess(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rule for securing the /companies/{companyId}/vouchers subcollection.
     * @path /companies/{companyId}/vouchers
     * @allow (get, list) - Allow users to read vouchers if they are associated with the parent company.
     * @allow (create) - Allow creating vouchers if the user is associated with the parent company and the companyId matches the path.
     * @allow (update, delete) - Allow updating/deleting vouchers if the user is associated with the parent company.
     * @deny (create) - Prevent creating a voucher with a mismatched companyId.
     * @principle Enforces company-level access control for vouchers.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create: if isSignedIn() && hasCompanyAccess(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rule for securing the /companies/{companyId}/subjects subcollection.
     * @path /companies/{companyId}/subjects
     * @allow (get, list) - Allow users to read subjects if they are associated with the parent company.
     * @allow (create) - Allow creating subjects if the user is associated with the parent company and the companyId matches the path.
     * @allow (update, delete) - Allow updating/deleting subjects if the user is associated with the parent company.
     * @deny (create) - Prevent creating a subject with a mismatched companyId.
     * @principle Enforces company-level access control for subjects.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create: if isSignedIn() && hasCompanyAccess(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rule for securing the /companies/{companyId}/cost-centers subcollection.
     * @path /companies/{companyId}/cost-centers
     * @allow (get, list) - Allow users to read cost centers if they are associated with the parent company.
     * @allow (create) - Allow creating cost centers if the user is associated with the parent company and the companyId matches the path.
     * @allow (update, delete) - Allow updating/deleting cost centers if the user is associated with the parent company.
     * @deny (create) - Prevent creating a cost center with a mismatched companyId.
     * @principle Enforces company-level access control for cost centers.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create: if isSignedIn() && hasCompanyAccess(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rule for securing the /companies/{companyId}/employees subcollection.
     * @path /companies/{companyId}/employees
     * @allow (get, list) - Allow users to read employees if they are associated with the parent company.
     * @allow (create) - Allow creating employees if the user is associated with the parent company and the companyId matches the path.
     * @allow (update, delete) - Allow updating/deleting employees if the user is associated with the parent company.
     * @deny (create) - Prevent creating an employee with a mismatched companyId.
     * @principle Enforces company-level access control for employees.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create: if isSignedIn() && hasCompanyAccess(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rule for securing the /companies/{companyId}/payrolls subcollection.
     * @path /companies/{companyId}/payrolls
     * @allow (get, list) - Allow users to read payrolls if they are associated with the parent company.
     * @allow (create) - Allow creating payrolls if the user is associated with the parent company and the companyId matches the path.
     * @allow (update, delete) - Allow updating/deleting payrolls if the user is associated with the parent company.
     * @deny (create) - Prevent creating a payroll with a mismatched companyId.
     * @principle Enforces company-level access control for payrolls.
     */
    match /companies/{companyId}/payrolls/{payrollId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create: if isSignedIn() && hasCompanyAccess(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && hasCompanyAccess(companyId) && resource != null;
    }
   /**
     * @description Rule for securing the /companies/{companyId}/purchases subcollection.
     * @path /companies/{companyId}/purchases
     * @allow (get, list) - Allow users to read purchases if they are associated with the parent company.
     * @allow (create) - Allow creating purchases if the user is associated with the parent company and the companyId matches the path.
     * @allow (update, delete) - Allow updating/deleting purchases if the user is associated with the parent company.
     * @deny (create) - Prevent creating a purchase with a mismatched companyId.
     * @principle Enforces company-level access control for purchases.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create: if isSignedIn() && hasCompanyAccess(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rule for securing the /companies/{companyId}/sales subcollection.
     * @path /companies/{companyId}/sales
     * @allow (get, list) - Allow users to read sales if they are associated with the parent company.
     * @allow (create) - Allow creating sales if the user is associated with the parent company and the companyId matches the path.
     * @allow (update, delete) - Allow updating/deleting sales if the user is associated with the parent company.
     * @deny (create) - Prevent creating a sale with a mismatched companyId.
     * @principle Enforces company-level access control for sales.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create: if isSignedIn() && hasCompanyAccess(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && hasCompanyAccess(companyId) && resource != null;
    }

     /**
     * @description Rule for securing the /companies/{companyId}/fees subcollection.
     * @path /companies/{companyId}/fees
     * @allow (get, list) - Allow users to read fees if they are associated with the parent company.
     * @allow (create) - Allow creating fees if the user is associated with the parent company and the companyId matches the path.
     * @allow (update, delete) - Allow updating/deleting fees if the user is associated with the parent company.
     * @deny (create) - Prevent creating a fee with a mismatched companyId.
     * @principle Enforces company-level access control for fees.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get, list: if hasCompanyAccess(companyId);
      allow create: if isSignedIn() && hasCompanyAccess(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rule for securing the /companies/{companyId}/economic-indicators/{indicatorId} document.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     * @allow (get, list) - Allow users to read economic indicators if they are associated with the parent company.
     * @allow (create) - Allow creating economic indicators if the user is associated with the parent company and the companyId matches the path.
     * @allow (update, delete) - Allow updating/deleting economic indicators if the user is associated with the parent company.
     * @deny (create) - Prevent creating an economic indicator with a mismatched companyId.
     * @principle Enforces company-level access control for economic indicators.
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
      allow get: if hasCompanyAccess(companyId);
      allow list: if hasCompanyAccess(companyId);
      allow create: if isSignedIn() && hasCompanyAccess(companyId);
      allow update, delete: if isSignedIn() && hasCompanyAccess(companyId) && resource != null;
    }

    /**
     * @description Rule for securing the /users/{userId}/account-groups subcollection.
     * @path /users/{userId}/account-groups
     * @allow (get, list) - Allow the user to read their own account groups.
     * @allow (create) - Allow the user to create account groups.
     * @allow (update, delete) - Allow the user to update or delete their own account groups.
     * @deny (create) - Prevent creating an account group with a mismatched user ID.
     * @principle Enforces user-ownership for account groups.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for securing the /economic-indicators collection.
     * @path /economic-indicators/{indicatorId}
     * @allow (get, list) - Allow anyone to read economic indicators.
     * @allow (create, update, delete) - Only allow admins to create, update, or delete.
     * @principle Allows public read access to global economic indicators.
     */
    match /economic-indicators/{indicatorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only writes
    }

    /**
     * @description Rule for securing the /health-entities collection.
     * @path /health-entities/{entityId}
     * @allow (get, list) - Allow anyone to read health entities.
     * @allow (create, update, delete) - Only allow admins to create, update, or delete.
     * @principle Allows public read access to global health entities.
     */
    match /health-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only writes
    }

    /**
     * @description Rule for securing the /afp-entities collection.
     * @path /afp-entities/{entityId}
     * @allow (get, list) - Allow anyone to read AFP entities.
     * @allow (create, update, delete) - Only allow admins to create, update, or delete.
     * @principle Allows public read access to global AFP entities.
     */
    match /afp-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only writes
    }

    /**
     * @description Rule for securing the /family-allowance-parameters collection.
     * @path /family-allowance-parameters/{paramId}
     * @allow (get, list) - Allow anyone to read family allowance parameters.
     * @allow (create, update, delete) - Only allow admins to create, update, or delete.
     * @principle Allows public read access to global family allowance parameters.
     */
    match /family-allowance-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only writes
    }

    /**
     * @description Rule for securing the /tax-parameters collection.
     * @path /tax-parameters/{paramId}
     * @allow (get, list) - Allow anyone to read tax parameters.
     * @allow (create, update, delete) - Only allow admins to create, update, or delete.
     * @principle Allows public read access to global tax parameters.
     */
    match /tax-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only writes
    }
    /**
     * @description Rule for securing the /taxable-caps collection.
     * @path /taxable-caps/{capId}
     * @allow (get, list) - Allow anyone to read taxable caps.
     * @allow (create, update, delete) - Only allow admins to create, update, or delete.
     * @principle Allows public read access to global taxable caps.
     */
    match /taxable-caps/{capId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only writes
    }
  }
}