rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile (uid matches).
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - User attempts to create a profile with a mismatched uid.
     * @deny (get, update, delete) - User attempts to access another user's profile.
     * @deny (list) - Listing all users is not permitted.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to company documents.
     * @path /companies/{companyId}
     * @allow (get, list) - All authenticated users can read company data.
     * @allow (create, update, delete) - Placeholder:  Writes are not currently restricted in this prototype.
     * @deny (create, update, delete) - Placeholder: Writes *should* be restricted by application logic based on user roles/permissions.
     * @principle Placeholder for future role-based authorization.
     */
    match /companies/{companyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // TODO: Add company-level role checks here for production.
    }

    /**
     * @description Controls access to accounts subcollection.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) - All authenticated users can read account data.
     * @allow (create, update, delete) - Placeholder: Writes are not currently restricted in this prototype.
     * @deny (create, update, delete) - Placeholder: Writes *should* be restricted by application logic based on user roles/permissions.
     * @principle Placeholder for future role-based authorization.
     */
    match /companies/{companyId}/accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // TODO: Add company-level role checks here for production.
    }

    /**
     * @description Controls access to vouchers subcollection.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) - All authenticated users can read voucher data.
     * @allow (create, update, delete) - Placeholder: Writes are not currently restricted in this prototype.
     * @deny (create, update, delete) - Placeholder: Writes *should* be restricted by application logic based on user roles/permissions.
     * @principle Placeholder for future role-based authorization.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // TODO: Add company-level role checks here for production.
    }

    /**
     * @description Controls access to subjects subcollection.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) - All authenticated users can read subject data.
     * @allow (create, update, delete) - Placeholder: Writes are not currently restricted in this prototype.
     * @deny (create, update, delete) - Placeholder: Writes *should* be restricted by application logic based on user roles/permissions.
     * @principle Placeholder for future role-based authorization.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // TODO: Add company-level role checks here for production.
    }

    /**
     * @description Controls access to cost-centers subcollection.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) - All authenticated users can read cost center data.
     * @allow (create, update, delete) - Placeholder: Writes are not currently restricted in this prototype.
     * @deny (create, update, delete) - Placeholder: Writes *should* be restricted by application logic based on user roles/permissions.
     * @principle Placeholder for future role-based authorization.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // TODO: Add company-level role checks here for production.
    }

    /**
     * @description Controls access to employees subcollection.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) - All authenticated users can read employee data.
     * @allow (create, update, delete) - Placeholder: Writes are not currently restricted in this prototype.
     * @deny (create, update, delete) - Placeholder: Writes *should* be restricted by application logic based on user roles/permissions.
     * @principle Placeholder for future role-based authorization.
     */
    match /companies/{companyId}/employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // TODO: Add company-level role checks here for production.
    }

    /**
     * @description Controls access to payrolls subcollection.
     * @path /companies/{companyId}/payrolls/{payrollId}
     * @allow (get, list) - All authenticated users can read payroll data.
     * @allow (create, update, delete) - Placeholder: Writes are not currently restricted in this prototype.
     * @deny (create, update, delete) - Placeholder: Writes *should* be restricted by application logic based on user roles/permissions.
     * @principle Placeholder for future role-based authorization.
     */
    match /companies/{companyId}/payrolls/{payrollId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // TODO: Add company-level role checks here for production.
    }

      /**
     * @description Controls access to purchases subcollection.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) - All authenticated users can read purchase data.
     * @allow (create, update, delete) - Placeholder: Writes are not currently restricted in this prototype.
     * @deny (create, update, delete) - Placeholder: Writes *should* be restricted by application logic based on user roles/permissions.
     * @principle Placeholder for future role-based authorization.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // TODO: Add company-level role checks here for production.
    }

    /**
     * @description Controls access to sales subcollection.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) - All authenticated users can read sale data.
     * @allow (create, update, delete) - Placeholder: Writes are not currently restricted in this prototype.
     * @deny (create, update, delete) - Placeholder: Writes *should* be restricted by application logic based on user roles/permissions.
     * @principle Placeholder for future role-based authorization.
     */
    match /companies/{companyId}/sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // TODO: Add company-level role checks here for production.
    }

     /**
     * @description Controls access to fees subcollection.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) - All authenticated users can read fees data.
     * @allow (create, update, delete) - Placeholder: Writes are not currently restricted in this prototype.
     * @deny (create, update, delete) - Placeholder: Writes *should* be restricted by application logic based on user roles/permissions.
     * @principle Placeholder for future role-based authorization.
     */
    match /companies/{companyId}/fees/{feeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // TODO: Add company-level role checks here for production.
    }

    /**
     * @description Controls access to company-specific economic indicators.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     * @allow (get, list) - All authenticated users can read.
     * @allow (create, update, delete) - Placeholder: Writes are not currently restricted in this prototype.
     * @deny (create, update, delete) - Placeholder: Writes *should* be restricted by application logic based on user roles/permissions.
     * @principle Placeholder for future role-based authorization.
     */
     match /companies/{companyId}/economic-indicators/{indicatorId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // TODO: Add company-level role checks here for production.
    }

     /**
     * @description Controls access to user-specific account groups.
     * @path /users/{userId}/account-groups/{groupId}
     * @allow (get, list) - Only the owner can list their own documents.
     * @allow (create, update, delete) - Only the owner can create, update, and delete documents.
     * @deny (get, list) - Users cannot list other users' account groups.
     * @deny (create, update, delete) - Users cannot modify other users' account groups.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/account-groups/{groupId} {
       function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to global economic indicators.
     * @path /economic-indicators/{indicatorId}
     * @allow (get, list) - Any user can read economic indicator data.
     * @deny (create, update, delete) - No user can create, update, or delete economic indicators (admin only).
     * @principle Public read access with restricted writes.
     */
    match /economic-indicators/{indicatorId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

     /**
     * @description Allows public read access to health entities.
     * @path /health-entities/{entityId}
     * @allow (get, list) - Any user can read health entity data.
     * @deny (create, update, delete) - No user can create, update, or delete health entities (admin only).
     * @principle Public read access with restricted writes.
     */
    match /health-entities/{entityId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to AFP entities.
     * @path /afp-entities/{entityId}
     * @allow (get, list) - Any user can read AFP entity data.
     * @deny (create, update, delete) - No user can create, update, or delete AFP entities (admin only).
     * @principle Public read access with restricted writes.
     */
    match /afp-entities/{entityId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to family allowance parameters.
     * @path /family-allowance-parameters/{paramId}
     * @allow (get, list) - Any user can read family allowance parameters.
     * @deny (create, update, delete) - No user can create, update, or delete family allowance parameters (admin only).
     * @principle Public read access with restricted writes.
     */
    match /family-allowance-parameters/{paramId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to tax parameters.
     * @path /tax-parameters/{paramId}
     * @allow (get, list) - Any user can read tax parameters.
     * @deny (create, update, delete) - No user can create, update, or delete tax parameters (admin only).
     * @principle Public read access with restricted writes.
     */
    match /tax-parameters/{paramId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to institutions.
     * @path /institutions/{institutionId}
     * @allow (get, list) - Any user can read institution data.
     * @deny (create, update, delete) - No user can create, update, or delete institutions (admin only).
     * @principle Public read access with restricted writes.
     */
    match /institutions/{institutionId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}