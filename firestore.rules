/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system, primarily focused on distinguishing 'Accountant' users. Admins are implicitly restricted to user management and have no special access to other data.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves and on initial account creation.
 * - /companies: Stores company information. Only Accountants associated with the company can manage company data.
 * - /companies/{companyId}/accounts: Chart of accounts for a company.
 * - /companies/{companyId}/vouchers: Accounting vouchers for a company.
 * - /companies/{companyId}/subjects: Clients, providers, and other subjects related to a company.
 * - /companies/{companyId}/cost-centers: Cost centers for tracking expenses within a company.
 * - /companies/{companyId}/employees: Employee records for a company.
 * - /companies/{companyId}/purchases: Purchase documents for a company.
 * - /companies/{companyId}/sales: Sales documents for a company.
 * - /companies/{companyId}/fees: Fee documents for a company.
 * - /users/{userId}/account-groups: User-defined account groups.
 * - /users/{userId}/institutions: User-defined pension and health institutions.
 * - /users/{userId}/family-allowance-parameters: User-defined family allowance parameters.
 * - /users/{userId}/tax-parameters: User-defined tax parameters for IUT calculations.
 * - /users/{userId}/health-entities: User-defined health entities.
 * - /users/{userId}/afp-entities: User-defined AFP entities.
 *
 * Key Security Decisions:
 * - Admin Role Restriction: Admins are implicitly limited to user management tasks through the Firebase Authentication service, not Firestore data access.
 * - Accountant Access: Accountants are granted access to company-related data based on companyId association.
 * - Owner-Only Access for User Data:  User profiles and user-specific collections are strictly controlled by the user's ID.
 *
 * Denormalization for Authorization:
 * - The `ownerId` field in the `Company` document is used to quickly determine if a user has ownership. The `companyIds` array in the `UserProfile` document lists the companies a user is associated with.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is associated with the company ID.
     */
    function isAccountantForCompany(companyId) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
    }

    /**
     * @description Checks if the user is the owner of a company.
     */
    function isCompanyOwner(companyId) {
      return isSignedIn() && get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Checks if a document exists and the authenticated user is the owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Collection to store user profile information.
     * @path /users/{userId}
     * @allow (create) - Allow user to create their own profile if the userId matches their auth.uid.
     * @allow (get) - Allow user to read their own profile.
     * @allow (update) - Allow user to update their own profile.
     * @allow (delete) - Allow user to delete their own profile.
     * @deny (create) - Deny creation if the userId does not match their auth.uid.
     * @deny (get) - Deny other users from reading this profile.
     * @deny (update) - Deny other users from updating this profile.
     * @deny (delete) - Deny other users from deleting this profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of all companies managed by the platform.
     * @path /companies
     * @allow (create) - Allow a user to create a company if they are authenticated.  The `ownerId` is set to their `uid`.
     * @allow (get) - Allow anyone to read company data.
     * @allow (list) - Allow anyone to list companies.
     * @allow (update) - Allow a company owner to update company data.
     * @allow (delete) - Allow a company owner to delete company data.
     * @deny (create) - Deny unauthenticated users from creating companies.
     * @deny (update) - Deny non-owners from updating company data.
     * @deny (delete) - Deny non-owners from deleting company data.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /companies/{companyId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isCompanyOwner(companyId) && resource != null;
      allow delete: if isCompanyOwner(companyId) && resource != null;
    }

    /**
     * @description Sub-collection of accounts for a specific company.
     * @path /companies/{companyId}/accounts
     * @allow (create) - Allow accountants associated with the company to create accounts.
     * @allow (get) - Allow anyone to read accounts for a company.
     * @allow (list) - Allow anyone to list accounts for a company.
     * @allow (update) - Allow accountants associated with the company to update accounts.
     * @allow (delete) - Allow accountants associated with the company to delete accounts.
     * @deny (create) - Deny unauthenticated users and non-accountants from creating accounts.
     * @deny (update) - Deny unauthenticated users and non-accountants from updating accounts.
     * @deny (delete) - Deny unauthenticated users and non-accountants from deleting accounts.
     * @principle Restricts access to accountants associated with the company.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAccountantForCompany(companyId);
      allow update: if isAccountantForCompany(companyId) && resource != null;
      allow delete: if isAccountantForCompany(companyId) && resource != null;
    }

    /**
     * @description Sub-collection of accounting vouchers for a specific company.
     * @path /companies/{companyId}/vouchers
     * @allow (create) - Allow accountants associated with the company to create vouchers.
     * @allow (get) - Allow anyone to read vouchers for a company.
     * @allow (list) - Allow anyone to list vouchers for a company.
     * @allow (update) - Allow accountants associated with the company to update vouchers.
     * @allow (delete) - Allow accountants associated with the company to delete vouchers.
     * @deny (create) - Deny unauthenticated users and non-accountants from creating vouchers.
     * @deny (update) - Deny unauthenticated users and non-accountants from updating vouchers.
     * @deny (delete) - Deny unauthenticated users and non-accountants from deleting vouchers.
     * @principle Restricts access to accountants associated with the company.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAccountantForCompany(companyId);
      allow update: if isAccountantForCompany(companyId) && resource != null;
      allow delete: if isAccountantForCompany(companyId) && resource != null;
    }

    /**
     * @description Sub-collection of subjects (clients, providers) for a specific company.
     * @path /companies/{companyId}/subjects
     * @allow (create) - Allow accountants associated with the company to create subjects.
     * @allow (get) - Allow anyone to read subjects for a company.
     * @allow (list) - Allow anyone to list subjects for a company.
     * @allow (update) - Allow accountants associated with the company to update subjects.
     * @allow (delete) - Allow accountants associated with the company to delete subjects.
     * @deny (create) - Deny unauthenticated users and non-accountants from creating subjects.
     * @deny (update) - Deny unauthenticated users and non-accountants from updating subjects.
     * @deny (delete) - Deny unauthenticated users and non-accountants from deleting subjects.
     * @principle Restricts access to accountants associated with the company.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAccountantForCompany(companyId);
      allow update: if isAccountantForCompany(companyId) && resource != null;
      allow delete: if isAccountantForCompany(companyId) && resource != null;
    }

    /**
     * @description Sub-collection of cost centers for a specific company.
     * @path /companies/{companyId}/cost-centers
     * @allow (create) - Allow accountants associated with the company to create cost centers.
     * @allow (get) - Allow anyone to read cost centers for a company.
     * @allow (list) - Allow anyone to list cost centers for a company.
     * @allow (update) - Allow accountants associated with the company to update cost centers.
     * @allow (delete) - Allow accountants associated with the company to delete cost centers.
     * @deny (create) - Deny unauthenticated users and non-accountants from creating cost centers.
     * @deny (update) - Deny unauthenticated users and non-accountants from updating cost centers.
     * @deny (delete) - Deny unauthenticated users and non-accountants from deleting cost centers.
     * @principle Restricts access to accountants associated with the company.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAccountantForCompany(companyId);
      allow update: if isAccountantForCompany(companyId) && resource != null;
      allow delete: if isAccountantForCompany(companyId) && resource != null;
    }

    /**
     * @description Sub-collection of employees for a specific company.
     * @path /companies/{companyId}/employees
     * @allow (create) - Allow accountants associated with the company to create employees.
     * @allow (get) - Allow anyone to read employees for a company.
     * @allow (list) - Allow anyone to list employees for a company.
     * @allow (update) - Allow accountants associated with the company to update employees.
     * @allow (delete) - Allow accountants associated with the company to delete employees.
     * @deny (create) - Deny unauthenticated users and non-accountants from creating employees.
     * @deny (update) - Deny unauthenticated users and non-accountants from updating employees.
     * @deny (delete) - Deny unauthenticated users and non-accountants from deleting employees.
     * @principle Restricts access to accountants associated with the company.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAccountantForCompany(companyId);
      allow update: if isAccountantForCompany(companyId) && resource != null;
      allow delete: if isAccountantForCompany(companyId) && resource != null;
    }

        /**
     * @description Sub-collection of purchase documents for a specific company.
     * @path /companies/{companyId}/purchases
     * @allow (create) - Allow accountants associated with the company to create purchases.
     * @allow (get) - Allow anyone to read purchases for a company.
     * @allow (list) - Allow anyone to list purchases for a company.
     * @allow (update) - Allow accountants associated with the company to update purchases.
     * @allow (delete) - Allow accountants associated with the company to delete purchases.
     * @deny (create) - Deny unauthenticated users and non-accountants from creating purchases.
     * @deny (update) - Deny unauthenticated users and non-accountants from updating purchases.
     * @deny (delete) - Deny unauthenticated users and non-accountants from deleting purchases.
     * @principle Restricts access to accountants associated with the company.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAccountantForCompany(companyId);
      allow update: if isAccountantForCompany(companyId) && resource != null;
      allow delete: if isAccountantForCompany(companyId) && resource != null;
    }

    /**
     * @description Sub-collection of sales documents for a specific company.
     * @path /companies/{companyId}/sales
     * @allow (create) - Allow accountants associated with the company to create sales.
     * @allow (get) - Allow anyone to read sales for a company.
     * @allow (list) - Allow anyone to list sales for a company.
     * @allow (update) - Allow accountants associated with the company to update sales.
     * @allow (delete) - Allow accountants associated with the company to delete sales.
     * @deny (create) - Deny unauthenticated users and non-accountants from creating sales.
     * @deny (update) - Deny unauthenticated users and non-accountants from updating sales.
     * @deny (delete) - Deny unauthenticated users and non-accountants from deleting sales.
     * @principle Restricts access to accountants associated with the company.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAccountantForCompany(companyId);
      allow update: if isAccountantForCompany(companyId) && resource != null;
      allow delete: if isAccountantForCompany(companyId) && resource != null;
    }

    /**
     * @description Sub-collection of fee documents for a specific company.
     * @path /companies/{companyId}/fees
     * @allow (create) - Allow accountants associated with the company to create fees.
     * @allow (get) - Allow anyone to read fees for a company.
     * @allow (list) - Allow anyone to list fees for a company.
     * @allow (update) - Allow accountants associated with the company to update fees.
     * @allow (delete) - Allow accountants associated with the company to delete fees.
     * @deny (create) - Deny unauthenticated users and non-accountants from creating fees.
     * @deny (update) - Deny unauthenticated users and non-accountants from updating fees.
     * @deny (delete) - Deny unauthenticated users and non-accountants from deleting fees.
     * @principle Restricts access to accountants associated with the company.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAccountantForCompany(companyId);
      allow update: if isAccountantForCompany(companyId) && resource != null;
      allow delete: if isAccountantForCompany(companyId) && resource != null;
    }
    
    /**
     * @description User-specific collection of account groups.
     * @path /users/{userId}/account-groups
     * @allow (create) - Allow user to create their own account groups.
     * @allow (get) - Allow user to read their own account groups.
     * @allow (list) - Allow user to list their own account groups.
     * @allow (update) - Allow user to update their own account groups.
     * @allow (delete) - Allow user to delete their own account groups.
     * @deny (create) - Deny other users from creating account groups for this user.
     * @deny (get) - Deny other users from reading this user's account groups.
     * @deny (list) - Deny other users from listing this user's account groups.
     * @deny (update) - Deny other users from updating this user's account groups.
     * @deny (delete) - Deny other users from deleting this user's account groups.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of pension and health institutions.
     * @path /users/{userId}/institutions
     * @allow (create) - Allow user to create their own institutions.
     * @allow (get) - Allow user to read their own institutions.
     * @allow (list) - Allow user to list their own institutions.
     * @allow (update) - Allow user to update their own institutions.
     * @allow (delete) - Allow user to delete their own institutions.
     * @deny (create) - Deny other users from creating institutions for this user.
     * @deny (get) - Deny other users from reading this user's institutions.
     * @deny (list) - Deny other users from listing this user's institutions.
     * @deny (update) - Deny other users from updating this user's institutions.
     * @deny (delete) - Deny other users from deleting this user's institutions.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of family allowance parameters.
     * @path /users/{userId}/family-allowance-parameters
     * @allow (create) - Allow user to create their own family allowance parameters.
     * @allow (get) - Allow user to read their own family allowance parameters.
     * @allow (list) - Allow user to list their own family allowance parameters.
     * @allow (update) - Allow user to update their own family allowance parameters.
     * @allow (delete) - Allow user to delete their own family allowance parameters.
     * @deny (create) - Deny other users from creating family allowance parameters for this user.
     * @deny (get) - Deny other users from reading this user's family allowance parameters.
     * @deny (list) - Deny other users from listing this user's family allowance parameters.
     * @deny (update) - Deny other users from updating this user's family allowance parameters.
     * @deny (delete) - Deny other users from deleting this user's family allowance parameters.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of tax parameters for IUT.
     * @path /users/{userId}/tax-parameters
     * @allow (create) - Allow user to create their own tax parameters.
     * @allow (get) - Allow user to read their own tax parameters.
     * @allow (list) - Allow user to list their own tax parameters.
     * @allow (update) - Allow user to update their own tax parameters.
     * @allow (delete) - Allow user to delete their own tax parameters.
     * @deny (create) - Deny other users from creating tax parameters for this user.
     * @deny (get) - Deny other users from reading this user's tax parameters.
     * @deny (list) - Deny other users from listing this user's tax parameters.
     * @deny (update) - Deny other users from updating this user's tax parameters.
     * @deny (delete) - Deny other users from deleting this user's tax parameters.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of health entities (Isapres and Fonasa).
     * @path /users/{userId}/health-entities
     * @allow (create) - Allow user to create their own health entities.
     * @allow (get) - Allow user to read their own health entities.
     * @allow (list) - Allow user to list their own health entities.
     * @allow (update) - Allow user to update their own health entities.
     * @allow (delete) - Allow user to delete their own health entities.
     * @deny (create) - Deny other users from creating health entities for this user.
     * @deny (get) - Deny other users from reading this user's health entities.
     * @deny (list) - Deny other users from listing this user's health entities.
     * @deny (update) - Deny other users from updating this user's health entities.
     * @deny (delete) - Deny other users from deleting this user's health entities.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User-specific collection of AFP entities.
     * @path /users/{userId}/afp-entities
     * @allow (create) - Allow user to create their own AFP entities.
     * @allow (get) - Allow user to read their own AFP entities.
     * @allow (list) - Allow user to list their own AFP entities.
     * @allow (update) - Allow user to update their own AFP entities.
     * @allow (delete) - Allow user to delete their own AFP entities.
     * @deny (create) - Deny other users from creating AFP entities for this user.
     * @deny (get) - Deny other users from reading this user's AFP entities.
     * @deny (list) - Deny other users from listing this user's AFP entities.
     * @deny (update) - Deny other users from updating this user's AFP entities.
     * @deny (delete) - Deny other users from deleting this user's AFP entities.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
