rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the resource's ownerId.
     */
    function isResourceOwner(resourceOwnerId) {
      return isSignedIn() && request.auth.uid == resourceOwnerId;
    }

     /**
     * @description Checks if the authenticated user's ID matches the resource's ownerId and if the resource exists.
     */
    function isExistingOwner(resourceOwnerId) {
        return isResourceOwner(resourceOwnerId) && exists(resource);
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     */
    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    /**
     * @description Checks if the user has the 'Accountant' role.
     */
    function isAccountant() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
    }

    /**
     * @description Checks if the user is associated with the given company ID.
     */
    function isUserInCompany(companyId) {
        return isSignedIn() && companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
    }


    /**
     * @description Rules for user profile documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for company documents.
     */
    match /companies/{companyId} {
      allow get: if isSignedIn() && isUserInCompany(companyId);
      allow list: if isSignedIn() && isAccountant();
      allow create: if isSignedIn() && isAccountant();
      allow update: if isSignedIn() && isAccountant();
      allow delete: if isSignedIn() && isAccountant();
    }

    /**
     * @description Rules for account documents within a company.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get: if isSignedIn() && isUserInCompany(companyId);
      allow list: if isSignedIn() && isUserInCompany(companyId);
      allow create: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow update: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow delete: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
    }

    /**
     * @description Rules for voucher documents within a company.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get: if isSignedIn() && isUserInCompany(companyId);
      allow list: if isSignedIn() && isUserInCompany(companyId);
      allow create: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow update: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow delete: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
    }

    /**
     * @description Rules for subject documents within a company.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get: if isSignedIn() && isUserInCompany(companyId);
      allow list: if isSignedIn() && isUserInCompany(companyId);
      allow create: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow update: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow delete: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
    }

    /**
     * @description Rules for cost center documents within a company.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get: if isSignedIn() && isUserInCompany(companyId);
      allow list: if isSignedIn() && isUserInCompany(companyId);
      allow create: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow update: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow delete: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
    }

    /**
     * @description Rules for employee documents within a company.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get: if isSignedIn() && isUserInCompany(companyId);
      allow list: if isSignedIn() && isUserInCompany(companyId);
      allow create: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow update: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow delete: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
    }

    /**
     * @description Rules for purchase documents within a company.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get: if isSignedIn() && isUserInCompany(companyId);
      allow list: if isSignedIn() && isUserInCompany(companyId);
      allow create: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow update: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow delete: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
    }

    /**
     * @description Rules for sales documents within a company.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get: if isSignedIn() && isUserInCompany(companyId);
      allow list: if isSignedIn() && isUserInCompany(companyId);
      allow create: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow update: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow delete: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
    }

    /**
     * @description Rules for fee documents within a company.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get: if isSignedIn() && isUserInCompany(companyId);
      allow list: if isSignedIn() && isUserInCompany(companyId);
      allow create: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow update: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow delete: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
    }

    /**
     * @description Rules for company-specific overrides of economic indicator documents.
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
      allow get: if isSignedIn() && isUserInCompany(companyId);
      allow list: if isSignedIn() && isUserInCompany(companyId);
      allow create: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow update: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
      allow delete: if isSignedIn() && isAccountant() && isUserInCompany(companyId);
    }
    
    /**
     * @description Rules for user-specific account group documents.
     */
    match /users/{userId}/account-groups/{groupId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for global economic indicator documents.
     */
    match /economic-indicators/{indicatorId} {
      allow get: if true;
      allow list: if true;
    }

    /**
     * @description Rules for global health entity documents.
     */
    match /health-entities/{entityId} {
        allow get: if true;
        allow list: if true;
    }

    /**
     * @description Rules for global AFP entity documents.
     */
    match /afp-entities/{entityId} {
        allow get: if true;
        allow list: if true;
    }

    /**
     * @description Rules for global family allowance parameter documents.
     */
    match /family-allowance-parameters/{paramId} {
        allow get: if true;
        allow list: if true;
    }

    /**
     * @description Rules for global tax parameter documents.
     */
    match /tax-parameters/{paramId} {
        allow get: if true;
        allow list: if true;
    }

    /**
     * @description Rules for global institution documents.
     */
    match /institutions/{institutionId} {
        allow get: if true;
        allow list: if true;
    }
  }
}