/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership and role-based access control model for the accounting platform.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}.
 * - Companies are stored under /companies/{companyId}.
 * - Company-related data (accounts, vouchers, subjects, etc.) are stored under /companies/{companyId}/....
 * - Global configuration data (economic indicators, tax parameters, etc.) are stored at the top level.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Company data is accessible to users associated with the company (denormalized on the UserProfile).
 * - Certain global collections (economic-indicators, tax-parameters) are publicly readable, but only admins can modify them.
 * - User listing is disallowed for privacy.
 * - Unspecified relationships default to a secure-by-default posture (deny all).
 *
 * Denormalization for Authorization:
 * - UserProfile.companyIds: This array contains the IDs of the companies the user is associated with,
 *   allowing rules to efficiently check company access without additional reads.
 * - Company.ownerId: Stores the UID of the user who owns/created the company.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the resource exists.
     * @param {string} userId The user ID to compare against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has Admin role.
     */
    function isAdmin() {
      return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');
    }

    /**
     * @description Checks if the authenticated user is associated with the company
     * @param {string} companyId The company ID to check against.
     */
    function isUserAssociatedWithCompany(companyId) {
      return isSignedIn() && (companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds);
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can access their own profile.
     * @deny (create) - User cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (list) - User cannot list all users.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /companies/{companyId} collection.
     * @path /companies/{companyId}
     * @allow (get, list) - Any user associated with the company can read the company's information.
     * @allow (create) - Only the company owner can create a company. The company `ownerId` must match the user's UID.
     * @allow (update, delete) - Only the company owner can update or delete the company.
     * @deny (create) - A user cannot create a company for another user.
     * @principle Enforces company ownership and shared access based on denormalized user associations.
     */
    match /companies/{companyId} {
      allow get, list: if isUserAssociatedWithCompany(companyId);
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for the /companies/{companyId}/accounts collection.
     * @path /companies/{companyId}/accounts
     * @allow (get, list) - Any user associated with the company can read the accounts.
     * @allow (create) - Any user associated with the company can create new accounts.
     * @allow (update, delete) - Any user associated with the company can update or delete accounts.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get, list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Rules for the /companies/{companyId}/vouchers collection.
     * @path /companies/{companyId}/vouchers
     * @allow (get, list) - Any user associated with the company can read the vouchers.
     * @allow (create) - Any user associated with the company can create new vouchers.
     * @allow (update, delete) - Any user associated with the company can update or delete vouchers.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get, list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Rules for the /companies/{companyId}/subjects collection.
     * @path /companies/{companyId}/subjects
     * @allow (get, list) - Any user associated with the company can read the subjects.
     * @allow (create) - Any user associated with the company can create new subjects.
     * @allow (update, delete) - Any user associated with the company can update or delete subjects.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get, list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Rules for the /companies/{companyId}/cost-centers collection.
     * @path /companies/{companyId}/cost-centers
     * @allow (get, list) - Any user associated with the company can read the cost centers.
     * @allow (create) - Any user associated with the company can create new cost centers.
     * @allow (update, delete) - Any user associated with the company can update or delete cost centers.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get, list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Rules for the /companies/{companyId}/employees collection.
     * @path /companies/{companyId}/employees
     * @allow (get, list) - Any user associated with the company can read the employees.
     * @allow (create) - Any user associated with the company can create new employees.
     * @allow (update, delete) - Any user associated with the company can update or delete employees.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get, list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Rules for the /companies/{companyId}/payrolls collection.
     * @path /companies/{companyId}/payrolls
     * @allow (get, list) - Any user associated with the company can read the payrolls.
     * @allow (create) - Any user associated with the company can create new payrolls.
     * @allow (update, delete) - Any user associated with the company can update or delete payrolls.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/payrolls/{payrollId} {
      allow get, list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

     /**
     * @description Rules for the /companies/{companyId}/purchases collection.
     * @path /companies/{companyId}/purchases
     * @allow (get, list) - Any user associated with the company can read the purchases.
     * @allow (create) - Any user associated with the company can create new purchases.
     * @allow (update, delete) - Any user associated with the company can update or delete purchases.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get, list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Rules for the /companies/{companyId}/sales collection.
     * @path /companies/{companyId}/sales
     * @allow (get, list) - Any user associated with the company can read the sales.
     * @allow (create) - Any user associated with the company can create new sales.
     * @allow (update, delete) - Any user associated with the company can update or delete sales.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Rules for the /companies/{companyId}/fees collection.
     * @path /companies/{companyId}/fees
     * @allow (get, list) - Any user associated with the company can read the fees.
     * @allow (create) - Any user associated with the company can create new fees.
     * @allow (update, delete) - Any user associated with the company can update or delete fees.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get, list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Rules for the /companies/{companyId}/economic-indicators/{indicatorId} collection.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     * @allow get, list: if isUserAssociatedWithCompany(companyId);
     * @allow create: if isAdmin();
     * @allow update: if isAdmin() && resource != null;
     * @allow delete: if isAdmin() && resource != null;
     * @principle Allows company users to read, only admins can write
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
        allow get, list: if isUserAssociatedWithCompany(companyId);
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Rules for the /users/{userId}/account-groups collection.
     * @path /users/{userId}/account-groups
     * @allow (get, list) - The user can list their account groups.
     * @allow (create) - The user can create new account groups.
     * @allow (update, delete) - The user can update or delete their account groups.
     * @principle Enforces user-level access control for account groups.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /economic-indicators collection.
     * @path /economic-indicators
     * @allow (get, list) - Anyone can read the economic indicators.
     * @allow (create) - Only admins can create new economic indicators.
     * @allow (update, delete) - Only admins can update or delete economic indicators.
     * @principle Allows public read access with restricted write access.
     */
    match /economic-indicators/{indicatorId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

      /**
     * @description Rules for the /health-entities collection.
     * @path /health-entities
     * @allow (get, list) - Anyone can read the health entities.
     * @allow (create) - Only admins can create new health entities.
     * @allow (update, delete) - Only admins can update or delete health entities.
     * @principle Allows public read access with restricted write access.
     */
    match /health-entities/{entityId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Rules for the /afp-entities collection.
     * @path /afp-entities
     * @allow (get, list) - Anyone can read the afp entities.
     * @allow (create) - Only admins can create new afp entities.
     * @allow (update, delete) - Only admins can update or delete afp entities.
     * @principle Allows public read access with restricted write access.
     */
    match /afp-entities/{entityId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /family-allowance-parameters collection.
     * @path /family-allowance-parameters
     * @allow (get, list) - Anyone can read the family allowance parameters.
     * @allow (create) - Only admins can create new family allowance parameters.
     * @allow (update, delete) - Only admins can update or delete family allowance parameters.
     * @principle Allows public read access with restricted write access.
     */
    match /family-allowance-parameters/{paramId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /tax-parameters collection.
     * @path /tax-parameters
     * @allow (get, list) - Anyone can read the tax parameters.
     * @allow (create) - Only admins can create new tax parameters.
     * @allow (update, delete) - Only admins can update or delete tax parameters.
     * @principle Allows public read access with restricted write access.
     */
    match /tax-parameters/{paramId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /taxable-caps collection.
     * @path /taxable-caps
     * @allow (get, list) - Anyone can read the taxable caps.
     * @allow (create) - Only admins can create new taxable caps.
     * @allow (update, delete) - Only admins can update or delete taxable caps.
     * @principle Allows public read access with restricted write access.
     */
    match /taxable-caps/{capId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}