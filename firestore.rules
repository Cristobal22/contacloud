/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model for user-specific data
 * and shared access via explicit membership for company-related data.
 * Unauthenticated access is forbidden.
 * @data-structure Data is organized hierarchically, with user-specific data nested under /users/{userId}
 * and company-specific data nested under /companies/{companyId}.
 * @key-security-decisions Listing of user documents is disallowed.
 * Company access is based on the user's presence in the company's `companyIds` array stored in the user's profile.
 * @denormalization-for-authorization The `companyIds` array is denormalized on the `UserProfile`
 * to avoid having to query a separate collection to determine company membership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     */
    function isAdmin() {
        return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');
    }

    /**
     * @description Checks if the user has access to the company based on their profile.
     */
    function hasCompanyAccess(companyId) {
        return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]) || isAdmin());
    }

    /**
     * @description Rule for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Allow the user to create their own profile if the UID matches.
     * @allow (get, update, delete) - Allow the user to get, update or delete their own profile.
     * @deny (create) - Deny creating a user profile with a mismatched UID.
     * @deny (get, update, delete) - Deny access to other user's profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /companies collection.
     * @path /companies
     * @allow (get, list) - Allow anyone to read company details.
     * @allow (create) - Allow only admins to create companies.
     * @allow (update, delete) - Allow only admins to update/delete companies.
     * @principle Public read access with admin-only writes.
     */
    match /companies/{companyId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();

      /**
       * @description Rule for the /companies/{companyId}/accounts subcollection.
       * @path /companies/{companyId}/accounts
       * @allow (get, list, create, update, delete) - Allow only users that have access to the company.
       * @deny (get, list, create, update, delete) - Deny access to users that do not have access to the company.
       * @principle Restricts access to company accounts to authorized users.
       */
      match /accounts/{accountId} {
        allow get: if hasCompanyAccess(companyId);
        allow list: if hasCompanyAccess(companyId);
        allow create: if hasCompanyAccess(companyId);
        allow update: if hasCompanyAccess(companyId);
        allow delete: if hasCompanyAccess(companyId);
      }

      /**
       * @description Rule for the /companies/{companyId}/vouchers subcollection.
       * @path /companies/{companyId}/vouchers
       * @allow (get, list, create, update, delete) - Allow only users that have access to the company.
       * @deny (get, list, create, update, delete) - Deny access to users that do not have access to the company.
       */
      match /vouchers/{voucherId} {
        allow get: if hasCompanyAccess(companyId);
        allow list: if hasCompanyAccess(companyId);
        allow create: if hasCompanyAccess(companyId);
        allow update: if hasCompanyAccess(companyId);
        allow delete: if hasCompanyAccess(companyId);
      }

      /**
       * @description Rule for the /companies/{companyId}/subjects subcollection.
       * @path /companies/{companyId}/subjects
       * @allow (get, list, create, update, delete) - Allow only users that have access to the company.
       * @deny (get, list, create, update, delete) - Deny access to users that do not have access to the company.
       */
      match /subjects/{subjectId} {
        allow get: if hasCompanyAccess(companyId);
        allow list: if hasCompanyAccess(companyId);
        allow create: if hasCompanyAccess(companyId);
        allow update: if hasCompanyAccess(companyId);
        allow delete: if hasCompanyAccess(companyId);
      }

      /**
       * @description Rule for the /companies/{companyId}/cost-centers subcollection.
       * @path /companies/{companyId}/cost-centers
       * @allow (get, list, create, update, delete) - Allow only users that have access to the company.
       * @deny (get, list, create, update, delete) - Deny access to users that do not have access to the company.
       */
      match /cost-centers/{costCenterId} {
        allow get: if hasCompanyAccess(companyId);
        allow list: if hasCompanyAccess(companyId);
        allow create: if hasCompanyAccess(companyId);
        allow update: if hasCompanyAccess(companyId);
        allow delete: if hasCompanyAccess(companyId);
      }

      /**
       * @description Rule for the /companies/{companyId}/employees subcollection.
       * @path /companies/{companyId}/employees
       * @allow (get, list, create, update, delete) - Allow only users that have access to the company.
       * @deny (get, list, create, update, delete) - Deny access to users that do not have access to the company.
       */
      match /employees/{employeeId} {
        allow get: if hasCompanyAccess(companyId);
        allow list: if hasCompanyAccess(companyId);
        allow create: if hasCompanyAccess(companyId);
        allow update: if hasCompanyAccess(companyId);
        allow delete: if hasCompanyAccess(companyId);
      }

      /**
       * @description Rule for the /companies/{companyId}/purchases subcollection.
       * @path /companies/{companyId}/purchases
       * @allow (get, list, create, update, delete) - Allow only users that have access to the company.
       * @deny (get, list, create, update, delete) - Deny access to users that do not have access to the company.
       */
      match /purchases/{purchaseId} {
        allow get: if hasCompanyAccess(companyId);
        allow list: if hasCompanyAccess(companyId);
        allow create: if hasCompanyAccess(companyId);
        allow update: if hasCompanyAccess(companyId);
        allow delete: if hasCompanyAccess(companyId);
      }

      /**
       * @description Rule for the /companies/{companyId}/sales subcollection.
       * @path /companies/{companyId}/sales
       * @allow (get, list, create, update, delete) - Allow only users that have access to the company.
       * @deny (get, list, create, update, delete) - Deny access to users that do not have access to the company.
       */
      match /sales/{saleId} {
        allow get: if hasCompanyAccess(companyId);
        allow list: if hasCompanyAccess(companyId);
        allow create: if hasCompanyAccess(companyId);
        allow update: if hasCompanyAccess(companyId);
        allow delete: if hasCompanyAccess(companyId);
      }

      /**
       * @description Rule for the /companies/{companyId}/fees subcollection.
       * @path /companies/{companyId}/fees
       * @allow (get, list, create, update, delete) - Allow only users that have access to the company.
       * @deny (get, list, create, update, delete) - Deny access to users that do not have access to the company.
       */
      match /fees/{feeId} {
        allow get: if hasCompanyAccess(companyId);
        allow list: if hasCompanyAccess(companyId);
        allow create: if hasCompanyAccess(companyId);
        allow update: if hasCompanyAccess(companyId);
        allow delete: if hasCompanyAccess(companyId);
      }
    }

    /**
     * @description Rule for the /users/{userId}/account-groups collection.
     * @path /users/{userId}/account-groups
     * @allow (get, list, create, update, delete) - Allow only the owner of the user ID.
     * @deny (get, list, create, update, delete) - Deny access to other users.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/institutions collection.
     * @path /users/{userId}/institutions
     * @allow (get, list, create, update, delete) - Allow only the owner of the user ID.
     * @deny (get, list, create, update, delete) - Deny access to other users.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/family-allowance-parameters collection.
     * @path /users/{userId}/family-allowance-parameters
     * @allow (get, list, create, update, delete) - Allow only the owner of the user ID.
     * @deny (get, list, create, update, delete) - Deny access to other users.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/tax-parameters collection.
     * @path /users/{userId}/tax-parameters
     * @allow (get, list, create, update, delete) - Allow only the owner of the user ID.
     * @deny (get, list, create, update, delete) - Deny access to other users.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/health-entities collection.
     * @path /users/{userId}/health-entities
     * @allow (get, list, create, update, delete) - Allow only the owner of the user ID.
     * @deny (get, list, create, update, delete) - Deny access to other users.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/afp-entities collection.
     * @path /users/{userId}/afp-entities
     * @allow (get, list, create, update, delete) - Allow only the owner of the user ID.
     * @deny (get, list, create, update, delete) - Deny access to other users.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}