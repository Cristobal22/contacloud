rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to determine if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description: Secures user profiles, allowing only the owner to read and write their own data.
     * @path: /users/{userId}
     * @allow: User 'user123' (authenticated) can create their profile at /users/user123.
     * @deny: User 'user456' cannot read/write the profile of user 'user123' at /users/user123.
     * @principle: Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the profile.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own profile if the UID matches.
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;

      // Allow the user to get their own profile.
      allow get: if isSignedIn() && isOwner(userId);

      // Allow the user to update their own profile.
      allow update: if isSignedIn() && isOwner(userId);

      // Allow the user to delete their own profile.
      allow delete: if isSignedIn() && isOwner(userId);

      // Do not allow listing of all users.
      allow list: if false;
    }

    /**
     * @description: Secures the companies collection, allowing create for authenticated users.
     *               Only users who are the designated owner can read, update, or delete.
     * @path: /companies
     * @allow: User 'user123' (authenticated) can create a company with ownerId 'user123'.
     * @deny: User 'user456' cannot create a company with ownerId 'user123'.
     * @principle: Enforces company ownership for writes and requires authentication for creation.
     */
    match /companies/{companyId} {
      // Helper function to check if the authenticated user is the owner of the company.
      function isCompanyOwner(companyId) {
        return isSignedIn() && resource.data.ownerId == request.auth.uid;
      }

      // Helper function to check if the company exists and the user is the owner.
      function isExistingCompanyOwner(companyId) {
        return isSignedIn() && get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }

      // Allow any authenticated user to create a new company, requiring that the 'ownerId' field in the document matches their UID.
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;

      // Allow reading if the user is the owner.
      allow get: if isExistingCompanyOwner(companyId);

      // Allow updating if the user is the owner and the company exists.
      allow update: if isExistingCompanyOwner(companyId);

      // Allow deletion if the user is the owner and the company exists.
      allow delete: if isExistingCompanyOwner(companyId);

      // Disallow listing all companies.  Listing should be done via subcollection queries on UserProfile.
      allow list: if false;


      /**
       * @description: Secures accounts sub-collection, allowing access only to company owners.
       * @path: /companies/{companyId}/accounts
       * @allow: Company owner 'user123' (authenticated) can create/read/write accounts for company 'company123'.
       * @deny: User 'user456' cannot access accounts for company 'company123' unless they are the owner.
       * @principle: Enforces company-level data isolation based on ownership.
       */
      match /accounts/{accountId} {
        // Allow creation if the user is the company owner, requiring the companyId to match.
        allow create: if isCompanyOwner(companyId);

        // Allow reading if the user is the company owner.
        allow get: if isCompanyOwner(companyId);

        // Allow updating if the user is the company owner and the companyId does not change.
        allow update: if isCompanyOwner(companyId);

        // Allow deletion if the user is the company owner and the document exists.
        allow delete: if isCompanyOwner(companyId) && exists(/databases/$(database)/documents/companies/$(companyId)/accounts/$(accountId));

        // Allow listing if the user is the company owner.
        allow list: if isCompanyOwner(companyId);
      }

      /**
       * @description: Secures vouchers sub-collection, allowing access only to company owners.
       * @path: /companies/{companyId}/vouchers
       * @allow: Company owner 'user123' (authenticated) can create/read/write vouchers for company 'company123'.
       * @deny: User 'user456' cannot access vouchers for company 'company123' unless they are the owner.
       * @principle: Enforces company-level data isolation based on ownership.
       */
      match /vouchers/{voucherId} {
        // Allow creation if the user is the company owner, requiring the companyId to match.
        allow create: if isCompanyOwner(companyId);

        // Allow reading if the user is the company owner.
        allow get: if isCompanyOwner(companyId);

        // Allow updating if the user is the company owner and the companyId does not change.
        allow update: if isCompanyOwner(companyId);

        // Allow deletion if the user is the company owner and the voucher exists.
        allow delete: if isCompanyOwner(companyId) && exists(/databases/$(database)/documents/companies/$(companyId)/vouchers/$(voucherId));

        // Allow listing if the user is the company owner.
        allow list: if isCompanyOwner(companyId);
      }

       /**
        * @description: Secures subjects sub-collection, allowing access only to company owners.
        * @path: /companies/{companyId}/subjects
        * @allow: Company owner 'user123' (authenticated) can create/read/write subjects for company 'company123'.
        * @deny: User 'user456' cannot access subjects for company 'company123' unless they are the owner.
        * @principle: Enforces company-level data isolation based on ownership.
        */
      match /subjects/{subjectId} {
        // Allow creation if the user is the company owner, requiring the companyId to match.
        allow create: if isCompanyOwner(companyId);

        // Allow reading if the user is the company owner.
        allow get: if isCompanyOwner(companyId);

        // Allow updating if the user is the company owner and the companyId does not change.
        allow update: if isCompanyOwner(companyId);

        // Allow deletion if the user is the company owner and the subject exists.
        allow delete: if isCompanyOwner(companyId) && exists(/databases/$(database)/documents/companies/$(companyId)/subjects/$(subjectId));

        // Allow listing if the user is the company owner.
        allow list: if isCompanyOwner(companyId);
      }

      /**
       * @description: Secures cost-centers sub-collection, allowing access only to company owners.
       * @path: /companies/{companyId}/cost-centers
       * @allow: Company owner 'user123' (authenticated) can create/read/write cost-centers for company 'company123'.
       * @deny: User 'user456' cannot access cost-centers for company 'company123' unless they are the owner.
       * @principle: Enforces company-level data isolation based on ownership.
       */
      match /cost-centers/{costCenterId} {
        // Allow creation if the user is the company owner, requiring the companyId to match.
        allow create: if isCompanyOwner(companyId);

        // Allow reading if the user is the company owner.
        allow get: if isCompanyOwner(companyId);

        // Allow updating if the user is the company owner and the companyId does not change.
        allow update: if isCompanyOwner(companyId);

        // Allow deletion if the user is the company owner and the cost center exists.
        allow delete: if isCompanyOwner(companyId) && exists(/databases/$(database)/documents/companies/$(companyId)/cost-centers/$(costCenterId));

        // Allow listing if the user is the company owner.
        allow list: if isCompanyOwner(companyId);
      }

      /**
       * @description: Secures employees sub-collection, allowing access only to company owners.
       * @path: /companies/{companyId}/employees
       * @allow: Company owner 'user123' (authenticated) can create/read/write employees for company 'company123'.
       * @deny: User 'user456' cannot access employees for company 'company123' unless they are the owner.
       * @principle: Enforces company-level data isolation based on ownership.
       */
      match /employees/{employeeId} {
        // Allow creation if the user is the company owner, requiring the companyId to match.
        allow create: if isCompanyOwner(companyId);

        // Allow reading if the user is the company owner.
        allow get: if isCompanyOwner(companyId);

        // Allow updating if the user is the company owner and the companyId does not change.
        allow update: if isCompanyOwner(companyId);

        // Allow deletion if the user is the company owner and the employee exists.
        allow delete: if isCompanyOwner(companyId) && exists(/databases/$(database)/documents/companies/$(companyId)/employees/$(employeeId));

        // Allow listing if the user is the company owner.
        allow list: if isCompanyOwner(companyId);
      }

      /**
       * @description: Secures purchases sub-collection, allowing access only to company owners.
       * @path: /companies/{companyId}/purchases
       * @allow: Company owner 'user123' (authenticated) can create/read/write purchases for company 'company123'.
       * @deny: User 'user456' cannot access purchases for company 'company123' unless they are the owner.
       * @principle: Enforces company-level data isolation based on ownership.
       */
      match /purchases/{purchaseId} {
        // Allow creation if the user is the company owner, requiring the companyId to match.
        allow create: if isCompanyOwner(companyId);

        // Allow reading if the user is the company owner.
        allow get: if isCompanyOwner(companyId);

        // Allow updating if the user is the company owner and the companyId does not change.
        allow update: if isCompanyOwner(companyId);

        // Allow deletion if the user is the company owner and the purchase exists.
        allow delete: if isCompanyOwner(companyId) && exists(/databases/$(database)/documents/companies/$(companyId)/purchases/$(purchaseId));

        // Allow listing if the user is the company owner.
        allow list: if isCompanyOwner(companyId);
      }

      /**
       * @description: Secures sales sub-collection, allowing access only to company owners.
       * @path: /companies/{companyId}/sales
       * @allow: Company owner 'user123' (authenticated) can create/read/write sales for company 'company123'.
       * @deny: User 'user456' cannot access sales for company 'company123' unless they are the owner.
       * @principle: Enforces company-level data isolation based on ownership.
       */
      match /sales/{saleId} {
        // Allow creation if the user is the company owner, requiring the companyId to match.
        allow create: if isCompanyOwner(companyId);

        // Allow reading if the user is the company owner.
        allow get: if isCompanyOwner(companyId);

        // Allow updating if the user is the company owner and the companyId does not change.
        allow update: if isCompanyOwner(companyId);

        // Allow deletion if the user is the company owner and the sale exists.
        allow delete: if isCompanyOwner(companyId) && exists(/databases/$(database)/documents/companies/$(companyId)/sales/$(saleId));

        // Allow listing if the user is the company owner.
        allow list: if isCompanyOwner(companyId);
      }

      /**
       * @description: Secures fees sub-collection, allowing access only to company owners.
       * @path: /companies/{companyId}/fees
       * @allow: Company owner 'user123' (authenticated) can create/read/write fees for company 'company123'.
       * @deny: User 'user456' cannot access fees for company 'company123' unless they are the owner.
       * @principle: Enforces company-level data isolation based on ownership.
       */
      match /fees/{feeId} {
        // Allow creation if the user is the company owner, requiring the companyId to match.
        allow create: if isCompanyOwner(companyId);

        // Allow reading if the user is the company owner.
        allow get: if isCompanyOwner(companyId);

        // Allow updating if the user is the company owner and the companyId does not change.
        allow update: if isCompanyOwner(companyId);

        // Allow deletion if the user is the company owner and the fee exists.
        allow delete: if isCompanyOwner(companyId) && exists(/databases/$(database)/documents/companies/$(companyId)/fees/$(feeId));

        // Allow listing if the user is the company owner.
        allow list: if isCompanyOwner(companyId);
      }
    }

    /**
     * @description: Secures account-groups sub-collection, allowing access only to the owning user.
     * @path: /users/{userId}/account-groups
     * @allow: User 'user123' (authenticated) can create/read/write account-groups under their own profile.
     * @deny: User 'user456' cannot access account-groups for user 'user123'.
     * @principle: Enforces user-level data isolation.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/account-groups/$(accountGroupId));
      allow list: if isOwner(userId);
    }

    /**
     * @description: Secures institutions sub-collection, allowing access only to the owning user.
     * @path: /users/{userId}/institutions
     * @allow: User 'user123' (authenticated) can create/read/write institutions under their own profile.
     * @deny: User 'user456' cannot access institutions for user 'user123'.
     * @principle: Enforces user-level data isolation.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/institutions/$(institutionId));
      allow list: if isOwner(userId);
    }

    /**
     * @description: Secures family-allowance-parameters sub-collection, allowing access only to the owning user.
     * @path: /users/{userId}/family-allowance-parameters
     * @allow: User 'user123' (authenticated) can create/read/write family-allowance-parameters under their own profile.
     * @deny: User 'user456' cannot access family-allowance-parameters for user 'user123'.
     * @principle: Enforces user-level data isolation.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/family-allowance-parameters/$(familyAllowanceParameterId));
      allow list: if isOwner(userId);
    }

    /**
     * @description: Secures tax-parameters sub-collection, allowing access only to the owning user.
     * @path: /users/{userId}/tax-parameters
     * @allow: User 'user123' (authenticated) can create/read/write tax-parameters under their own profile.
     * @deny: User 'user456' cannot access tax-parameters for user 'user123'.
     * @principle: Enforces user-level data isolation.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/tax-parameters/$(taxParameterId));
      allow list: if isOwner(userId);
    }

    /**
     * @description: Secures health-entities sub-collection, allowing access only to the owning user.
     * @path: /users/{userId}/health-entities
     * @allow: User 'user123' (authenticated) can create/read/write health-entities under their own profile.
     * @deny: User 'user456' cannot access health-entities for user 'user123'.
     * @principle: Enforces user-level data isolation.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/health-entities/$(healthEntityId));
      allow list: if isOwner(userId);
    }

    /**
     * @description: Secures afp-entities sub-collection, allowing access only to the owning user.
     * @path: /users/{userId}/afp-entities
     * @allow: User 'user123' (authenticated) can create/read/write afp-entities under their own profile.
     * @deny: User 'user456' cannot access afp-entities for user 'user123'.
     * @principle: Enforces user-level data isolation.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/afp-entities/$(afpEntityId));
      allow list: if isOwner(userId);
    }
  }
}