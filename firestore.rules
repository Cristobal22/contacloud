/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model for user profiles
 *  and a company-based access control model for company data. Global data collections
 *  (account groups, institutions, parameters, entities) are publicly readable but not writable by clients.
 * @data-structure
 *  - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 *  - /companies: Stores company data. Access to company subcollections is restricted to
 *    authenticated users. Data within a company is implicitly accessible.
 *  - /companies/{companyId}/accounts: Accounts for a given company.
 *  - /companies/{companyId}/vouchers: Vouchers for a given company.
 *  - /companies/{companyId}/subjects: Subjects for a given company.
 *  - /companies/{companyId}/cost-centers: Cost centers for a given company.
 *  - /companies/{companyId}/employees: Employees for a given company.
 *  - /companies/{companyId}/purchases: Purchases for a given company.
 *  - /companies/{companyId}/sales: Sales for a given company.
 *  - /companies/{companyId}/fees: Fees for a given company.
 *  - /account-groups: Stores global account groups, publicly readable.
 *  - /institutions: Stores global institution data, publicly readable.
 *  - /family-allowance-parameters: Stores global family allowance parameters, publicly readable.
 *  - /tax-parameters: Stores global tax parameters, publicly readable.
 *  - /health-entities: Stores global health entities, publicly readable.
 *  - /afp-entities: Stores global AFP entities, publicly readable.
 * @key-security-decisions
 *  - User listing is explicitly denied to prevent information disclosure.
 *  - Company-level security is implicitly granted to authenticated users. More granular
 *    access control within a company would require a role-based access control (RBAC)
 *    system, which is out of scope for this initial ruleset.
 *  - Global data collections are read-only for clients, updates must be performed
 *    through the Firebase Admin SDK.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the user can access their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile with matching document ID.
     * @allow (get, update, delete) User with UID 'user_abc' can access and modify their profile.
     * @deny Any other user cannot access or modify another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages company data, allowing authenticated users.
     * @path /companies
     * @allow (create) Authenticated user can create a company.
     * @allow (get, list) Authenticated user can read company data.
     * @deny Unauthenticated users cannot create or access company data.
     * @principle Grants access to company data for authenticated users.
     */
    match /companies/{companyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();

      /**
       * @description Manages account data for a specific company.
       * @path /companies/{companyId}/accounts
       * @allow (create, get, list, update, delete) Authenticated user can manage accounts for their company.
       * @deny Unauthenticated users cannot access or modify company account data.
       * @principle Grants access to company account data for authenticated users.
       */
      match /companies/{companyId}/accounts/{accountId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

      /**
       * @description Manages voucher data for a specific company.
       * @path /companies/{companyId}/vouchers
       * @allow (create, get, list, update, delete) Authenticated user can manage vouchers for their company.
       * @deny Unauthenticated users cannot access or modify company voucher data.
       * @principle Grants access to company voucher data for authenticated users.
       */
      match /companies/{companyId}/vouchers/{voucherId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

      /**
       * @description Manages subject data for a specific company.
       * @path /companies/{companyId}/subjects
       * @allow (create, get, list, update, delete) Authenticated user can manage subjects for their company.
       * @deny Unauthenticated users cannot access or modify company subject data.
       * @principle Grants access to company subject data for authenticated users.
       */
      match /companies/{companyId}/subjects/{subjectId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

      /**
       * @description Manages cost center data for a specific company.
       * @path /companies/{companyId}/cost-centers
       * @allow (create, get, list, update, delete) Authenticated user can manage cost centers for their company.
       * @deny Unauthenticated users cannot access or modify company cost center data.
       * @principle Grants access to company cost center data for authenticated users.
       */
      match /companies/{companyId}/cost-centers/{costCenterId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

      /**
       * @description Manages employee data for a specific company.
       * @path /companies/{companyId}/employees
       * @allow (create, get, list, update, delete) Authenticated user can manage employees for their company.
       * @deny Unauthenticated users cannot access or modify company employee data.
       * @principle Grants access to company employee data for authenticated users.
       */
      match /companies/{companyId}/employees/{employeeId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

        /**
       * @description Manages purchase data for a specific company.
       * @path /companies/{companyId}/purchases
       * @allow (create, get, list, update, delete) Authenticated user can manage purchases for their company.
       * @deny Unauthenticated users cannot access or modify company purchase data.
       * @principle Grants access to company purchase data for authenticated users.
       */
      match /companies/{companyId}/purchases/{purchaseId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

      /**
       * @description Manages sale data for a specific company.
       * @path /companies/{companyId}/sales
       * @allow (create, get, list, update, delete) Authenticated user can manage sales for their company.
       * @deny Unauthenticated users cannot access or modify company sale data.
       * @principle Grants access to company sale data for authenticated users.
       */
      match /companies/{companyId}/sales/{saleId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

       /**
       * @description Manages fee data for a specific company.
       * @path /companies/{companyId}/fees
       * @allow (create, get, list, update, delete) Authenticated user can manage fees for their company.
       * @deny Unauthenticated users cannot access or modify company fee data.
       * @principle Grants access to company fee data for authenticated users.
       */
      match /companies/{companyId}/fees/{feeId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }
    }

    /**
     * @description Manages global account group data, allowing public read access.
     * @path /account-groups
     * @allow (get, list) Public read access to account group data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Provides public read access to global account group data.
     */
    match /account-groups/{accountGroupId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages global institution data, allowing public read access.
     * @path /institutions
     * @allow (get, list) Public read access to institution data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Provides public read access to global institution data.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages global family allowance parameter data, allowing public read access.
     * @path /family-allowance-parameters
     * @allow (get, list) Public read access to family allowance parameter data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Provides public read access to global family allowance parameter data.
     */
    match /family-allowance-parameters/{familyAllowanceParameterId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages global tax parameter data, allowing public read access.
     * @path /tax-parameters
     * @allow (get, list) Public read access to tax parameter data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Provides public read access to global tax parameter data.
     */
    match /tax-parameters/{taxParameterId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

      /**
     * @description Manages global health entities data, allowing public read access.
     * @path /health-entities
     * @allow (get, list) Public read access to health entities data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Provides public read access to global health entities data.
     */
    match /health-entities/{healthEntityId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages global AFP entities data, allowing public read access.
     * @path /afp-entities
     * @allow (get, list) Public read access to AFP entities data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Provides public read access to global AFP entities data.
     */
    match /afp-entities/{afpEntityId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}