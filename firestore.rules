/**
 * @fileoverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and a company-based access control model for all company-related data.
 * Global data (account groups, institutions, parameters, entities) is publicly readable but not writable by clients.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /companies: Stores company data. Access to company subcollections is implicitly granted to all authenticated users in this prototype.
 * - /companies/{companyId}/accounts: Stores accounts for a company.
 * - /companies/{companyId}/vouchers: Stores vouchers for a company.
 * - /companies/{companyId}/subjects: Stores subjects for a company.
 * - /companies/{companyId}/cost-centers: Stores cost centers for a company.
 * - /companies/{companyId}/employees: Stores employees for a company.
 * - /companies/{companyId}/purchases: Stores purchase documents for a company.
 * - /companies/{companyId}/sales: Stores sales documents for a company.
 * - /companies/{companyId}/fees: Stores fee documents for a company.
 * - /account-groups: Stores global account groups (read-only for clients).
 * - /institutions: Stores global institutions (read-only for clients).
 * - /family-allowance-parameters: Stores global family allowance parameters (read-only for clients).
 * - /tax-parameters: Stores global tax parameters (read-only for clients).
 * - /health-entities: Stores global health entities (read-only for clients).
 * - /afp-entities: Stores global AFP entities (read-only for clients).
 *
 * Key Security Decisions:
 * - User profiles are strictly private; only the authenticated user can read or write their own profile.
 * - Company-related data access is implicitly granted for rapid prototyping and iteration.  In a production system, this should be refined.
 * - Global data collections (account-groups, institutions, etc.) are publicly readable but client-writeable in this prototype phase.
 * - Data shape is not strictly enforced during this prototyping phase, except for validating the user ID on user profile creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data. Only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (create) User 'user123' with matching UID creates their profile.
     * @allow (get, update, delete) User 'user123' reads/updates/deletes their own profile.
     * @deny (get, update, delete) User 'user456' attempts to read/update/delete user 'user123' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages company data.
     * @path /companies
     * @allow (get, list) Any authenticated user can read company data.
     * @allow (create, update, delete) Any authenticated user can create/update/delete company data (for prototyping).
     * @principle Allows all authenticated users to create, read, update, and delete companies for rapid prototyping.
     */
    match /companies/{companyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Placeholder function for more complex role-based logic in the future.
      function hasCompanyAccess(companyId) {
          return isSignedIn(); // For prototyping, all signed-in users have access.
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages accounts for a specific company.
     * @path /companies/{companyId}/accounts
     * @allow (get, list) Any authenticated user can read accounts data for a company.
     * @allow (create, update, delete) Any authenticated user can create/update/delete accounts data for a company (for prototyping).
     * @principle Allows all authenticated users to create, read, update, and delete company accounts for rapid prototyping.
     */
    match /companies/{companyId}/accounts/{accountId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages vouchers for a specific company.
     * @path /companies/{companyId}/vouchers
     * @allow (get, list) Any authenticated user can read vouchers data for a company.
     * @allow (create, update, delete) Any authenticated user can create/update/delete vouchers data for a company (for prototyping).
     * @principle Allows all authenticated users to create, read, update, and delete company vouchers for rapid prototyping.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages subjects (clients, providers) for a specific company.
     * @path /companies/{companyId}/subjects
     * @allow (get, list) Any authenticated user can read subjects data for a company.
     * @allow (create, update, delete) Any authenticated user can create/update/delete subjects data for a company (for prototyping).
     * @principle Allows all authenticated users to create, read, update, and delete company subjects for rapid prototyping.
     */
    match /companies/{companyId}/subjects/{subjectId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages cost centers for a specific company.
     * @path /companies/{companyId}/cost-centers
     * @allow (get, list) Any authenticated user can read cost centers data for a company.
     * @allow (create, update, delete) Any authenticated user can create/update/delete cost centers data for a company (for prototyping).
     * @principle Allows all authenticated users to create, read, update, and delete company cost centers for rapid prototyping.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages employees for a specific company.
     * @path /companies/{companyId}/employees
     * @allow (get, list) Any authenticated user can read employees data for a company.
     * @allow (create, update, delete) Any authenticated user can create/update/delete employees data for a company (for prototyping).
     * @principle Allows all authenticated users to create, read, update, and delete company employees for rapid prototyping.
     */
    match /companies/{companyId}/employees/{employeeId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn();
    }

     /**
     * @description Manages purchase documents for a specific company.
     * @path /companies/{companyId}/purchases
     * @allow (get, list) Any authenticated user can read purchase documents data for a company.
     * @allow (create, update, delete) Any authenticated user can create/update/delete purchase documents data for a company (for prototyping).
     * @principle Allows all authenticated users to create, read, update, and delete company purchase documents for rapid prototyping.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages sales documents for a specific company.
     * @path /companies/{companyId}/sales
     * @allow (get, list) Any authenticated user can read sales documents data for a company.
     * @allow (create, update, delete) Any authenticated user can create/update/delete sales documents data for a company (for prototyping).
     * @principle Allows all authenticated users to create, read, update, and delete company sales documents for rapid prototyping.
     */
    match /companies/{companyId}/sales/{saleId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages fee documents for a specific company.
     * @path /companies/{companyId}/fees
     * @allow (get, list) Any authenticated user can read fee documents data for a company.
     * @allow (create, update, delete) Any authenticated user can create/update/delete fee documents data for a company (for prototyping).
     * @principle Allows all authenticated users to create, read, update, and delete company fee documents for rapid prototyping.
     */
    match /companies/{companyId}/fees/{feeId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn();
    }


    /**
     * @description Manages global account groups.  Publicly readable, not writeable by clients in production.
     * @path /account-groups
     * @allow (get, list) Any user can read account groups.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Global read-only data.
     */
    match /account-groups/{accountGroupId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages global institutions (AFP, Health). Publicly readable, not writeable by clients in production.
     * @path /institutions
     * @allow (get, list) Any user can read institutions.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Global read-only data.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages global family allowance parameters. Publicly readable, not writeable by clients in production.
     * @path /family-allowance-parameters
     * @allow (get, list) Any user can read family allowance parameters.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Global read-only data.
     */
    match /family-allowance-parameters/{familyAllowanceParameterId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages global tax parameters. Publicly readable, not writeable by clients in production.
     * @path /tax-parameters
     * @allow (get, list) Any user can read tax parameters.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Global read-only data.
     */
    match /tax-parameters/{taxParameterId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Manages global health entities. Publicly readable, not writeable by clients in production.
     * @path /health-entities
     * @allow (get, list) Any user can read health entities.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Global read-only data.
     */
    match /health-entities/{healthEntityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages global AFP entities. Publicly readable, not writeable by clients in production.
     * @path /afp-entities
     * @allow (get, list) Any user can read AFP entities.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Global read-only data.
     */
    match /afp-entities/{afpEntityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}