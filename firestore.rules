rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user has a specific role ('Admin', 'Accountant') and is associated with the company.
     * @param {string} companyId The ID of the company to check against the user's `companyIds` array.
     * @returns {boolean} True if the user has the required role and is associated with the company, false otherwise.
     */
    function hasCompanyAccess(companyId) {
      return isSignedIn() && (request.auth.token.role == 'Admin' || request.auth.token.role == 'Accountant') && companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their profile.
     * @allow (get, update, delete) User 'user_abc' can access and modify their own profile.
     * @deny (create) User 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get, update, delete) User 'user_xyz' cannot access or modify user 'user_abc' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for companies.
     * @path /companies/{companyId}
     * @allow (create) User with 'Admin' role can create a company.
     * @allow (get) Any authenticated user can get a company.
     * @deny (list) Listing companies is disallowed.
     * @deny (update, delete) Only an Admin associated with the company can update or delete.
     * @principle Restricts listing and enforces admin-only writes for companies.
     */
    match /companies/{companyId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing companies is disallowed for security reasons
      allow create: if isSignedIn() && request.auth.token.role == 'Admin';
      allow update: if hasCompanyAccess(companyId) && request.auth.token.role == 'Admin';
      allow delete: if hasCompanyAccess(companyId) && request.auth.token.role == 'Admin';
    }

    /**
     * @description Rules for accounts within a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) User with 'Admin' or 'Accountant' role associated with the company can access.
     * @allow (create, update, delete) User with 'Admin' or 'Accountant' role associated with the company can manage.
     * @deny (create, update, delete) User not associated with the company cannot manage accounts.
     * @principle Enforces role-based access control for company-specific accounts.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get: if hasCompanyAccess(companyId);
      allow list: if hasCompanyAccess(companyId);
      allow create: if hasCompanyAccess(companyId);
      allow update: if hasCompanyAccess(companyId);
      allow delete: if hasCompanyAccess(companyId);
    }

    /**
     * @description Rules for vouchers within a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) User with 'Admin' or 'Accountant' role associated with the company can access.
     * @allow (create, update, delete) User with 'Admin' or 'Accountant' role associated with the company can manage.
     * @deny (create, update, delete) User not associated with the company cannot manage vouchers.
     * @principle Enforces role-based access control for company-specific vouchers.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get: if hasCompanyAccess(companyId);
      allow list: if hasCompanyAccess(companyId);
      allow create: if hasCompanyAccess(companyId);
      allow update: if hasCompanyAccess(companyId);
      allow delete: if hasCompanyAccess(companyId);
    }

    /**
     * @description Rules for subjects within a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) User with 'Admin' or 'Accountant' role associated with the company can access.
     * @allow (create, update, delete) User with 'Admin' or 'Accountant' role associated with the company can manage.
     * @deny (create, update, delete) User not associated with the company cannot manage subjects.
     * @principle Enforces role-based access control for company-specific subjects.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get: if hasCompanyAccess(companyId);
      allow list: if hasCompanyAccess(companyId);
      allow create: if hasCompanyAccess(companyId);
      allow update: if hasCompanyAccess(companyId);
      allow delete: if hasCompanyAccess(companyId);
    }

    /**
     * @description Rules for cost centers within a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) User with 'Admin' or 'Accountant' role associated with the company can access.
     * @allow (create, update, delete) User with 'Admin' or 'Accountant' role associated with the company can manage.
     * @deny (create, update, delete) User not associated with the company cannot manage cost centers.
     * @principle Enforces role-based access control for company-specific cost centers.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get: if hasCompanyAccess(companyId);
      allow list: if hasCompanyAccess(companyId);
      allow create: if hasCompanyAccess(companyId);
      allow update: if hasCompanyAccess(companyId);
      allow delete: if hasCompanyAccess(companyId);
    }

    /**
     * @description Rules for employees within a company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) User with 'Admin' or 'Accountant' role associated with the company can access.
     * @allow (create, update, delete) User with 'Admin' or 'Accountant' role associated with the company can manage.
     * @deny (create, update, delete) User not associated with the company cannot manage employees.
     * @principle Enforces role-based access control for company-specific employees.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get: if hasCompanyAccess(companyId);
      allow list: if hasCompanyAccess(companyId);
      allow create: if hasCompanyAccess(companyId);
      allow update: if hasCompanyAccess(companyId);
      allow delete: if hasCompanyAccess(companyId);
    }

     /**
     * @description Rules for purchases within a company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) User with 'Admin' or 'Accountant' role associated with the company can access.
     * @allow (create, update, delete) User with 'Admin' or 'Accountant' role associated with the company can manage.
     * @deny (create, update, delete) User not associated with the company cannot manage purchases.
     * @principle Enforces role-based access control for company-specific purchases.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get: if hasCompanyAccess(companyId);
      allow list: if hasCompanyAccess(companyId);
      allow create: if hasCompanyAccess(companyId);
      allow update: if hasCompanyAccess(companyId);
      allow delete: if hasCompanyAccess(companyId);
    }

    /**
     * @description Rules for sales within a company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) User with 'Admin' or 'Accountant' role associated with the company can access.
     * @allow (create, update, delete) User with 'Admin' or 'Accountant' role associated with the company can manage.
     * @deny (create, update, delete) User not associated with the company cannot manage sales.
     * @principle Enforces role-based access control for company-specific sales.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get: if hasCompanyAccess(companyId);
      allow list: if hasCompanyAccess(companyId);
      allow create: if hasCompanyAccess(companyId);
      allow update: if hasCompanyAccess(companyId);
      allow delete: if hasCompanyAccess(companyId);
    }

    /**
     * @description Rules for fees within a company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) User with 'Admin' or 'Accountant' role associated with the company can access.
     * @allow (create, update, delete) User with 'Admin' or 'Accountant' role associated with the company can manage.
     * @deny (create, update, delete) User not associated with the company cannot manage fees.
     * @principle Enforces role-based access control for company-specific fees.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get: if hasCompanyAccess(companyId);
      allow list: if hasCompanyAccess(companyId);
      allow create: if hasCompanyAccess(companyId);
      allow update: if hasCompanyAccess(companyId);
      allow delete: if hasCompanyAccess(companyId);
    }

    /**
     * @description Rules for user-specific account groups.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (get, list) User 'user_abc' can access their own account groups.
     * @allow (create, update, delete) User 'user_abc' can manage their own account groups.
     * @deny (get, list, create, update, delete) User 'user_xyz' cannot access or manage user 'user_abc' account groups.
     * @principle Enforces document ownership for user-specific account groups.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for user-specific institutions.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (get, list) User 'user_abc' can access their own institutions.
     * @allow (create, update, delete) User 'user_abc' can manage their own institutions.
     * @deny (get, list, create, update, delete) User 'user_xyz' cannot access or manage user 'user_abc' institutions.
     * @principle Enforces document ownership for user-specific institutions.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for user-specific family allowance parameters.
     * @path /users/{userId}/family-allowance-parameters/{parameterId}
     * @allow (get, list) User 'user_abc' can access their own family allowance parameters.
     * @allow (create, update, delete) User 'user_abc' can manage their own family allowance parameters.
     * @deny (get, list, create, update, delete) User 'user_xyz' cannot access or manage user 'user_abc' family allowance parameters.
     * @principle Enforces document ownership for user-specific family allowance parameters.
     */
    match /users/{userId}/family-allowance-parameters/{parameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for user-specific tax parameters.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     * @allow (get, list) User 'user_abc' can access their own tax parameters.
     * @allow (create, update, delete) User 'user_abc' can manage their own tax parameters.
     * @deny (get, list, create, update, delete) User 'user_xyz' cannot access or manage user 'user_abc' tax parameters.
     * @principle Enforces document ownership for user-specific tax parameters.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for user-specific health entities.
     * @path /users/{userId}/health-entities/{healthEntityId}
     * @allow (get, list) User 'user_abc' can access their own health entities.
     * @allow (create, update, delete) User 'user_abc' can manage their own health entities.
     * @deny (get, list, create, update, delete) User 'user_xyz' cannot access or manage user 'user_abc' health entities.
     * @principle Enforces document ownership for user-specific health entities.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for user-specific AFP entities.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     * @allow (get, list) User 'user_abc' can access their own AFP entities.
     * @allow (create, update, delete) User 'user_abc' can manage their own AFP entities.
     * @deny (get, list, create, update, delete) User 'user_xyz' cannot access or manage user 'user_abc' AFP entities.
     * @principle Enforces document ownership for user-specific AFP entities.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}