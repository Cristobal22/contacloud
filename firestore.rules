/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a multi-tenant security model where users are associated with one or more companies.
 *  - User profiles are private and only accessible to the authenticated user.
 *  - Companies are the central organizational unit, and access to company data (accounts, vouchers, etc.) is determined by the user's role within that company.
 *  - There are global Accountant and Admin roles that bypass normal company-level restrictions.
 *  - Users can only create their own profile.
 * @data-structure
 *  - /users/{userId}: Stores user profile data.
 *  - /companies/{companyId}: Stores company information.
 *  - /companies/{companyId}/{data}: Stores company related data (accounts, vouchers, etc).
 *  - /users/{userId}/{data}: Stores user-specific configuration data (account groups, institutions, etc.).
 * @key-security-decisions
 *  - Users cannot list all users.
 *  - Role-based access control is used to manage permissions, using Admin and Accountant roles.
 * @denormalization-for-authorization
 *  - Company documents do not contain a list of authorized users. Instead, the `UserProfile` contains an array of `companyIds` that the user is associated with.  This allows a user to be associated with multiple companies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
     * @description Checks if the authenticated user has Admin role.
     */
    function isAdmin() {
      return isSignedIn() && (request.auth.token.role == 'Admin');
    }

    /**
     * @description Checks if the authenticated user has Accountant role.
     */
    function isAccountant() {
      return isSignedIn() && (request.auth.token.role == 'Accountant');
    }
    /**
     * @description Checks if the user is associated with the specified company.
     */
    function isUserInCompany(companyId) {
        return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]) || isAdmin() || isAccountant());
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) An authenticated user can create their own profile.
     * @allow (get) An authenticated user can read their own profile.
     * @allow (update) An authenticated user can update their own profile.
     * @deny (create) A user cannot create a profile for another user.
     * @deny (get) A user cannot read another user's profile.
     * @deny (update) A user cannot update another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description Rules for the companies collection.
     * @path /companies
     * @allow (create) An authenticated user with the Admin role can create a company.
     * @allow (get) Any authenticated user can read any company.
     * @allow (list) Any authenticated user can list companies.
     * @allow (update) Only an admin can update.
     * @deny (create) A non-admin user cannot create a company.
     * @deny (update) A non-admin user cannot update a company.
     * @deny (delete) Only an admin can delete.
     * @principle Restricts company creation to admins, allows read access to all authenticated users.
     */
    match /companies/{companyId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for accounts sub-collection.
     * @path /companies/{companyId}/accounts
     * @allow (create) Only users associated with the company can create accounts.
     * @allow (get) Only users associated with the company can read accounts.
     * @allow (list) Only users associated with the company can list accounts.
     * @allow (update) Only users associated with the company can update accounts.
     * @deny (create) Users not associated with the company cannot create accounts.
     * @deny (update) Users not associated with the company cannot update accounts.
     * @deny (delete) Users not associated with the company cannot delete accounts.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get, list: if isUserInCompany(companyId);
      allow create: if isUserInCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isUserInCompany(companyId) && resource != null && request.resource.data.companyId == companyId;
      allow delete: if false;
    }

    /**
     * @description Rules for vouchers sub-collection.
     * @path /companies/{companyId}/vouchers
     * @allow (create) Only users associated with the company can create vouchers.
     * @allow (get) Only users associated with the company can read vouchers.
     * @allow (list) Only users associated with the company can list vouchers.
     * @allow (update) Only users associated with the company can update vouchers.
     * @deny (create) Users not associated with the company cannot create vouchers.
     * @deny (update) Users not associated with the company cannot update vouchers.
     * @deny (delete) Users not associated with the company cannot delete vouchers.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get, list: if isUserInCompany(companyId);
      allow create: if isUserInCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isUserInCompany(companyId) && resource != null && request.resource.data.companyId == companyId;
      allow delete: if false;
    }

    /**
     * @description Rules for subjects sub-collection.
     * @path /companies/{companyId}/subjects
     * @allow (create) Only users associated with the company can create subjects.
     * @allow (get) Only users associated with the company can read subjects.
     * @allow (list) Only users associated with the company can list subjects.
     * @allow (update) Only users associated with the company can update subjects.
     * @deny (create) Users not associated with the company cannot create subjects.
     * @deny (update) Users not associated with the company cannot update subjects.
     * @deny (delete) Users not associated with the company cannot delete subjects.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get, list: if isUserInCompany(companyId);
      allow create: if isUserInCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isUserInCompany(companyId) && resource != null && request.resource.data.companyId == companyId;
      allow delete: if false;
    }

    /**
     * @description Rules for cost centers sub-collection.
     * @path /companies/{companyId}/cost-centers
     * @allow (create) Only users associated with the company can create cost centers.
     * @allow (get) Only users associated with the company can read cost centers.
     * @allow (list) Only users associated with the company can list cost centers.
     * @allow (update) Only users associated with the company can update cost centers.
     * @deny (create) Users not associated with the company cannot create cost centers.
     * @deny (update) Users not associated with the company cannot update cost centers.
     * @deny (delete) Users not associated with the company cannot delete cost centers.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get, list: if isUserInCompany(companyId);
      allow create: if isUserInCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isUserInCompany(companyId) && resource != null && request.resource.data.companyId == companyId;
      allow delete: if false;
    }

    /**
     * @description Rules for employees sub-collection.
     * @path /companies/{companyId}/employees
     * @allow (create) Only users associated with the company can create employees.
     * @allow (get) Only users associated with the company can read employees.
     * @allow (list) Only users associated with the company can list employees.
     * @allow (update) Only users associated with the company can update employees.
     * @deny (create) Users not associated with the company cannot create employees.
     * @deny (update) Users not associated with the company cannot update employees.
     * @deny (delete) Users not associated with the company cannot delete employees.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get, list: if isUserInCompany(companyId);
      allow create: if isUserInCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isUserInCompany(companyId) && resource != null && request.resource.data.companyId == companyId;
      allow delete: if false;
    }

     /**
     * @description Rules for purchases sub-collection.
     * @path /companies/{companyId}/purchases
     * @allow (create) Only users associated with the company can create purchases.
     * @allow (get) Only users associated with the company can read purchases.
     * @allow (list) Only users associated with the company can list purchases.
     * @allow (update) Only users associated with the company can update purchases.
     * @deny (create) Users not associated with the company cannot create purchases.
     * @deny (update) Users not associated with the company cannot update purchases.
     * @deny (delete) Users not associated with the company cannot delete purchases.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get, list: if isUserInCompany(companyId);
      allow create: if isUserInCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isUserInCompany(companyId) && resource != null && request.resource.data.companyId == companyId;
      allow delete: if false;
    }

    /**
     * @description Rules for sales sub-collection.
     * @path /companies/{companyId}/sales
     * @allow (create) Only users associated with the company can create sales.
     * @allow (get) Only users associated with the company can read sales.
     * @allow (list) Only users associated with the company can list sales.
     * @allow (update) Only users associated with the company can update sales.
     * @deny (create) Users not associated with the company cannot create sales.
     * @deny (update) Users not associated with the company cannot update sales.
     * @deny (delete) Users not associated with the company cannot delete sales.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if isUserInCompany(companyId);
      allow create: if isUserInCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isUserInCompany(companyId) && resource != null && request.resource.data.companyId == companyId;
      allow delete: if false;
    }

    /**
     * @description Rules for fees sub-collection.
     * @path /companies/{companyId}/fees
     * @allow (create) Only users associated with the company can create fees.
     * @allow (get) Only users associated with the company can read fees.
     * @allow (list) Only users associated with the company can list fees.
     * @allow (update) Only users associated with the company can update fees.
     * @deny (create) Users not associated with the company cannot create fees.
     * @deny (update) Users not associated with the company cannot update fees.
     * @deny (delete) Users not associated with the company cannot delete fees.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get, list: if isUserInCompany(companyId);
      allow create: if isUserInCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isUserInCompany(companyId) && resource != null && request.resource.data.companyId == companyId;
      allow delete: if false;
    }

    /**
     * @description Rules for account groups sub-collection.
     * @path /users/{userId}/account-groups
     * @allow (create) An authenticated user can create their own account groups.
     * @allow (get) An authenticated user can read their own account groups.
     * @allow (list) An authenticated user can list their own account groups.
     * @allow (update) An authenticated user can update their own account groups.
     * @deny (create) A user cannot create account groups for another user.
     * @deny (get) A user cannot read another user's account groups.
     * @deny (update) A user cannot update another user's account groups.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for institutions sub-collection.
     * @path /users/{userId}/institutions
     * @allow (create) An authenticated user can create their own institutions.
     * @allow (get) An authenticated user can read their own institutions.
     * @allow (list) An authenticated user can list their own institutions.
     * @allow (update) An authenticated user can update their own institutions.
     * @deny (create) A user cannot create institutions for another user.
     * @deny (get) A user cannot read another user's institutions.
     * @deny (update) A user cannot update another user's institutions.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for family allowance parameters sub-collection.
     * @path /users/{userId}/family-allowance-parameters
     * @allow (create) An authenticated user can create their own family allowance parameters.
     * @allow (get) An authenticated user can read their own family allowance parameters.
     * @allow (list) An authenticated user can list their own family allowance parameters.
     * @allow (update) An authenticated user can update their own family allowance parameters.
     * @deny (create) A user cannot create family allowance parameters for another user.
     * @deny (get) A user cannot read another user's family allowance parameters.
     * @deny (update) A user cannot update another user's family allowance parameters.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for tax parameters sub-collection.
     * @path /users/{userId}/tax-parameters
     * @allow (create) An authenticated user can create their own tax parameters.
     * @allow (get) An authenticated user can read their own tax parameters.
     * @allow (list) An authenticated user can list their own tax parameters.
     * @allow (update) An authenticated user can update their own tax parameters.
     * @deny (create) A user cannot create tax parameters for another user.
     * @deny (get) A user cannot read another user's tax parameters.
     * @deny (update) A user cannot update another user's tax parameters.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

     /**
     * @description Rules for health entities sub-collection.
     * @path /users/{userId}/health-entities
     * @allow (create) An authenticated user can create their own health entities.
     * @allow (get) An authenticated user can read their own health entities.
     * @allow (list) An authenticated user can list their own health entities.
     * @allow (update) An authenticated user can update their own health entities.
     * @deny (create) A user cannot create health entities for another user.
     * @deny (get) A user cannot read another user's health entities.
     * @deny (update) A user cannot update another user's health entities.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for AFP entities sub-collection.
     * @path /users/{userId}/afp-entities
     * @allow (create) An authenticated user can create their own AFP entities.
     * @allow (get) An authenticated user can read their own AFP entities.
     * @allow (list) An authenticated user can list their own AFP entities.
     * @allow (update) An authenticated user can update their own AFP entities.
     * @deny (create) A user cannot create AFP entities for another user.
     * @deny (get) A user cannot read another user's AFP entities.
     * @deny (update) A user cannot update another user's AFP entities.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }
  }
}