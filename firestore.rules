/**
 * @fileoverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a mixed security model. User profiles are strictly owned and controlled
 * by the respective user. Company data, while centrally stored, is also owned, with access granted
 * to authorized users based on company associations. User-created configuration data (Account Groups,
 * Institutions, Parameters) is private to the user.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /companies: Stores company data.
 * - /companies/{companyId}/accounts: Stores accounts for a specific company.
 * - /companies/{companyId}/vouchers: Stores vouchers for a specific company.
 * - /companies/{companyId}/subjects: Stores subjects for a specific company.
 * - /companies/{companyId}/cost-centers: Stores cost centers for a specific company.
 * - /companies/{companyId}/employees: Stores employees for a specific company.
 * - /companies/{companyId}/purchases: Stores purchase documents for a specific company.
 * - /companies/{companyId}/sales: Stores sales documents for a specific company.
 * - /companies/{companyId}/fees: Stores fee documents for a specific company.
 * - /users/{userId}/account-groups: Stores user-specific account groups.
 * - /users/{userId}/institutions: Stores user-specific institutions.
 * - /users/{userId}/family-allowance-parameters: Stores user-specific family allowance parameters.
 * - /users/{userId}/tax-parameters: Stores user-specific tax parameters.
 * - /users/{userId}/health-entities: Stores user-specific health entities.
 * - /users/{userId}/afp-entities: Stores user-specific AFP entities.
 *
 * Key Security Decisions:
 * - User profiles are private and accessible only to the owning user.
 * - Listing of companies is denied to prevent unauthorized discovery of company data. Access must be controlled via user associations with specific company documents.
 * - Subcollections inherit the authorization context of their parent documents, enabling company-level access control.
 * - User-specific configuration data is strictly private and only accessible to the owning user.
 *
 * Denormalization for Authorization:
 *  - The `Company` documents have an `ownerId` field, enabling owner-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership and existence check.
     */
    function isExistingOwner(ownerId) {
        return isSignedIn() && isOwner(ownerId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own profile.
     * @deny (create) If the user is trying to create another user's profile.
     * @allow (get, update, delete) If the user is the owner of the profile.
     * @deny (get, update, delete) If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for company documents.
     * @path /companies/{companyId}
     * @allow (get) If true.
     * @deny (get) Never.
     * @allow (create) If the user is authenticated and the ownerId matches the authenticated user.
     * @deny (create) If the user is not authenticated or the ownerId does not match the authenticated user.
     * @allow (update, delete) If the user is the owner of the company.
     * @deny (update, delete) If the user is not the owner of the company.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /companies/{companyId} {
        allow get: if true;
        allow list: if false; // Fixed: Deny listing to prevent unauthorized discovery of company data
        allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.ownerId);
        allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for account documents within a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) If true.
     * @deny (get, list) Never.
     * @allow (create) If the user is authenticated.
     * @deny (create) Never.
     * @allow (update, delete) If the user is the owner of the company.
     * @deny (update, delete) If the user is not the owner of the company.
     * @principle Allows read access, but restricts writes to company owners.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
      allow delete: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
    }

    /**
     * @description Rules for voucher documents within a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) If true.
     * @deny (get, list) Never.
     * @allow (create) If the user is authenticated.
     * @deny (create) Never.
     * @allow (update, delete) If the user is the owner of the company.
     * @deny (update, delete) If the user is not the owner of the company.
     * @principle Allows read access, but restricts writes to company owners.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
      allow delete: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
    }

    /**
     * @description Rules for subject documents within a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) If true.
     * @deny (get, list) Never.
     * @allow (create) If the user is authenticated.
     * @deny (create) Never.
     * @allow (update, delete) If the user is the owner of the company.
     * @deny (update, delete) If the user is not the owner of the company.
     * @principle Allows read access, but restricts writes to company owners.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
      allow delete: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
    }

    /**
     * @description Rules for cost center documents within a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) If true.
     * @deny (get, list) Never.
     * @allow (create) If the user is authenticated.
     * @deny (create) Never.
     * @allow (update, delete) If the user is the owner of the company.
     * @deny (update, delete) If the user is not the owner of the company.
     * @principle Allows read access, but restricts writes to company owners.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
      allow delete: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
    }

    /**
     * @description Rules for employee documents within a company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) If true.
     * @deny (get, list) Never.
     * @allow (create) If the user is authenticated.
     * @deny (create) Never.
     * @allow (update, delete) If the user is the owner of the company.
     * @deny (update, delete) If the user is not the owner of the company.
     * @principle Allows read access, but restricts writes to company owners.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
      allow delete: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
    }

    /**
     * @description Rules for purchase documents within a company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) If true.
     * @deny (get, list) Never.
     * @allow (create) If the user is authenticated.
     * @deny (create) Never.
     * @allow (update, delete) If the user is the owner of the company.
     * @deny (update, delete) If the user is not the owner of the company.
     * @principle Allows read access, but restricts writes to company owners.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
      allow delete: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
    }

    /**
     * @description Rules for sales documents within a company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) If true.
     * @deny (get, list) Never.
     * @allow (create) If the user is authenticated.
     * @deny (create) Never.
     * @allow (update, delete) If the user is the owner of the company.
     * @deny (update, delete) If the user is not the owner of the company.
     * @principle Allows read access, but restricts writes to company owners.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
      allow delete: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
    }

      /**
     * @description Rules for fee documents within a company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) If true.
     * @deny (get, list) Never.
     * @allow (create) If the user is authenticated.
     * @deny (create) Never.
     * @allow (update, delete) If the user is the owner of the company.
     * @deny (update, delete) If the user is not the owner of the company.
     * @principle Allows read access, but restricts writes to company owners.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
      allow delete: if isExistingOwner(get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId);
    }

    /**
     * @description Rules for account group documents within a user's profile.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (get, list) If the user is the owner of the profile.
     * @deny (get, list) If the user is not the owner of the profile.
     * @allow (create, update, delete) If the user is the owner of the profile.
     * @deny (create, update, delete) If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for institution documents within a user's profile.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (get, list) If the user is the owner of the profile.
     * @deny (get, list) If the user is not the owner of the profile.
     * @allow (create, update, delete) If the user is the owner of the profile.
     * @deny (create, update, delete) If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for family allowance parameter documents within a user's profile.
     * @path /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (get, list) If the user is the owner of the profile.
     * @deny (get, list) If the user is not the owner of the profile.
     * @allow (create, update, delete) If the user is the owner of the profile.
     * @deny (create, update, delete) If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for tax parameter documents within a user's profile.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     * @allow (get, list) If the user is the owner of the profile.
     * @deny (get, list) If the user is not the owner of the profile.
     * @allow (create, update, delete) If the user is the owner of the profile.
     * @deny (create, update, delete) If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Rules for health entity documents within a user's profile.
     * @path /users/{userId}/health-entities/{healthEntityId}
     * @allow (get, list) If the user is the owner of the profile.
     * @deny (get, list) If the user is not the owner of the profile.
     * @allow (create, update, delete) If the user is the owner of the profile.
     * @deny (create, update, delete) If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for AFP entity documents within a user's profile.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     * @allow (get, list) If the user is the owner of the profile.
     * @deny (get, list) If the user is not the owner of the profile.
     * @allow (create, update, delete) If the user is the owner of the profile.
     * @deny (create, update, delete) If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}