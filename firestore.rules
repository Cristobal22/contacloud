/**
 * @fileoverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model where users can only access data
 * related to companies they are associated with.  User profiles are private, and
 * administrative roles are used to grant elevated privileges where necessary.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves and admins.
 * - /companies: Stores company data. Accessible with proper user association via `companyIds` array.
 * - /companies/{companyId}/accounts: Stores account data for a specific company.
 * - /companies/{companyId}/vouchers: Stores voucher data for a specific company.
 * - /companies/{companyId}/subjects: Stores subjects (clients, providers) data for a specific company.
 * - /companies/{companyId}/cost-centers: Stores cost center data for a specific company.
 * - /companies/{companyId}/employees: Stores employee data for a specific company.
 * - /companies/{companyId}/purchases: Stores purchase data for a specific company.
 * - /companies/{companyId}/sales: Stores sales data for a specific company.
 * - /companies/{companyId}/fees: Stores fees data for a specific company.
 * - /users/{userId}/account-groups: Stores user-specific account groups.
 * - /users/{userId}/institutions: Stores user-specific institutions.
 * - /users/{userId}/family-allowance-parameters: Stores user-specific family allowance parameters.
 * - /users/{userId}/tax-parameters: Stores user-specific tax parameters.
 * - /users/{userId}/health-entities: Stores user-specific health entities.
 * - /users/{userId}/afp-entities: Stores user-specific AFP entities.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Admins can read any user's profile.  Admin role assignment must be managed outside of these rules.
 * - Company data and associated subcollections are accessible to users who are linked to the company via the `companyIds` array in their profile.
 * - Listing of users is denied to prevent information disclosure.
 *
 * Denormalization for Authorization:
 *  The `UserProfile` entity contains a `companyIds` array, which is crucial for authorizing
 *  access to company-related data. This avoids costly `get()` calls to the user profile when
 *  accessing company subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Authentication: Ensures only authenticated users can access protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document based on the provided user ID.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Ownership: Confirms that the user's ID matches the expected owner ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Ownership and Existence:  Combines ownership validation with a check to ensure the document exists before allowing modifications or deletion.
     */
    function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Role-Based Access Control:  Determines if the user's role is 'Admin'.  Role assignment is assumed to be managed externally.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    /**
     * @description Checks if the user is associated with the company.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Multi-Tenancy:  Verifies if the user's profile contains the company ID in its 'companyIds' array, granting access to company-specific data.
     */
    function isUserAssociatedWithCompany(companyId) {
      return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]) || isAdmin());
    }


    /**
     * @description Manages access to user profile information.
     * @path /users/{userId}
     * @allow (get) An admin can read any user profile.
     * @allow (get) A user can read their own profile.
     * @allow (create) A user can create their own profile.
     * @allow (update) A user can update their own profile.
     * @deny (create) A user cannot create a profile with a different user ID.
     * @deny (update) A user cannot update another user's profile.
     * @deny (list) Listing users is not allowed.
     * @principle Restricts access to user profiles to the owner and admins.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to company information.
     * @path /companies/{companyId}
     * @allow (get) A user associated with the company can read the company data.
     * @allow (create) An admin can create a company.
     * @allow (update) An admin can update a company.
     * @deny (create) A non-admin user cannot create a company.
     * @deny (update) A non-admin user cannot update a company.
     * @deny (delete) Only admins can delete companies.
     * @principle Restricts company creation and updates to admins, while allowing associated users to read.
     */
    match /companies/{companyId} {
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages access to accounts for a specific company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get) A user associated with the company can read account data.
     * @allow (create) A user associated with the company can create account data.
     * @allow (update) A user associated with the company can update account data.
     * @deny (create) A user cannot create account data for a company they are not associated with.
     * @deny (update) A user cannot update account data for a company they are not associated with.
     * @deny (delete) Only users associated with the company can delete accounts.
     * @principle Restricts account data access to users associated with the company.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Manages access to vouchers for a specific company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get) A user associated with the company can read voucher data.
     * @allow (create) A user associated with the company can create voucher data.
     * @allow (update) A user associated with the company can update voucher data.
     * @deny (create) A user cannot create voucher data for a company they are not associated with.
     * @deny (update) A user cannot update voucher data for a company they are not associated with.
     * @deny (delete) Only users associated with the company can delete vouchers.
     * @principle Restricts voucher data access to users associated with the company.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Manages access to subjects (clients, providers) for a specific company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get) A user associated with the company can read subject data.
     * @allow (create) A user associated with the company can create subject data.
     * @allow (update) A user associated with the company can update subject data.
     * @deny (create) A user cannot create subject data for a company they are not associated with.
     * @deny (update) A user cannot update subject data for a company they are not associated with.
     * @deny (delete) Only users associated with the company can delete subjects.
     * @principle Restricts subject data access to users associated with the company.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Manages access to cost centers for a specific company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get) A user associated with the company can read cost center data.
     * @allow (create) A user associated with the company can create cost center data.
     * @allow (update) A user associated with the company can update cost center data.
     * @deny (create) A user cannot create cost center data for a company they are not associated with.
     * @deny (update) A user cannot update cost center data for a company they are not associated with.
     * @deny (delete) Only users associated with the company can delete cost centers.
     * @principle Restricts cost center data access to users associated with the company.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Manages access to employees for a specific company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get) A user associated with the company can read employee data.
     * @allow (create) A user associated with the company can create employee data.
     * @allow (update) A user associated with the company can update employee data.
     * @deny (create) A user cannot create employee data for a company they are not associated with.
     * @deny (update) A user cannot update employee data for a company they are not associated with.
     * @deny (delete) Only users associated with the company can delete employees.
     * @principle Restricts employee data access to users associated with the company.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

        /**
     * @description Manages access to purchases for a specific company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get) A user associated with the company can read purchase data.
     * @allow (create) A user associated with the company can create purchase data.
     * @allow (update) A user associated with the company can update purchase data.
     * @deny (create) A user cannot create purchase data for a company they are not associated with.
     * @deny (update) A user cannot update purchase data for a company they are not associated with.
     * @deny (delete) Only users associated with the company can delete purchases.
     * @principle Restricts purchase data access to users associated with the company.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Manages access to sales for a specific company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get) A user associated with the company can read sale data.
     * @allow (create) A user associated with the company can create sale data.
     * @allow (update) A user associated with the company can update sale data.
     * @deny (create) A user cannot create sale data for a company they are not associated with.
     * @deny (update) A user cannot update sale data for a company they are not associated with.
     * @deny (delete) Only users associated with the company can delete sales.
     * @principle Restricts sale data access to users associated with the company.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Manages access to fees for a specific company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get) A user associated with the company can read fee data.
     * @allow (create) A user associated with the company can create fee data.
     * @allow (update) A user associated with the company can update fee data.
     * @deny (create) A user cannot create fee data for a company they are not associated with.
     * @deny (update) A user cannot update fee data for a company they are not associated with.
     * @deny (delete) Only users associated with the company can delete fees.
     * @principle Restricts fee data access to users associated with the company.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Manages access to account groups for a specific user.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (get) The user can read their own account group data.
     * @allow (create) The user can create their own account group data.
     * @allow (update) The user can update their own account group data.
     * @deny (create) A user cannot create account group data for another user.
     * @deny (update) A user cannot update account group data for another user.
     * @deny (delete) Only the user can delete their own account group data.
     * @principle Restricts account group data access to the owner user.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to institutions for a specific user.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (get) The user can read their own institution data.
     * @allow (create) The user can create their own institution data.
     * @allow (update) The user can update their own institution data.
     * @deny (create) A user cannot create institution data for another user.
     * @deny (update) A user cannot update institution data for another user.
     * @deny (delete) Only the user can delete their own institution data.
     * @principle Restricts institution data access to the owner user.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to family allowance parameters for a specific user.
     * @path /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (get) The user can read their own family allowance parameter data.
     * @allow (create) The user can create their own family allowance parameter data.
     * @allow (update) The user can update their own family allowance parameter data.
     * @deny (create) A user cannot create family allowance parameter data for another user.
     * @deny (update) A user cannot update family allowance parameter data for another user.
     * @deny (delete) Only the user can delete their own family allowance parameter data.
     * @principle Restricts family allowance parameter data access to the owner user.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to tax parameters for a specific user.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     * @allow (get) The user can read their own tax parameter data.
     * @allow (create) The user can create their own tax parameter data.
     * @allow (update) The user can update their own tax parameter data.
     * @deny (create) A user cannot create tax parameter data for another user.
     * @deny (update) A user cannot update tax parameter data for another user.
     * @deny (delete) Only the user can delete their own tax parameter data.
     * @principle Restricts tax parameter data access to the owner user.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to health entities for a specific user.
     * @path /users/{userId}/health-entities/{healthEntityId}
     * @allow (get) The user can read their own health entity data.
     * @allow (create) The user can create their own health entity data.
     * @allow (update) The user can update their own health entity data.
     * @deny (create) A user cannot create health entity data for another user.
     * @deny (update) A user cannot update health entity data for another user.
     * @deny (delete) Only the user can delete their own health entity data.
     * @principle Restricts health entity data access to the owner user.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to AFP entities for a specific user.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     * @allow (get) The user can read their own AFP entity data.
     * @allow (create) The user can create their own AFP entity data.
     * @allow (update) The user can update their own AFP entity data.
     * @deny (create) A user cannot create AFP entity data for another user.
     * @deny (update) A user cannot update AFP entity data for another user.
     * @deny (delete) Only the user can delete their own AFP entity data.
     * @principle Restricts AFP entity data access to the owner user.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}