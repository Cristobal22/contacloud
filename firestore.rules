/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system where 'Admin' users have broad access and 'Accountant' users have more restricted access, primarily scoped to data associated with Companies they are linked to.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, including roles and associated company IDs.
 * - /companies/{companyId}: Stores company data.
 * - /companies/{companyId}/[...]: Subcollections for company-specific data (accounts, vouchers, etc.).
 * - /users/{userId}/[...]: User-specific collections for configuration data (account groups, institutions, etc.).
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - The 'companies' collection can only be created by admins, not accountants.
 * - Subcollections under 'companies/{companyId}' are accessible only to users associated with that company (Accountants or Admins).
 * - User-specific collections under '/users/{userId}' are strictly owned by the user.
 *
 * Denormalization for Authorization:
 * - User profiles store an array of `companyIds` to avoid requiring queries against a separate memberships collection to authorize access to company-related data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    /**
     * @description Checks if the user has the 'Accountant' role.
     */
    function isAccountant() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
    }

    /**
     * @description Checks if the user is associated with the company (either Admin or Accountant with companyId in their profile).
     */
    function isAssociatedWithCompany(companyId) {
        return isAdmin() || (isAccountant() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]));
    }

    /**
     * @description Secures the user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     * @allow (get) User with ID 'user123' reads their own profile.
     * @deny (create) User with ID 'user123' attempts to create a profile for 'user456'.
     * @deny (update) User with ID 'user123' attempts to update the profile of 'user456'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the companies collection.
     * @path /companies
     * @allow (create) Admin user creates a new company.
     * @deny (create) Non-admin user attempts to create a new company.
     * @deny (get) - Listing all companies is not allowed. Access to companies should be controlled by user roles and companyId associations.
     * @principle Restricts company creation to admin users and enforces access control based on company associations.
     */
    match /companies {
      allow get: if false;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secures the accounts sub-collection for a company.
     * @path /companies/{companyId}/accounts
     * @allow (create) Accountant associated with company 'company123' creates a new account for it.
     * @deny (create) Accountant not associated with 'company123' attempts to create an account for it.
     */
    match /companies/{companyId}/accounts/{accountId} {
        allow get: if isAssociatedWithCompany(companyId);
        allow list: if isAssociatedWithCompany(companyId);
        allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
        allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
        allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Secures the vouchers sub-collection for a company.
     * @path /companies/{companyId}/vouchers
     * @allow (create) Accountant associated with company 'company123' creates a new voucher for it.
     * @deny (create) Accountant not associated with 'company123' attempts to create a voucher for it.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
        allow get: if isAssociatedWithCompany(companyId);
        allow list: if isAssociatedWithCompany(companyId);
        allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
        allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
        allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Secures the subjects sub-collection for a company.
     * @path /companies/{companyId}/subjects
     */
    match /companies/{companyId}/subjects/{subjectId} {
        allow get: if isAssociatedWithCompany(companyId);
        allow list: if isAssociatedWithCompany(companyId);
        allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
        allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
        allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Secures the cost-centers sub-collection for a company.
     * @path /companies/{companyId}/cost-centers
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
        allow get: if isAssociatedWithCompany(companyId);
        allow list: if isAssociatedWithCompany(companyId);
        allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
        allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
        allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Secures the employees sub-collection for a company.
     * @path /companies/{companyId}/employees
     */
    match /companies/{companyId}/employees/{employeeId} {
        allow get: if isAssociatedWithCompany(companyId);
        allow list: if isAssociatedWithCompany(companyId);
        allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
        allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
        allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Secures the purchases sub-collection for a company.
     * @path /companies/{companyId}/purchases
     */
     match /companies/{companyId}/purchases/{purchaseId} {
        allow get: if isAssociatedWithCompany(companyId);
        allow list: if isAssociatedWithCompany(companyId);
        allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
        allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
        allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Secures the sales sub-collection for a company.
     * @path /companies/{companyId}/sales
     */
    match /companies/{companyId}/sales/{saleId} {
        allow get: if isAssociatedWithCompany(companyId);
        allow list: if isAssociatedWithCompany(companyId);
        allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
        allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
        allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Secures the fees sub-collection for a company.
     * @path /companies/{companyId}/fees
     */
    match /companies/{companyId}/fees/{feeId} {
        allow get: if isAssociatedWithCompany(companyId);
        allow list: if isAssociatedWithCompany(companyId);
        allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
        allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
        allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Secures the account-groups sub-collection for a user.
     * @path /users/{userId}/account-groups
     */
    match /users/{userId}/account-groups/{accountGroupId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the institutions sub-collection for a user.
     * @path /users/{userId}/institutions
     */
    match /users/{userId}/institutions/{institutionId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the family-allowance-parameters sub-collection for a user.
     * @path /users/{userId}/family-allowance-parameters
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the tax-parameters sub-collection for a user.
     * @path /users/{userId}/tax-parameters
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the health-entities sub-collection for a user.
     * @path /users/{userId}/health-entities
     */
    match /users/{userId}/health-entities/{healthEntityId} {
         allow get: if isOwner(userId);
         allow list: if isOwner(userId);
         allow create: if isOwner(userId);
         allow update: if isExistingOwner(userId);
         allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the afp-entities sub-collection for a user.
     * @path /users/{userId}/afp-entities
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}