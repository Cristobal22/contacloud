/**
 * @fileoverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model where users have explicit ownership or
 * shared access to data. User profiles are private, while company data is generally accessible
 * to users associated with that company.  System-level parameters (economic indicators, institutions,
 * etc.) are publicly readable but only writable by authorized roles (not implemented in this version).
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user themselves.
 * - /companies/{companyId}: Company data, accessible to users who are owners or members of the company.
 * - /companies/{companyId}/[...]: Subcollections related to a specific company. Access follows company-level permissions.
 * - /economic-indicators/{indicatorId}, /institutions/{institutionId}, etc.: System-level data, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Company ownership is enforced through the `ownerId` field on the company document.
 * - Missing ownership checks on company subcollections will default to denying write access.
 * - Validation of complex data types or required fields is skipped in this prototyping phase.
 *
 * Denormalization for Authorization:
 *  For simpler, more performant rules, company documents should denormalize user roles (e.g., using a `members` map).
 *  To avoid `get()` calls, denormalize ownership information onto subcollection documents whenever possible.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own profile (auth UID matches userId).
     * @allow (get, list, update, delete) If the user is accessing their own profile.
     * @deny (create) If the user is attempting to create a profile for another user.
     * @deny (update, delete) If the user is attempting to modify/delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == request.auth.uid;
    }

    /**
     * @description Controls access to company documents.
     * @path /companies/{companyId}
     * @allow (get, list) If true (all companies are publicly listable).
     * @allow (create) If the user is signed in. The `ownerId` field must match the auth UID.
     * @allow (update, delete) If the user is the owner of the company (ownerId matches auth UID).
     * @deny (create) If the ownerId field does not match the auth UID.
     * @deny (update, delete) If the user is not the owner of the company.
     * @principle Enforces company ownership for writes.
     */
    match /companies/{companyId} {
      function isOwner(companyId) {
        return request.auth.uid == resource.data.ownerId;
      }
      function isNewOwner(companyId) {
        return request.auth.uid == request.resource.data.ownerId;
      }
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isNewOwner(companyId);
      allow update: if isSignedIn() && isOwner(companyId);
      allow delete: if isSignedIn() && isOwner(companyId);
    }

    /**
     * @description Controls access to accounts within a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) If true (all accounts are publicly listable).
     * @allow (create) If the user is signed in and the `companyId` field matches the path.
     * @allow (update, delete) If the user is signed in and the account belongs to the company.
     * @deny (create) If the `companyId` field does not match the path.
     * @deny (update, delete) If the account does not belong to the company.
     * @principle Enforces data consistency for company accounts.
     */
    match /companies/{companyId}/accounts/{accountId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.companyId == companyId;
      allow update: if isSignedIn() && request.resource.data.companyId == companyId;
      allow delete: if isSignedIn() && resource.data.companyId == companyId;
    }

    /**
     * @description Controls access to vouchers within a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) If true (all vouchers are publicly listable).
     * @allow (create) If the user is signed in and the `companyId` field matches the path.
     * @allow (update, delete) If the user is signed in and the voucher belongs to the company.
     * @deny (create) If the `companyId` field does not match the path.
     * @deny (update, delete) If the voucher does not belong to the company.
     * @principle Enforces data consistency for company vouchers.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.companyId == companyId;
      allow update: if isSignedIn() && request.resource.data.companyId == companyId;
      allow delete: if isSignedIn() && resource.data.companyId == companyId;
    }

    /**
     * @description Controls access to subjects within a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) If true (all subjects are publicly listable).
     * @allow (create) If the user is signed in and the `companyId` field matches the path.
     * @allow (update, delete) If the user is signed in and the subject belongs to the company.
     * @deny (create) If the `companyId` field does not match the path.
     * @deny (update, delete) If the subject does not belong to the company.
     * @principle Enforces data consistency for company subjects.
     */
    match /companies/{companyId}/subjects/{subjectId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.companyId == companyId;
      allow update: if isSignedIn() && request.resource.data.companyId == companyId;
      allow delete: if isSignedIn() && resource.data.companyId == companyId;
    }

    /**
     * @description Controls access to cost centers within a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) If true (all cost centers are publicly listable).
     * @allow (create) If the user is signed in and the `companyId` field matches the path.
     * @allow (update, delete) If the user is signed in and the cost center belongs to the company.
     * @deny (create) If the `companyId` field does not match the path.
     * @deny (update, delete) If the cost center does not belong to the company.
     * @principle Enforces data consistency for company cost centers.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.companyId == companyId;
      allow update: if isSignedIn() && request.resource.data.companyId == companyId;
      allow delete: if isSignedIn() && resource.data.companyId == companyId;
    }

    /**
     * @description Controls access to employees within a company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) If true (all employees are publicly listable).
     * @allow (create) If the user is signed in and the `companyId` field matches the path.
     * @allow (update, delete) If the user is signed in and the employee belongs to the company.
     * @deny (create) If the `companyId` field does not match the path.
     * @deny (update, delete) If the employee does not belong to the company.
     * @principle Enforces data consistency for company employees.
     */
    match /companies/{companyId}/employees/{employeeId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.companyId == companyId;
      allow update: if isSignedIn() && request.resource.data.companyId == companyId;
      allow delete: if isSignedIn() && resource.data.companyId == companyId;
    }

    /**
     * @description Controls access to payrolls within a company.
     * @path /companies/{companyId}/payrolls/{payrollId}
     * @allow (get, list) If true (all payrolls are publicly listable).
     * @allow (create) If the user is signed in and the `companyId` field matches the path.
     * @allow (update, delete) If the user is signed in and the payroll belongs to the company.
     * @deny (create) If the `companyId` field does not match the path.
     * @deny (update, delete) If the payroll does not belong to the company.
     * @principle Enforces data consistency for company payrolls.
     */
    match /companies/{companyId}/payrolls/{payrollId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.companyId == companyId;
      allow update: if isSignedIn() && request.resource.data.companyId == companyId;
      allow delete: if isSignedIn() && resource.data.companyId == companyId;
    }

     /**
     * @description Controls access to purchases within a company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) If true (all purchases are publicly listable).
     * @allow (create) If the user is signed in and the `companyId` field matches the path.
     * @allow (update, delete) If the user is signed in and the purchase belongs to the company.
     * @deny (create) If the `companyId` field does not match the path.
     * @deny (update, delete) If the purchase does not belong to the company.
     * @principle Enforces data consistency for company purchases.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.companyId == companyId;
      allow update: if isSignedIn() && request.resource.data.companyId == companyId;
      allow delete: if isSignedIn() && resource.data.companyId == companyId;
    }

    /**
     * @description Controls access to sales within a company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) If true (all sales are publicly listable).
     * @allow (create) If the user is signed in and the `companyId` field matches the path.
     * @allow (update, delete) If the user is signed in and the sale belongs to the company.
     * @deny (create) If the `companyId` field does not match the path.
     * @deny (update, delete) If the sale does not belong to the company.
     * @principle Enforces data consistency for company sales.
     */
    match /companies/{companyId}/sales/{saleId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.companyId == companyId;
      allow update: if isSignedIn() && request.resource.data.companyId == companyId;
      allow delete: if isSignedIn() && resource.data.companyId == companyId;
    }

    /**
     * @description Controls access to fees within a company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) If true (all fees are publicly listable).
     * @allow (create) If the user is signed in and the `companyId` field matches the path.
     * @allow (update, delete) If the user is signed in and the fee belongs to the company.
     * @deny (create) If the `companyId` field does not match the path.
     * @deny (update, delete) If the fee does not belong to the company.
     * @principle Enforces data consistency for company fees.
     */
    match /companies/{companyId}/fees/{feeId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.companyId == companyId;
      allow update: if isSignedIn() && request.resource.data.companyId == companyId;
      allow delete: if isSignedIn() && resource.data.companyId == companyId;
    }

    /**
     * @description Controls access to company-specific economic indicators.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     * @allow (get, list) If true (all indicators are publicly readable).
     * @allow create, update, delete: if false; // TODO: Restrict to authorized roles
     * @principle Public read, restricted write.
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Restrict to authorized roles
    }

    /**
     * @description Controls access to user-specific account groups.
     * @path /users/{userId}/account-groups/{groupId}
     * @allow (get, list) If the user is accessing their own account groups.
     * @allow (create, update, delete) If the user is the owner of the account group.
     * @deny (create, update, delete) If the user is attempting to modify/delete another user's account group.
     * @principle Enforces document ownership for account groups.
     */
    match /users/{userId}/account-groups/{groupId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isOwner(userId);
      allow create, update, delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to global economic indicators.
     * @path /economic-indicators/{indicatorId}
     * @allow (get, list) If true (all indicators are publicly readable).
     * @allow create, update, delete: if false; // TODO: Restrict to authorized roles
     * @principle Public read, restricted write.
     */
    match /economic-indicators/{indicatorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Restrict to authorized roles
    }

    /**
     * @description Controls access to global health entities.
     * @path /health-entities/{entityId}
     * @allow (get, list) If true (all entities are publicly readable).
     * @allow create, update, delete: if false; // TODO: Restrict to authorized roles
     * @principle Public read, restricted write.
     */
    match /health-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Restrict to authorized roles
    }

    /**
     * @description Controls access to global AFP entities.
     * @path /afp-entities/{entityId}
     * @allow (get, list) If true (all entities are publicly readable).
     * @allow create, update, delete: if false; // TODO: Restrict to authorized roles
     * @principle Public read, restricted write.
     */
    match /afp-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Restrict to authorized roles
    }

    /**
     * @description Controls access to global family allowance parameters.
     * @path /family-allowance-parameters/{paramId}
     * @allow (get, list) If true (all parameters are publicly readable).
     * @allow create, update, delete: if false; // TODO: Restrict to authorized roles
     * @principle Public read, restricted write.
     */
    match /family-allowance-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Restrict to authorized roles
    }

    /**
     * @description Controls access to global tax parameters.
     * @path /tax-parameters/{paramId}
     * @allow (get, list) If true (all parameters are publicly readable).
     * @allow create, update, delete: if false; // TODO: Restrict to authorized roles
     * @principle Public read, restricted write.
     */
    match /tax-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Restrict to authorized roles
    }

    /**
     * @description Controls access to global institutions.
     * @path /institutions/{institutionId}
     * @allow (get, list) If true (all institutions are publicly readable).
     * @allow create, update, delete: if false; // TODO: Restrict to authorized roles
     * @principle Public read, restricted write.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Restrict to authorized roles
    }
  }
}