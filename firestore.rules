/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model for user profiles
 *  and a company-based access control model for accounting data. Global data collections
 *  (e.g., account groups, institutions, parameters) are publicly readable but only
 *  modifiable through backend processes.
 * @data-structure
 *  - /users/{userId}: Stores individual user profiles, accessible only by the user themselves.
 *  - /companies/{companyId}: Stores company data. Access is not directly controlled by users in this ruleset.
 *  - /companies/{companyId}/accounts: Stores accounting data related to a specific company.
 *  - /account-groups, /institutions, /family-allowance-parameters, /tax-parameters: Global data collections.
 * @key-security-decisions
 *  - User listing is explicitly denied to prevent unauthorized access to user data.
 *  - Global data collections are publicly readable to simplify data access for the application.
 *  - The default security posture for ambiguous relationships is to deny access unless explicitly granted.
 * @denormalization-for-authorization N/A - No denormalization is needed for this ruleset.
 * @structural-segregation N/A - No segregation of public vs. private data is used in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get) Authenticated user can read their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (list) Prevents listing all users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the companies collection.  Access to companies is not governed by user roles.
     * @path /companies
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /companies/{companyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the accounts subcollection for a specific company.  Access to accounts is not governed by user roles.
     * @path /companies/{companyId}/accounts
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Controls access to the vouchers subcollection for a specific company. Access to vouchers is not governed by user roles.
      * @path /companies/{companyId}/vouchers
      * @allow (get, list) Allows any read request.
      * @deny (create, update, delete) Prevents all write request.
      * @principle Restricts access to specific roles.
      */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the subjects subcollection for a specific company. Access to subjects is not governed by user roles.
     * @path /companies/{companyId}/subjects
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the cost-centers subcollection for a specific company. Access to cost-centers is not governed by user roles.
     * @path /companies/{companyId}/cost-centers
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the employees subcollection for a specific company. Access to employees is not governed by user roles.
     * @path /companies/{companyId}/employees
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the purchases subcollection for a specific company. Access to purchases is not governed by user roles.
     * @path /companies/{companyId}/purchases
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the sales subcollection for a specific company. Access to sales is not governed by user roles.
     * @path /companies/{companyId}/sales
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the fees subcollection for a specific company. Access to fees is not governed by user roles.
     * @path /companies/{companyId}/fees
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the account-groups collection.
     * @path /account-groups
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /account-groups/{accountGroupId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the institutions collection.
     * @path /institutions
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the family-allowance-parameters collection.
     * @path /family-allowance-parameters
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /family-allowance-parameters/{familyAllowanceParameterId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the tax-parameters collection.
     * @path /tax-parameters
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /tax-parameters/{taxParameterId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the health-entities collection.
     * @path /health-entities
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /health-entities/{healthEntityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the afp-entities collection.
     * @path /afp-entities
     * @allow (get, list) Allows any read request.
     * @deny (create, update, delete) Prevents all write request.
     * @principle Restricts access to specific roles.
     */
    match /afp-entities/{afpEntityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}