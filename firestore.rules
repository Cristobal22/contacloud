/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data and a role-based access model for company data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Company data is stored under `/companies/{companyId}`, with subcollections for accounts, vouchers, subjects, cost centers, and employees.
 * - User-specific configurations like account groups and institutions are stored under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user profiles.
 * - Company creation is restricted.  Further access to company data (accounts, vouchers, etc.) is role-based, managed via the UserProfile.role field.  Admin users have full access; Accountants have read access.
 * - User listing is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The `UserProfile` includes a `role` field to avoid needing a separate lookup for role-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isAccountant() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User can access their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to company documents.
     * @path /companies
     * @allow (get, list) Anyone can read company documents.
     * @deny (create, update, delete) Only an admin can create, update, or delete company documents.
     * @principle Restricts company management to authorized personnel.
     */
    match /companies {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to account documents within a company.
     * @path /companies/{companyId}/accounts
     * @allow (get, list) Admins and Accountants can read accounts.
     * @allow (create, update, delete) Only Admins can create, update, or delete accounts.
     * @principle Role-based access control for company accounting data.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get, list: if isAdmin() || isAccountant();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to voucher documents within a company.
     * @path /companies/{companyId}/vouchers
     * @allow (get, list) Admins and Accountants can read vouchers.
     * @allow (create, update, delete) Only Admins can create, update, or delete vouchers.
     * @principle Role-based access control for company accounting data.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get, list: if isAdmin() || isAccountant();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to subject documents within a company.
     * @path /companies/{companyId}/subjects
     * @allow (get, list) Admins and Accountants can read subjects.
     * @allow (create, update, delete) Only Admins can create, update, or delete subjects.
     * @principle Role-based access control for company accounting data.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get, list: if isAdmin() || isAccountant();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to cost center documents within a company.
     * @path /companies/{companyId}/cost-centers
     * @allow (get, list) Admins and Accountants can read cost centers.
     * @allow (create, update, delete) Only Admins can create, update, or delete cost centers.
     * @principle Role-based access control for company accounting data.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get, list: if isAdmin() || isAccountant();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to employee documents within a company.
     * @path /companies/{companyId}/employees
     * @allow (get, list) Admins and Accountants can read employees.
     * @allow (create, update, delete) Only Admins can create, update, or delete employees.
     * @principle Role-based access control for company accounting data.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get, list: if isAdmin() || isAccountant();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Controls access to purchase documents within a company.
     * @path /companies/{companyId}/purchases
     * @allow (get, list) Admins and Accountants can read purchases.
     * @allow (create, update, delete) Only Admins can create, update, or delete purchases.
     * @principle Role-based access control for company accounting data.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get, list: if isAdmin() || isAccountant();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to sales documents within a company.
     * @path /companies/{companyId}/sales
     * @allow (get, list) Admins and Accountants can read sales.
     * @allow (create, update, delete) Only Admins can create, update, or delete sales.
     * @principle Role-based access control for company accounting data.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if isAdmin() || isAccountant();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to fee documents within a company.
     * @path /companies/{companyId}/fees
     * @allow (get, list) Admins and Accountants can read fees.
     * @allow (create, update, delete) Only Admins can create, update, or delete fees.
     * @principle Role-based access control for company accounting data.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get, list: if isAdmin() || isAccountant();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to account group documents within a user's profile.
     * @path /users/{userId}/account-groups
     * @allow (get, list) User can access their own account groups.
     * @allow (create, update, delete) User can manage their own account groups.
     * @deny User cannot access other user's account groups.
     * @principle Enforces document ownership for user-specific configurations.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to institution documents within a user's profile.
     * @path /users/{userId}/institutions
     * @allow (get, list) User can access their own institution documents.
     * @allow (create, update, delete) User can manage their own institution documents.
     * @deny User cannot access other user's institution documents.
     * @principle Enforces document ownership for user-specific configurations.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to family allowance parameter documents within a user's profile.
     * @path /users/{userId}/family-allowance-parameters
     * @allow (get, list) User can access their own family allowance parameters.
     * @allow (create, update, delete) User can manage their own family allowance parameters.
     * @deny User cannot access other user's family allowance parameters.
     * @principle Enforces document ownership for user-specific configurations.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tax parameter documents within a user's profile.
     * @path /users/{userId}/tax-parameters
     * @allow (get, list) User can access their own tax parameters.
     * @allow (create, update, delete) User can manage their own tax parameters.
     * @deny User cannot access other user's tax parameters.
     * @principle Enforces document ownership for user-specific configurations.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to health entity documents within a user's profile.
     * @path /users/{userId}/health-entities
     * @allow (get, list) User can access their own health entities.
     * @allow (create, update, delete) User can manage their own health entities.
     * @deny User cannot access other user's health entities.
     * @principle Enforces document ownership for user-specific configurations.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to AFP entity documents within a user's profile.
     * @path /users/{userId}/afp-entities
     * @allow (get, list) User can access their own AFP entities.
     * @allow (create, update, delete) User can manage their own AFP entities.
     * @deny User cannot access other user's AFP entities.
     * @principle Enforces document ownership for user-specific configurations.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}