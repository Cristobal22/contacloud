/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with user-ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user themselves or an Admin can read/write.
 * - /companies/{companyId}: Stores company data. Only the owner of the company (ownerId field) can read/write.
 * - /companies/{companyId}/*: Subcollections under companies are secured based on company ownership.
 * - /users/{userId}/*: Subcollections under users are secured to the owner of the user.
 *
 * Key Security Decisions:
 * - Admins cannot directly access company information but can manage accountant user profiles.
 * - User listing is disabled for enhanced privacy.
 * - All write operations require a verified user identity (authentication).
 * - Data validation is minimized for prototyping, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - Company documents store the owner's UID in the `ownerId` field to avoid costly `get()` calls during authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Only the user themselves or an Admin can access their profile.
     * @deny (create) if the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) if the user is not authenticated.
     * @principle Enforces user-ownership and admin override for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // User listing is not permitted

      allow create: if isSignedIn() && isSelfCreate(userId) && isValidUserProfileCreate();
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && isValidUserProfileUpdate(userId);
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secure company documents.
     * @path /companies/{companyId}
     * @allow (create) Authenticated user can create a company, with ownerId set to their UID.
     * @allow (get, update, delete) Only the company owner can access company data.
     * @deny (create) if the authenticated user is not setting themselves as the owner.
     * @deny (update, delete) if the user is not the company owner.
     * @principle Enforces company ownership for all company data.
     */
    match /companies/{companyId} {
      allow get: if isSignedIn() && isCompanyOwner(companyId);
      allow list: if false;

      allow create: if isSignedIn() && isValidCompanyCreate();
      allow update: if isSignedIn() && isExistingCompanyOwner(companyId) && isValidCompanyUpdate(companyId);
      allow delete: if isSignedIn() && isExistingCompanyOwner(companyId);
    }

    /**
     * @description Secure account documents under a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (create, get, update, delete) Only the company owner can manage accounts.
     * @deny (create, update, delete) if the user is not the company owner.
     * @principle Enforces company ownership for all account data.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get: if isSignedIn() && isCompanyOwner(companyId);
      allow list: if isSignedIn() && isCompanyOwner(companyId);

      allow create: if isSignedIn() && isCompanyOwner(companyId) && isValidAccountCreate(companyId);
      allow update: if isSignedIn() && isExistingCompanyOwner(companyId) && isValidAccountUpdate(companyId);
      allow delete: if isSignedIn() && isExistingCompanyOwner(companyId);
    }

    /**
     * @description Secure voucher documents under a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (create, get, update, delete) Only the company owner can manage vouchers.
     * @deny (create, update, delete) if the user is not the company owner.
     * @principle Enforces company ownership for all voucher data.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get: if isSignedIn() && isCompanyOwner(companyId);
      allow list: if isSignedIn() && isCompanyOwner(companyId);

      allow create: if isSignedIn() && isCompanyOwner(companyId) && isValidVoucherCreate(companyId);
      allow update: if isSignedIn() && isExistingCompanyOwner(companyId) && isValidVoucherUpdate(companyId);
      allow delete: if isSignedIn() && isExistingCompanyOwner(companyId);
    }

    /**
     * @description Secure subject documents under a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (create, get, update, delete) Only the company owner can manage subjects.
     * @deny (create, update, delete) if the user is not the company owner.
     * @principle Enforces company ownership for all subject data.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get: if isSignedIn() && isCompanyOwner(companyId);
      allow list: if isSignedIn() && isCompanyOwner(companyId);

      allow create: if isSignedIn() && isCompanyOwner(companyId) && isValidSubjectCreate(companyId);
      allow update: if isSignedIn() && isExistingCompanyOwner(companyId) && isValidSubjectUpdate(companyId);
      allow delete: if isSignedIn() && isExistingCompanyOwner(companyId);
    }

    /**
     * @description Secure cost center documents under a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (create, get, update, delete) Only the company owner can manage cost centers.
     * @deny (create, update, delete) if the user is not the company owner.
     * @principle Enforces company ownership for all cost center data.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get: if isSignedIn() && isCompanyOwner(companyId);
      allow list: if isSignedIn() && isCompanyOwner(companyId);

      allow create: if isSignedIn() && isCompanyOwner(companyId) && isValidCostCenterCreate(companyId);
      allow update: if isSignedIn() && isExistingCompanyOwner(companyId) && isValidCostCenterUpdate(companyId);
      allow delete: if isSignedIn() && isExistingCompanyOwner(companyId);
    }

    /**
     * @description Secure employee documents under a company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (create, get, update, delete) Only the company owner can manage employees.
     * @deny (create, update, delete) if the user is not the company owner.
     * @principle Enforces company ownership for all employee data.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get: if isSignedIn() && isCompanyOwner(companyId);
      allow list: if isSignedIn() && isCompanyOwner(companyId);

      allow create: if isSignedIn() && isCompanyOwner(companyId) && isValidEmployeeCreate(companyId);
      allow update: if isSignedIn() && isExistingCompanyOwner(companyId) && isValidEmployeeUpdate(companyId);
      allow delete: if isSignedIn() && isExistingCompanyOwner(companyId);
    }
    
    /**
     * @description Secure purchase documents under a company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (create, get, update, delete) Only the company owner can manage purchases.
     * @deny (create, update, delete) if the user is not the company owner.
     * @principle Enforces company ownership for all purchase data.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get: if isSignedIn() && isCompanyOwner(companyId);
      allow list: if isSignedIn() && isCompanyOwner(companyId);

      allow create: if isSignedIn() && isCompanyOwner(companyId) && isValidPurchaseCreate(companyId);
      allow update: if isSignedIn() && isExistingCompanyOwner(companyId) && isValidPurchaseUpdate(companyId);
      allow delete: if isSignedIn() && isExistingCompanyOwner(companyId);
    }

    /**
     * @description Secure sales documents under a company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (create, get, update, delete) Only the company owner can manage sales.
     * @deny (create, update, delete) if the user is not the company owner.
     * @principle Enforces company ownership for all sales data.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get: if isSignedIn() && isCompanyOwner(companyId);
      allow list: if isSignedIn() && isCompanyOwner(companyId);

      allow create: if isSignedIn() && isCompanyOwner(companyId) && isValidSaleCreate(companyId);
      allow update: if isSignedIn() && isExistingCompanyOwner(companyId) && isValidSaleUpdate(companyId);
      allow delete: if isSignedIn() && isExistingCompanyOwner(companyId);
    }

    /**
     * @description Secure fee documents under a company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (create, get, update, delete) Only the company owner can manage fees.
     * @deny (create, update, delete) if the user is not the company owner.
     * @principle Enforces company ownership for all fee data.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get: if isSignedIn() && isCompanyOwner(companyId);
      allow list: if isSignedIn() && isCompanyOwner(companyId);

      allow create: if isSignedIn() && isCompanyOwner(companyId) && isValidFeeCreate(companyId);
      allow update: if isSignedIn() && isExistingCompanyOwner(companyId) && isValidFeeUpdate(companyId);
      allow delete: if isSignedIn() && isExistingCompanyOwner(companyId);
    }

    /**
     * @description Secure account group documents under a user.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (create, get, update, delete) Only the user themselves can manage account groups.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces user-ownership for all account group data.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && isValidAccountGroupCreate();
      allow update: if isSignedIn() && isExistingOwner(userId) && isValidAccountGroupUpdate();
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure institution documents under a user.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (create, get, update, delete) Only the user themselves can manage institutions.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces user-ownership for all institution data.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && isValidInstitutionCreate();
      allow update: if isSignedIn() && isExistingOwner(userId) && isValidInstitutionUpdate();
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure family allowance parameter documents under a user.
     * @path /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (create, get, update, delete) Only the user themselves can manage family allowance parameters.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces user-ownership for all family allowance parameter data.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && isValidFamilyAllowanceParameterCreate();
      allow update: if isSignedIn() && isExistingOwner(userId) && isValidFamilyAllowanceParameterUpdate();
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure tax parameter documents under a user.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     * @allow (create, get, update, delete) Only the user themselves can manage tax parameters.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces user-ownership for all tax parameter data.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && isValidTaxParameterCreate();
      allow update: if isSignedIn() && isExistingOwner(userId) && isValidTaxParameterUpdate();
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

     /**
     * @description Secure health entity documents under a user.
     * @path /users/{userId}/health-entities/{healthEntityId}
     * @allow (create, get, update, delete) Only the user themselves can manage health entities.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces user-ownership for all health entity data.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && isValidHealthEntityCreate();
      allow update: if isSignedIn() && isExistingOwner(userId) && isValidHealthEntityUpdate();
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure AFP entity documents under a user.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     * @allow (create, get, update, delete) Only the user themselves can manage AFP entities.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces user-ownership for all AFP entity data.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && isValidAfpEntityCreate();
      allow update: if isSignedIn() && isExistingOwner(userId) && isValidAfpEntityUpdate();
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // ---- Helper functions ----

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isCompanyOwner(companyId) {
      return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

    function isExistingCompanyOwner(companyId) {
        return isCompanyOwner(companyId) && resource != null;
    }

    function isAdmin() {
      return request.auth.token.role == 'Admin';
    }

    function isSelfCreate(userId) {
        return request.auth.uid == userId;
    }

    // ---- Validation Rules ----
    //Minimal validation for prototyping, only validating ownership or relational integrity

    function isValidUserProfileCreate() {
        return request.resource.data.uid == request.auth.uid;
    }

    function isValidUserProfileUpdate(userId) {
      return resource.data.uid == userId; // enforce immutable uid
    }

    function isValidCompanyCreate() {
      return request.resource.data.ownerId == request.auth.uid;
    }

    function isValidCompanyUpdate(companyId) {
      return resource.data.ownerId == get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId; //enforce immutable ownerId
    }

    function isValidAccountCreate(companyId){
        return request.resource.data.companyId == companyId;
    }

    function isValidAccountUpdate(companyId){
        return resource.data.companyId == companyId;
    }

    function isValidVoucherCreate(companyId){
        return request.resource.data.companyId == companyId;
    }

    function isValidVoucherUpdate(companyId){
        return resource.data.companyId == companyId;
    }

    function isValidSubjectCreate(companyId){
        return request.resource.data.companyId == companyId;
    }

    function isValidSubjectUpdate(companyId){
        return resource.data.companyId == companyId;
    }

    function isValidCostCenterCreate(companyId){
        return request.resource.data.companyId == companyId;
    }

    function isValidCostCenterUpdate(companyId){
        return resource.data.companyId == companyId;
    }

    function isValidEmployeeCreate(companyId){
        return request.resource.data.companyId == companyId;
    }

    function isValidEmployeeUpdate(companyId){
        return resource.data.companyId == companyId;
    }

    function isValidPurchaseCreate(companyId){
        return request.resource.data.companyId == companyId;
    }

    function isValidPurchaseUpdate(companyId){
        return resource.data.companyId == companyId;
    }

    function isValidSaleCreate(companyId){
        return request.resource.data.companyId == companyId;
    }

    function isValidSaleUpdate(companyId){
        return resource.data.companyId == companyId;
    }

    function isValidFeeCreate(companyId){
        return request.resource.data.companyId == companyId;
    }

    function isValidFeeUpdate(companyId){
        return resource.data.companyId == companyId;
    }

    function isValidAccountGroupCreate(){
        return true;
    }

    function isValidAccountGroupUpdate(){
        return true;
    }

    function isValidInstitutionCreate(){
        return true;
    }

    function isValidInstitutionUpdate(){
        return true;
    }

    function isValidFamilyAllowanceParameterCreate(){
        return true;
    }

    function isValidFamilyAllowanceParameterUpdate(){
        return true;
    }

    function isValidTaxParameterCreate(){
        return true;
    }

    function isValidTaxParameterUpdate(){
        return true;
    }
    
    function isValidHealthEntityCreate(){
        return true;
    }

    function isValidHealthEntityUpdate(){
        return true;
    }

    function isValidAfpEntityCreate(){
        return true;
    }

    function isValidAfpEntityUpdate(){
        return true;
    }

  }
}