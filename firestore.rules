rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can manage their own profile.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - An authenticated user can read, update, or delete their profile if the userId matches their auth.uid.
     * @deny (create) - A user cannot create a profile for another user (userId != auth.uid).
     * @deny (get, update, delete) - A user cannot read, update, or delete another user's profile (userId != auth.uid).
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to create companies. Only the owner can manage (read, update, delete) the company.
     * @path /companies/{companyId}
     * @allow (create) - Any authenticated user can create a company. The rule validates that the `ownerId` field in the data matches the user's auth UID.
     * @allow (read, update, delete) - The owner of the company can read, update and delete. The rule validates that `resource.data.ownerId` matches the user's auth UID.
     * @deny (create) - An unauthenticated user can't create a company.
     * @deny (read, update, delete) - A user cannot read, update, or delete a company if they are not the owner.
     * @principle Enforces document ownership for writes, ensures only authenticated users can create companies.
     */
    match /companies/{companyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && exists(resource);
      }

      allow get: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Enforces that only the owner of the company can manage accounts.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (create, update, delete) - Only the owner of the company can create, update, or delete accounts.
     * @deny (create, update, delete) - A user who is not the company owner cannot create, update, or delete accounts.
     * @principle Restricts access to company-owned resources to only the owner.
     */
    match /companies/{companyId}/accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(companyId) {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }
      function isExistingOwner(companyId) {
        return isOwner(companyId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(companyId);
      allow list: if isSignedIn() && isOwner(companyId);
      allow create: if isSignedIn() && isOwner(companyId);
      allow update: if isSignedIn() && isExistingOwner(companyId);
      allow delete: if isSignedIn() && isExistingOwner(companyId);
    }

    /**
     * @description Enforces that only the owner of the company can manage vouchers.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (create, update, delete) - Only the owner of the company can create, update, or delete vouchers.
     * @deny (create, update, delete) - A user who is not the company owner cannot create, update, or delete vouchers.
     * @principle Restricts access to company-owned resources to only the owner.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(companyId) {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }

      function isExistingOwner(companyId) {
        return isOwner(companyId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(companyId);
      allow list: if isSignedIn() && isOwner(companyId);
      allow create: if isSignedIn() && isOwner(companyId);
      allow update: if isSignedIn() && isExistingOwner(companyId);
      allow delete: if isSignedIn() && isExistingOwner(companyId);
    }

    /**
     * @description Enforces that only the owner of the company can manage subjects.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (create, update, delete) - Only the owner of the company can create, update, or delete subjects.
     * @deny (create, update, delete) - A user who is not the company owner cannot create, update, or delete subjects.
     * @principle Restricts access to company-owned resources to only the owner.
     */
    match /companies/{companyId}/subjects/{subjectId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(companyId) {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }

      function isExistingOwner(companyId) {
        return isOwner(companyId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(companyId);
      allow list: if isSignedIn() && isOwner(companyId);
      allow create: if isSignedIn() && isOwner(companyId);
      allow update: if isSignedIn() && isExistingOwner(companyId);
      allow delete: if isSignedIn() && isExistingOwner(companyId);
    }

    /**
     * @description Enforces that only the owner of the company can manage cost centers.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (create, update, delete) - Only the owner of the company can create, update, or delete cost centers.
     * @deny (create, update, delete) - A user who is not the company owner cannot create, update, or delete cost centers.
     * @principle Restricts access to company-owned resources to only the owner.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(companyId) {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }

      function isExistingOwner(companyId) {
        return isOwner(companyId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(companyId);
      allow list: if isSignedIn() && isOwner(companyId);
      allow create: if isSignedIn() && isOwner(companyId);
      allow update: if isSignedIn() && isExistingOwner(companyId);
      allow delete: if isSignedIn() && isExistingOwner(companyId);
    }

    /**
     * @description Enforces that only the owner of the company can manage employees.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (create, update, delete) - Only the owner of the company can create, update, or delete employees.
     * @deny (create, update, delete) - A user who is not the company owner cannot create, update, or delete employees.
     * @principle Restricts access to company-owned resources to only the owner.
     */
    match /companies/{companyId}/employees/{employeeId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(companyId) {
          return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      }

      function isExistingOwner(companyId) {
        return isOwner(companyId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(companyId);
      allow list: if isSignedIn() && isOwner(companyId);
      allow create: if isSignedIn() && isOwner(companyId);
      allow update: if isSignedIn() && isExistingOwner(companyId);
      allow delete: if isSignedIn() && isExistingOwner(companyId);
    }

     /**
      * @description Enforces that only the owner of the company can manage purchases.
      * @path /companies/{companyId}/purchases/{purchaseId}
      * @allow (create, update, delete) - Only the owner of the company can create, update, or delete purchases.
      * @deny (create, update, delete) - A user who is not the company owner cannot create, update, or delete purchases.
      * @principle Restricts access to company-owned resources to only the owner.
      */
    match /companies/{companyId}/purchases/{purchaseId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(companyId) {
            return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
        }

        function isExistingOwner(companyId) {
            return isOwner(companyId) && exists(resource);
        }

        allow get: if isSignedIn() && isOwner(companyId);
        allow list: if isSignedIn() && isOwner(companyId);
        allow create: if isSignedIn() && isOwner(companyId);
        allow update: if isSignedIn() && isExistingOwner(companyId);
        allow delete: if isSignedIn() && isExistingOwner(companyId);
    }

    /**
     * @description Enforces that only the owner of the company can manage sales.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (create, update, delete) - Only the owner of the company can create, update, or delete sales.
     * @deny (create, update, delete) - A user who is not the company owner cannot create, update, or delete sales.
     * @principle Restricts access to company-owned resources to only the owner.
     */
    match /companies/{companyId}/sales/{saleId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(companyId) {
            return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
        }

        function isExistingOwner(companyId) {
            return isOwner(companyId) && exists(resource);
        }

        allow get: if isSignedIn() && isOwner(companyId);
        allow list: if isSignedIn() && isOwner(companyId);
        allow create: if isSignedIn() && isOwner(companyId);
        allow update: if isSignedIn() && isExistingOwner(companyId);
        allow delete: if isSignedIn() && isExistingOwner(companyId);
    }

    /**
     * @description Enforces that only the owner of the company can manage fees.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (create, update, delete) - Only the owner of the company can create, update, or delete fees.
     * @deny (create, update, delete) - A user who is not the company owner cannot create, update, or delete fees.
     * @principle Restricts access to company-owned resources to only the owner.
     */
    match /companies/{companyId}/fees/{feeId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(companyId) {
            return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
        }

        function isExistingOwner(companyId) {
            return isOwner(companyId) && exists(resource);
        }

        allow get: if isSignedIn() && isOwner(companyId);
        allow list: if isSignedIn() && isOwner(companyId);
        allow create: if isSignedIn() && isOwner(companyId);
        allow update: if isSignedIn() && isExistingOwner(companyId);
        allow delete: if isSignedIn() && isExistingOwner(companyId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their own account groups.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (create, update, delete) - Only the authenticated user can create, update, or delete their account groups.
     * @deny (create, update, delete) - A user cannot create, update, or delete another user's account groups.
     * @principle Restricts access to user-owned resources to only the owner.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && exists(resource);
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their own institutions.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (create, update, delete) - Only the authenticated user can create, update, or delete their institutions.
     * @deny (create, update, delete) - A user cannot create, update, or delete another user's institutions.
     * @principle Restricts access to user-owned resources to only the owner.
     */
    match /users/{userId}/institutions/{institutionId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && exists(resource);
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their own family allowance parameters.
     * @path /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (create, update, delete) - Only the authenticated user can create, update, or delete their family allowance parameters.
     * @deny (create, update, or delete) - A user cannot create, update, or delete another user's family allowance parameters.
     * @principle Restricts access to user-owned resources to only the owner.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their own tax parameters.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     * @allow (create, update, delete) - Only the authenticated user can create, update, or delete their tax parameters.
     * @deny (create, update, delete) - A user cannot create, update, or delete another user's tax parameters.
     * @principle Restricts access to user-owned resources to only the owner.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && exists(resource);
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their own health entities.
     * @path /users/{userId}/health-entities/{healthEntityId}
     * @allow (create, update, delete) - Only the authenticated user can create, update, or delete their health entities.
     * @deny (create, update, delete) - A user cannot create, update, or delete another user's health entities.
     * @principle Restricts access to user-owned resources to only the owner.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && exists(resource);
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their own AFP entities.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     * @allow (create, update, delete) - Only the authenticated user can create, update, or delete their AFP entities.
     * @deny (create, update, delete) - A user cannot create, update, or delete another user's AFP entities.
     * @principle Restricts access to user-owned resources to only the owner.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && exists(resource);
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}