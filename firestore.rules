/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data,
 *              and a company-based access model for company-related data.
 *              Users can only read and write their own profile data.
 *              Company data can only be accessed by users who are associated with the company.
 * @dataStructure
 *  /users/{userId} - User profiles, owned by the user.
 *  /companies/{companyId} - Companies, accessible to associated users.
 *  /companies/{companyId}/{collection} - Subcollections of companies, accessible to associated users.
 * @keySecurityDecisions
 *  - Users can only list their own data under `/users/{userId}`.
 *  - Listing of `/companies` is denied to prevent unauthorized discovery of companies.
 * @denormalizationForAuthorization
 *  - Company documents should denormalize user roles (e.g., `members: { userId: 'admin' }`) for efficient access control.
 *  - Company-owned documents have a `companyId` field to allow filtering by company.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the resource's owner ID.
     */
    function isResourceOwner(resourceOwnerId) {
      return isSignedIn() && request.auth.uid == resourceOwnerId;
    }

     /**
      * @description Checks if the authenticated user is associated with the given companyId.
      * It does this by verifying that the company exists and that the user's ID is present in the company's `companyIds` array.
      *
      */
    function isUserAssociatedWithCompany(companyId) {
        return exists(/databases/$(database)/documents/companies/$(companyId))
        && (get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid || request.auth.uid in get(/databases/$(database)/documents/companies/$(companyId)).data.members);
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and if the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Enforces that a field cannot be changed during an update.
     */
    function isImmutable(fieldName) {
        return request.resource.data[fieldName] == resource.data[fieldName];
    }

    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete their own profile.
     * @deny (create) - User cannot create a profile with a userId that does not match their auth.uid.
     * @deny (list) - Users cannot list all user profiles.
     * @principle Enforces document ownership, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for companies.
     * @path /companies/{companyId}
     * @allow (create) - Authenticated user can create a company.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete companies if they are associated with it.
     * @deny (list) - Users cannot list all companies.
     * @principle Enforces company-based access control.
     */
    match /companies/{companyId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }


    /**
     * @description Defines access rules for accounts within a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list, create, update, delete) - Users associated with the company can manage accounts.
     * @deny (create) - User cannot create an account with a companyId that they are not associated with.
     * @principle Enforces company-based access control for subcollections.
     */
    match /companies/{companyId}/accounts/{accountId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);
        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Defines access rules for vouchers within a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list, create, update, delete) - Users associated with the company can manage vouchers.
     * @deny (create) - User cannot create a voucher with a companyId that they are not associated with.
     * @principle Enforces company-based access control for subcollections.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);
        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Defines access rules for subjects within a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list, create, update, delete) - Users associated with the company can manage subjects.
     * @deny (create) - User cannot create a subject with a companyId that they are not associated with.
     * @principle Enforces company-based access control for subcollections.
     */
    match /companies/{companyId}/subjects/{subjectId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);
        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Defines access rules for cost centers within a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list, create, update, delete) - Users associated with the company can manage cost centers.
     * @deny (create) - User cannot create a cost center with a companyId that they are not associated with.
     * @principle Enforces company-based access control for subcollections.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);
        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Defines access rules for employees within a company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list, create, update, delete) - Users associated with the company can manage employees.
     * @deny (create) - User cannot create an employee with a companyId that they are not associated with.
     * @principle Enforces company-based access control for subcollections.
     */
    match /companies/{companyId}/employees/{employeeId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);
        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

      /**
     * @description Defines access rules for purchases within a company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list, create, update, delete) - Users associated with the company can manage purchases.
     * @deny (create) - User cannot create a purchase with a companyId that they are not associated with.
     * @principle Enforces company-based access control for subcollections.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);
        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Defines access rules for sales within a company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list, create, update, delete) - Users associated with the company can manage sales.
     * @deny (create) - User cannot create a sale with a companyId that they are not associated with.
     * @principle Enforces company-based access control for subcollections.
     */
    match /companies/{companyId}/sales/{saleId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);
        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Defines access rules for fees within a company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list, create, update, delete) - Users associated with the company can manage fees.
     * @deny (create) - User cannot create a fee with a companyId that they are not associated with.
     * @principle Enforces company-based access control for subcollections.
     */
    match /companies/{companyId}/fees/{feeId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);
        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Defines access rules for account groups within a user's data.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (get, list, create, update, delete) - The owner can manage their account groups.
     * @deny (create) - User cannot create an account group under another user's ID.
     * @principle Enforces user-ownership for private data.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for institutions within a user's data.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (get, list, create, update, delete) - The owner can manage their institutions.
     * @deny (create) - User cannot create an institution under another user's ID.
     * @principle Enforces user-ownership for private data.
     */
    match /users/{userId}/institutions/{institutionId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for family allowance parameters within a user's data.
     * @path /users/{userId}/family-allowance-parameters/{parameterId}
     * @allow (get, list, create, update, delete) - The owner can manage their family allowance parameters.
     * @deny (create) - User cannot create a parameter under another user's ID.
     * @principle Enforces user-ownership for private data.
     */
    match /users/{userId}/family-allowance-parameters/{parameterId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for tax parameters within a user's data.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     * @allow (get, list, create, update, delete) - The owner can manage their tax parameters.
     * @deny (create) - User cannot create a tax parameter under another user's ID.
     * @principle Enforces user-ownership for private data.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for health entities within a user's data.
     * @path /users/{userId}/health-entities/{healthEntityId}
     * @allow (get, list, create, update, delete) - The owner can manage their health entities.
     * @deny (create) - User cannot create a health entity under another user's ID.
     * @principle Enforces user-ownership for private data.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for AFP entities within a user's data.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     * @allow (get, list, create, update, delete) - The owner can manage their AFP entities.
     * @deny (create) - User cannot create an AFP entity under another user's ID.
     * @principle Enforces user-ownership for private data.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }
  }
}