/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data,
 * and allows company-level data to be managed by authorized users. It provides basic
 * role-based access control for administrative tasks.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /companies: Stores company data.
 * - /companies/{companyId}/...: Stores company-specific data like accounts, vouchers, etc.
 * - /users/{userId}/...: Stores user-specific data like account groups and institutions.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data under /users/{userId}.
 * - Users can only manage their own account groups and institutions under /users/{userId}/...
 * - Company data is accessible based on user role and association with the company (denormalized in the user profile).
 * - Listing user-specific collections (e.g., family-allowance-parameters) is restricted to the owning user.
 *
 * Denormalization for Authorization:
 * - User profiles contain an array of `companyIds` to quickly determine which companies a user is associated with.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Checks if the user has Admin role.
     */
    function isAdmin() {
        return isSignedIn() && (request.auth.token.role == 'Admin');
    }

    /**
     * @description Checks if the user is associated with a company based on their profile.
     */
    function isAssociatedWithCompany(companyId) {
        return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]) || isAdmin());
    }

    /**
     * @description Rule for user profile documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can get, update, or delete their own profile.
     * @deny (create) - A user cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (update, delete) - A user cannot update or delete another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for company documents.
     * @path /companies
     * @allow (get, list) - Anyone can read company data.
     * @allow (create) - Only an admin can create a company.
     * @allow (update, delete) - Only an admin can update or delete a company.
     * @deny (create) - Non-admins cannot create companies.
     * @deny (update, delete) - Non-admins cannot update or delete companies.
     * @principle Allows public read access but restricts writes to admins.
     */
    match /companies/{companyId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();

        /**
         * @description Rule for account documents within a company.
         * @path /companies/{companyId}/accounts
         */
        match /accounts/{accountId} {
          allow get, list: if isAssociatedWithCompany(companyId);
          allow create: if isAssociatedWithCompany(companyId);
          allow update: if isAssociatedWithCompany(companyId);
          allow delete: if isAssociatedWithCompany(companyId);
        }

        /**
         * @description Rule for voucher documents within a company.
         * @path /companies/{companyId}/vouchers
         */
        match /vouchers/{voucherId} {
          allow get, list: if isAssociatedWithCompany(companyId);
          allow create: if isAssociatedWithCompany(companyId);
          allow update: if isAssociatedWithCompany(companyId);
          allow delete: if isAssociatedWithCompany(companyId);
        }

        /**
         * @description Rule for subject documents within a company.
         * @path /companies/{companyId}/subjects
         */
        match /subjects/{subjectId} {
          allow get, list: if isAssociatedWithCompany(companyId);
          allow create: if isAssociatedWithCompany(companyId);
          allow update: if isAssociatedWithCompany(companyId);
          allow delete: if isAssociatedWithCompany(companyId);
        }

        /**
         * @description Rule for cost center documents within a company.
         * @path /companies/{companyId}/cost-centers
         */
        match /cost-centers/{costCenterId} {
          allow get, list: if isAssociatedWithCompany(companyId);
          allow create: if isAssociatedWithCompany(companyId);
          allow update: if isAssociatedWithCompany(companyId);
          allow delete: if isAssociatedWithCompany(companyId);
        }

        /**
         * @description Rule for employee documents within a company.
         * @path /companies/{companyId}/employees
         */
        match /employees/{employeeId} {
          allow get, list: if isAssociatedWithCompany(companyId);
          allow create: if isAssociatedWithCompany(companyId);
          allow update: if isAssociatedWithCompany(companyId);
          allow delete: if isAssociatedWithCompany(companyId);
        }
      
        /**
         * @description Rule for purchase documents within a company.
         * @path /companies/{companyId}/purchases
         */
        match /purchases/{purchaseId} {
          allow get, list: if isAssociatedWithCompany(companyId);
          allow create: if isAssociatedWithCompany(companyId);
          allow update: if isAssociatedWithCompany(companyId);
          allow delete: if isAssociatedWithCompany(companyId);
        }

        /**
         * @description Rule for sale documents within a company.
         * @path /companies/{companyId}/sales
         */
        match /sales/{saleId} {
          allow get, list: if isAssociatedWithCompany(companyId);
          allow create: if isAssociatedWithCompany(companyId);
          allow update: if isAssociatedWithCompany(companyId);
          allow delete: if isAssociatedWithCompany(companyId);
        }

        /**
         * @description Rule for fee documents within a company.
         * @path /companies/{companyId}/fees
         */
        match /fees/{feeId} {
          allow get, list: if isAssociatedWithCompany(companyId);
          allow create: if isAssociatedWithCompany(companyId);
          allow update: if isAssociatedWithCompany(companyId);
          allow delete: if isAssociatedWithCompany(companyId);
        }
    }

    /**
     * @description Rule for user-specific account groups.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (get, list, create, update, delete) - Only the user can manage their own account groups.
     * @deny (get, list, create, update, delete) - Other users cannot access or modify these groups.
     * @principle Enforces user-ownership of data.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for user-specific institutions.
     * @path /users/{userId}/institutions/{institutionId}
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for user-specific family allowance parameters.
     * @path /users/{userId}/family-allowance-parameters/{parameterId}
     * @allow (get, create, update, delete) - Only the user can manage their own parameters.
     * @deny (get, create, update, delete) - Other users cannot access or modify these parameters.
     * @principle Enforces user-ownership of data.
     */
    match /users/{userId}/family-allowance-parameters/{parameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for user-specific tax parameters.
     * @path /users/{userId}/tax-parameters/{parameterId}
     */
    match /users/{userId}/tax-parameters/{parameterId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for user-specific health entities.
     * @path /users/{userId}/health-entities/{healthEntityId}
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for user-specific AFP entities.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}