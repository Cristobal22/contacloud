rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Secures user profile data, allowing only the user to read and write their own profile.
     * @path: /users/{userId}
     * @allow: User 'user_abc' (create) can create their own profile if request.auth.uid == 'user_abc'.
     * @allow: User 'user_abc' (get) can read their own profile.
     * @allow: User 'user_abc' (update) can update their own profile if request.auth.uid == 'user_abc'.
     * @allow: User 'user_abc' (delete) can delete their own profile if request.auth.uid == 'user_abc'.
     * @deny: User 'user_xyz' cannot read, write, or delete user 'user_abc' profile.
     * @principle: Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Secures company data, allowing access to users associated with the company and denying to admins.
     * @path: /companies/{companyId}
     * @allow: User with companyId in their profile can read the company data.
     * @allow: User with companyId in their profile can create the company data if they are the owner.
     * @deny: User without companyId in their profile cannot read or write the company data.
     * @deny: Admin user cannot access the company data.
     * @principle: Restricts access to company data based on user association.
     */
    match /companies/{companyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCompanyUser(companyId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isCompanyUser(companyId);
      allow list: if false;
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isCompanyUser(companyId);
      allow delete: if isCompanyUser(companyId);
    }

    /**
     * @description: Secures accounts sub-collection, allowing access to users associated with the parent company.
     * @path: /companies/{companyId}/accounts/{accountId}
     * @allow: User with companyId in their profile can read an account.
     * @allow: User with companyId in their profile can create, update, and delete accounts.
     * @deny: User without companyId in their profile cannot read or write accounts.
     * @principle: Restricts access to accounts based on company association.
     */
    match /companies/{companyId}/accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCompanyUser(companyId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isCompanyUser(companyId);
      allow list: if isCompanyUser(companyId);
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isCompanyUser(companyId);
      allow delete: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description: Secures vouchers sub-collection, allowing access to users associated with the parent company.
     * @path: /companies/{companyId}/vouchers/{voucherId}
     * @allow: User with companyId in their profile can read a voucher.
     * @allow: User with companyId in their profile can create, update, and delete vouchers.
     * @deny: User without companyId in their profile cannot read or write vouchers.
     * @principle: Restricts access to vouchers based on company association.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCompanyUser(companyId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isCompanyUser(companyId);
      allow list: if isCompanyUser(companyId);
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isCompanyUser(companyId);
      allow delete: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description: Secures subjects sub-collection, allowing access to users associated with the parent company.
     * @path: /companies/{companyId}/subjects/{subjectId}
     * @allow: User with companyId in their profile can read a subject.
     * @allow: User with companyId in their profile can create, update, and delete subjects.
     * @deny: User without companyId in their profile cannot read or write subjects.
     * @principle: Restricts access to subjects based on company association.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCompanyUser(companyId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isCompanyUser(companyId);
      allow list: if isCompanyUser(companyId);
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isCompanyUser(companyId);
      allow delete: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description: Secures cost centers sub-collection, allowing access to users associated with the parent company.
     * @path: /companies/{companyId}/cost-centers/{costCenterId}
     * @allow: User with companyId in their profile can read a cost center.
     * @allow: User with companyId in their profile can create, update, and delete cost centers.
     * @deny: User without companyId in their profile cannot read or write cost centers.
     * @principle: Restricts access to cost centers based on company association.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCompanyUser(companyId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isCompanyUser(companyId);
      allow list: if isCompanyUser(companyId);
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isCompanyUser(companyId);
      allow delete: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description: Secures employees sub-collection, allowing access to users associated with the parent company.
     * @path: /companies/{companyId}/employees/{employeeId}
     * @allow: User with companyId in their profile can read an employee.
     * @allow: User with companyId in their profile can create, update, and delete employees.
     * @deny: User without companyId in their profile cannot read or write employees.
     * @principle: Restricts access to employees based on company association.
     */
    match /companies/{companyId}/employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCompanyUser(companyId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isCompanyUser(companyId);
      allow list: if isCompanyUser(companyId);
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isCompanyUser(companyId);
      allow delete: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description: Secures payrolls sub-collection, allowing access to users associated with the parent company.
     * @path: /companies/{companyId}/payrolls/{payrollId}
     * @allow: User with companyId in their profile can read a payroll.
     * @allow: User with companyId in their profile can create, update, and delete payrolls.
     * @deny: User without companyId in their profile cannot read or write payrolls.
     * @principle: Restricts access to payrolls based on company association.
     */
    match /companies/{companyId}/payrolls/{payrollId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCompanyUser(companyId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isCompanyUser(companyId);
      allow list: if isCompanyUser(companyId);
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isCompanyUser(companyId);
      allow delete: if isSignedIn() && isCompanyUser(companyId);
    }

     /**
     * @description: Secures purchases sub-collection, allowing access to users associated with the parent company.
     * @path: /companies/{companyId}/purchases/{purchaseId}
     * @allow: User with companyId in their profile can read a purchase.
     * @allow: User with companyId in their profile can create, update, and delete purchases.
     * @deny: User without companyId in their profile cannot read or write purchases.
     * @principle: Restricts access to purchases based on company association.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCompanyUser(companyId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isCompanyUser(companyId);
      allow list: if isCompanyUser(companyId);
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isCompanyUser(companyId);
      allow delete: if isSignedIn() && isCompanyUser(companyId);
    }

    /**
     * @description: Secures sales sub-collection, allowing access to users associated with the parent company.
     * @path: /companies/{companyId}/sales/{saleId}
     * @allow: User with companyId in their profile can read a sale.
     * @allow: User with companyId in their profile can create, update, and delete sales.
     * @deny: User without companyId in their profile cannot read or write sales.
     * @principle: Restricts access to sales based on company association.
     */
    match /companies/{companyId}/sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCompanyUser(companyId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isCompanyUser(companyId);
      allow list: if isCompanyUser(companyId);
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isCompanyUser(companyId);
      allow delete: if isCompanyUser(companyId);
    }

    /**
     * @description: Secures fees sub-collection, allowing access to users associated with the parent company.
     * @path: /companies/{companyId}/fees/{feeId}
     * @allow: User with companyId in their profile can read a fee.
     * @allow: User with companyId in their profile can create, update, and delete fees.
     * @deny: User without companyId in their profile cannot read or write fees.
     * @principle: Restricts access to fees based on company association.
     */
    match /companies/{companyId}/fees/{feeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCompanyUser(companyId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isCompanyUser(companyId);
      allow list: if isCompanyUser(companyId);
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isSignedIn() && isCompanyUser(companyId);
      allow delete: if isCompanyUser(companyId);
    }

    /**
     * @description: Secures company-specific economic indicators, allowing access to users associated with the parent company.
     * @path: /companies/{companyId}/economic-indicators/{indicatorId}
     * @allow: User with companyId in their profile can read an indicator.
     * @allow: User with companyId in their profile can create, update, and delete indicators.
     * @deny: User without companyId in their profile cannot read or write indicators.
     * @principle: Restricts access to company-specific economic indicators based on company association.
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCompanyUser(companyId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isCompanyUser(companyId);
      allow list: if isCompanyUser(companyId);
      allow create: if isSignedIn() && isCompanyUser(companyId);
      allow update: if isCompanyUser(companyId);
      allow delete: if isCompanyUser(companyId);
    }
    
    /**
     * @description: Secures account groups for a specific user, allowing only the owner to access them.
     * @path: /users/{userId}/account-groups/{groupId}
     * @allow: The owner of the user ID can read, create, update and delete their own account groups.
     * @deny: Other users cannot access the account groups.
     * @principle: Enforces strict ownership of account groups.
     */
    match /users/{userId}/account-groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Makes global economic indicators publicly readable.
     * @path: /economic-indicators/{indicatorId}
     * @allow: Any user can read economic indicators.
     * @deny: No one can create, update, or delete economic indicators (write access is disabled).
     * @principle: Allows public read access for global data, but restricts write access.
     */
    match /economic-indicators/{indicatorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description: Makes health entities publicly readable.
     * @path: /health-entities/{entityId}
     * @allow: Any user can read health entities.
     * @deny: No one can create, update, or delete health entities (write access is disabled).
     * @principle: Allows public read access for global data, but restricts write access.
     */
    match /health-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description: Makes AFP entities publicly readable.
     * @path: /afp-entities/{entityId}
     * @allow: Any user can read AFP entities.
     * @deny: No one can create, update, or delete AFP entities (write access is disabled).
     * @principle: Allows public read access for global data, but restricts write access.
     */
    match /afp-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description: Makes family allowance parameters publicly readable.
     * @path: /family-allowance-parameters/{paramId}
     * @allow: Any user can read family allowance parameters.
     * @deny: No one can create, update, or delete family allowance parameters (write access is disabled).
     * @principle: Allows public read access for global data, but restricts write access.
     */
    match /family-allowance-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description: Makes tax parameters publicly readable.
     * @path: /tax-parameters/{paramId}
     * @allow: Any user can read tax parameters.
     * @deny: No one can create, update, or delete tax parameters (write access is disabled).
     * @principle: Allows public read access for global data, but restricts write access.
     */
    match /tax-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description: Makes institutions publicly readable.
     * @path: /institutions/{institutionId}
     * @allow: Any user can read institutions.
     * @deny: No one can create, update, or delete institutions (write access is disabled).
     * @principle: Allows public read access for global data, but restricts write access.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}