rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document.
     * @deny (create) User with UID 'user456' cannot create a profile document for 'user123'.
     * @allow (get) User with UID 'user123' can retrieve their profile document.
     * @deny (get) User with UID 'user456' cannot retrieve the profile document for 'user123'.
     * @allow (update) User with UID 'user123' can update their profile document.
     * @deny (update) User with UID 'user456' cannot update the profile document for 'user123'.
     * @allow (delete) User with UID 'user123' can delete their profile document.
     * @deny (delete) User with UID 'user456' cannot delete the profile document for 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to company documents.
     * @path /companies/{companyId}
     * @allow (get) Any signed-in user can get a company document.
     * @allow (list) Any signed-in user can list company documents.
     * @deny (create) No one can create company documents (creation should be handled server-side).
     * @deny (update) No one can update company documents without being an admin.
     * @deny (delete) No one can delete company documents without being an admin.
     * @principle Allows public read access, but restricts creation, update, and deletion.
     */
    match /companies/{companyId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to account documents within a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get) Any signed-in user can get an account document within a company.
     * @allow (list) Any signed-in user can list account documents within a company.
     * @deny (create) No one can create account documents (creation should be handled server-side).
     * @deny (update) No one can update account documents without being an admin.
     * @deny (delete) No one can delete account documents without being an admin.
     * @principle Allows public read access within a company, but restricts writes.
     */
    match /companies/{companyId}/accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to voucher documents within a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get) Any signed-in user can get a voucher document within a company.
     * @allow (list) Any signed-in user can list voucher documents within a company.
     * @deny (create) No one can create voucher documents (creation should be handled server-side).
     * @deny (update) No one can update voucher documents without being an admin.
     * @deny (delete) No one can delete voucher documents without being an admin.
     * @principle Allows public read access within a company, but restricts writes.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to subject documents within a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get) Any signed-in user can get a subject document within a company.
     * @allow (list) Any signed-in user can list subject documents within a company.
     * @deny (create) No one can create subject documents (creation should be handled server-side).
     * @deny (update) No one can update subject documents without being an admin.
     * @deny (delete) No one can delete subject documents without being an admin.
     * @principle Allows public read access within a company, but restricts writes.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to cost center documents within a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get) Any signed-in user can get a cost center document within a company.
     * @allow (list) Any signed-in user can list cost center documents within a company.
     * @deny (create) No one can create cost center documents (creation should be handled server-side).
     * @deny (update) No one can update cost center documents without being an admin.
     * @deny (delete) No one can delete cost center documents without being an admin.
     * @principle Allows public read access within a company, but restricts writes.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to employee documents within a company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get) Any signed-in user can get an employee document within a company.
     * @allow (list) Any signed-in user can list employee documents within a company.
     * @deny (create) No one can create employee documents (creation should be handled server-side).
     * @deny (update) No one can update employee documents without being an admin.
     * @deny (delete) No one can delete employee documents without being an admin.
     * @principle Allows public read access within a company, but restricts writes.
     */
    match /companies/{companyId}/employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
        /**
         * @description Controls access to purchase documents within a company.
         * @path /companies/{companyId}/purchases/{purchaseId}
         * @allow (get) Any signed-in user can get a purchase document within a company.
         * @allow (list) Any signed-in user can list purchase documents within a company.
         * @deny (create) No one can create purchase documents (creation should be handled server-side).
         * @deny (update) No one can update purchase documents without being an admin.
         * @deny (delete) No one can delete purchase documents without being an admin.
         * @principle Allows public read access within a company, but restricts writes.
         */
        match /companies/{companyId}/purchases/{purchaseId} {
          function isSignedIn() {
            return request.auth != null;
          }
          allow get: if isSignedIn();
          allow list: if false;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
        }

        /**
         * @description Controls access to sales documents within a company.
         * @path /companies/{companyId}/sales/{saleId}
         * @allow (get) Any signed-in user can get a sale document within a company.
         * @allow (list) Any signed-in user can list sales documents within a company.
         * @deny (create) No one can create sales documents (creation should be handled server-side).
         * @deny (update) No one can update sales documents without being an admin.
         * @deny (delete) No one can delete sales documents without being an admin.
         * @principle Allows public read access within a company, but restricts writes.
         */
        match /companies/{companyId}/sales/{saleId} {
          function isSignedIn() {
            return request.auth != null;
          }
          allow get: if isSignedIn();
          allow list: if false;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
        }

        /**
         * @description Controls access to fee documents within a company.
         * @path /companies/{companyId}/fees/{feeId}
         * @allow (get) Any signed-in user can get a fee document within a company.
         * @allow (list) Any signed-in user can list fee documents within a company.
         * @deny (create) No one can create fee documents (creation should be handled server-side).
         * @deny (update) No one can update fee documents without being an admin.
         * @deny (delete) No one can delete fee documents without being an admin.
         * @principle Allows public read access within a company, but restricts writes.
         */
        match /companies/{companyId}/fees/{feeId} {
          function isSignedIn() {
            return request.auth != null;
          }
          allow get: if isSignedIn();
          allow list: if false;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
        }

    /**
     * @description Controls access to account group documents within a user's scope.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (create) User with UID 'user123' can create an account group document for themselves.
     * @deny (create) User with UID 'user456' cannot create an account group document for 'user123'.
     * @allow (get) User with UID 'user123' can retrieve their account group document.
     * @deny (get) User with UID 'user456' cannot retrieve the account group document for 'user123'.
     * @allow (update) User with UID 'user123' can update their account group document.
     * @deny (update) User with UID 'user456' cannot update the account group document for 'user123'.
     * @allow (delete) User with UID 'user123' can delete their account group document.
     * @deny (delete) User with UID 'user456' cannot delete the account group document for 'user123'.
     * @principle Enforces document ownership for all operations on account groups.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/account-groups/$(accountGroupId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to institution documents within a user's scope.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (create) User with UID 'user123' can create an institution document for themselves.
     * @deny (create) User with UID 'user456' cannot create an institution document for 'user123'.
     * @allow (get) User with UID 'user123' can retrieve their institution document.
     * @deny (get) User with UID 'user456' cannot retrieve the institution document for 'user123'.
     * @allow (update) User with UID 'user123' can update their institution document.
     * @deny (update) User with UID 'user456' cannot update the institution document for 'user123'.
     * @allow (delete) User with UID 'user123' can delete their institution document.
     * @deny (delete) User with UID 'user456' cannot delete the institution document for 'user123'.
     * @principle Enforces document ownership for all operations on institutions.
     */
    match /users/{userId}/institutions/{institutionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/institutions/$(institutionId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to family allowance parameter documents within a user's scope.
     * @path /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (create) User with UID 'user123' can create a family allowance parameter document for themselves.
     * @deny (create) User with UID 'user456' cannot create a family allowance parameter document for 'user123'.
     * @allow (get) User with UID 'user123' can retrieve their family allowance parameter document.
     * @deny (get) User with UID 'user456' cannot retrieve the family allowance parameter document for 'user123'.
     * @allow (update) User with UID 'user123' can update their family allowance parameter document.
     * @deny (update) User with UID 'user456' cannot update the family allowance parameter document for 'user123'.
     * @allow (delete) User with UID 'user123' can delete their family allowance parameter document.
     * @deny (delete) User with UID 'user456' cannot delete the family allowance parameter document for 'user123'.
     * @principle Enforces document ownership for all operations on family allowance parameters.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/family-allowance-parameters/$(familyAllowanceParameterId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to tax parameter documents within a user's scope.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     * @allow (create) User with UID 'user123' can create a tax parameter document for themselves.
     * @deny (create) User with UID 'user456' cannot create a tax parameter document for 'user123'.
     * @allow (get) User with UID 'user123' can retrieve their tax parameter document.
     * @deny (get) User with UID 'user456' cannot retrieve the tax parameter document for 'user123'.
     * @allow (update) User with UID 'user123' can update their tax parameter document.
     * @deny (update) User with UID 'user456' cannot update the tax parameter document for 'user123'.
     * @allow (delete) User with UID 'user123' can delete their tax parameter document.
     * @deny (delete) User with UID 'user456' cannot delete the tax parameter document for 'user123'.
     * @principle Enforces document ownership for all operations on tax parameters.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/tax-parameters/$(taxParameterId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

        /**
         * @description Controls access to health entity documents within a user's scope.
         * @path /users/{userId}/health-entities/{healthEntityId}
         * @allow (create) User with UID 'user123' can create a health entity document for themselves.
         * @deny (create) User with UID 'user456' cannot create a health entity document for 'user123'.
         * @allow (get) User with UID 'user123' can retrieve their health entity document.
         * @deny (get) User with UID 'user456' cannot retrieve the health entity document for 'user123'.
         * @allow (update) User with UID 'user123' can update their health entity document.
         * @deny (update) User with UID 'user456' cannot update the health entity document for 'user123'.
         * @allow (delete) User with UID 'user123' can delete their health entity document.
         * @deny (delete) User with UID 'user456' cannot delete the health entity document for 'user123'.
         * @principle Enforces document ownership for all operations on health entities.
         */
        match /users/{userId}/health-entities/{healthEntityId} {
          function isSignedIn() {
            return request.auth != null;
          }
          function isOwner(userId) {
            return request.auth.uid == userId;
          }
          function isExistingOwner(userId) {
            return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/health-entities/$(healthEntityId));
          }

          allow get: if isSignedIn() && isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isExistingOwner(userId);
          allow delete: if isSignedIn() && isExistingOwner(userId);
        }

        /**
         * @description Controls access to AFP entity documents within a user's scope.
         * @path /users/{userId}/afp-entities/{afpEntityId}
         * @allow (create) User with UID 'user123' can create an AFP entity document for themselves.
         * @deny (create) User with UID 'user456' cannot create an AFP entity document for 'user123'.
         * @allow (get) User with UID 'user123' can retrieve their AFP entity document.
         * @deny (get) User with UID 'user456' cannot retrieve the AFP entity document for 'user123'.
         * @allow (update) User with UID 'user123' can update their AFP entity document.
         * @deny (update) User with UID 'user456' cannot update the AFP entity document for 'user123'.
         * @allow (delete) User with UID 'user123' can delete their AFP entity document.
         * @deny (delete) User with UID 'user456' cannot delete the AFP entity document for 'user123'.
         * @principle Enforces document ownership for all operations on AFP entities.
         */
        match /users/{userId}/afp-entities/{afpEntityId} {
          function isSignedIn() {
            return request.auth != null;
          }
          function isOwner(userId) {
            return request.auth.uid == userId;
          }
          function isExistingOwner(userId) {
            return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/afp-entities/$(afpEntityId));
          }

          allow get: if isSignedIn() && isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isExistingOwner(userId);
          allow delete: if isSignedIn() && isExistingOwner(userId);
        }
  }
}