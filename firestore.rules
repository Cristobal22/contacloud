/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data,
 *              and a company-based access model for company data. User profiles are
 *              readable only by the authenticated user and writable only by themselves on creation.
 *              Company data is accessible to users associated with that company.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile data, accessible only by the user.
 * - /companies/{companyId}: Stores company data, accessible to associated users.
 * - /companies/{companyId}/{subcollection}: Subcollections under companies (accounts, vouchers, etc.)
 *   are accessible to users associated with the respective company.
 *
 * @keySecurityDecisions
 * - User listing is disallowed for privacy.
 * - Company listing is implicitly allowed (no specific rule denies it).
 * - Default security posture for ambiguous relationships is strict owner-only access.
 * - Authorization is based on checking user association with companies.
 *
 * @denormalizationForAuthorization
 *   User documents contain an array of `companyIds`. This allows rules to quickly check if a user
 *   is authorized to access data within a specific company without requiring additional reads.
 *
 * @structuralSegregation
 *   User-specific settings (account groups, institutions, parameters) are stored in user-specific
 *   subcollections under `/users/{userId}` to ensure data privacy and efficient querying.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is associated with the company.
     */
    function isUserAssociatedWithCompany(companyId) {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     *              This combines the ownership check with an existence check,
     *              which is crucial for update and delete operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    match /users/{userId} {
      /**
       * @description Allows read and write access only to the user with the matching ID.
       * @path /users/{userId}
       * @allow (get, list) if isSignedIn() && request.auth.uid == userId;
       * @allow (create) if request.auth.uid == userId;
       * @deny (create) if request.auth.uid != userId;
       * @allow (update, delete) if isSignedIn() && request.auth.uid == userId && resource != null;
       * @deny (update, delete) if !isSignedIn() || request.auth.uid != userId || resource == null;
       * @principle Enforces document ownership for writes.
       */
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    match /companies/{companyId} {
      /**
       * @description Allows read access to all authenticated users and write access to users associated with the company.
       * @path /companies/{companyId}
       * @allow (get, list) if true;
       * @allow (create) if isSignedIn(); // Assuming any signed-in user can create a company
       * @allow (update, delete) if isUserAssociatedWithCompany(companyId) && resource != null;
       * @deny (update, delete) if !isUserAssociatedWithCompany(companyId) || resource == null;
       * @principle Allows company data access to authorized users.
       */
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    match /companies/{companyId}/accounts/{accountId} {
      /**
       * @description Allows read and write access to accounts for users associated with the company.
       * @path /companies/{companyId}/accounts/{accountId}
       * @allow (get, list) if isUserAssociatedWithCompany(companyId);
       * @allow (create, update, delete) if isUserAssociatedWithCompany(companyId);
       * @principle Restricts account access to authorized company users.
       */
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    match /companies/{companyId}/vouchers/{voucherId} {
      /**
       * @description Allows read and write access to vouchers for users associated with the company.
       * @path /companies/{companyId}/vouchers/{voucherId}
       * @allow (get, list) if isUserAssociatedWithCompany(companyId);
       * @allow (create, update, delete) if isUserAssociatedWithCompany(companyId);
       * @principle Restricts voucher access to authorized company users.
       */
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    match /companies/{companyId}/subjects/{subjectId} {
      /**
       * @description Allows read and write access to subjects for users associated with the company.
       * @path /companies/{companyId}/subjects/{subjectId}
       * @allow (get, list) if isUserAssociatedWithCompany(companyId);
       * @allow (create, update, delete) if isUserAssociatedWithCompany(companyId);
       * @principle Restricts subject access to authorized company users.
       */
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    match /companies/{companyId}/cost-centers/{costCenterId} {
      /**
       * @description Allows read and write access to cost centers for users associated with the company.
       * @path /companies/{companyId}/cost-centers/{costCenterId}
       * @allow (get, list) if isUserAssociatedWithCompany(companyId);
       * @allow (create, update, delete) if isUserAssociatedWithCompany(companyId);
       * @principle Restricts cost center access to authorized company users.
       */
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    match /companies/{companyId}/employees/{employeeId} {
      /**
       * @description Allows read and write access to employees for users associated with the company.
       * @path /companies/{companyId}/employees/{employeeId}
       * @allow (get, list) if isUserAssociatedWithCompany(companyId);
       * @allow (create, update, delete) if isUserAssociatedWithCompany(companyId);
       * @principle Restricts employee access to authorized company users.
       */
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

      match /companies/{companyId}/purchases/{purchaseId} {
          /**
           * @description Allows read and write access to purchases for users associated with the company.
           * @path /companies/{companyId}/purchases/{purchaseId}
           * @allow (get, list) if isUserAssociatedWithCompany(companyId);
           * @allow (create, update, delete) if isUserAssociatedWithCompany(companyId);
           * @principle Restricts purchase access to authorized company users.
           */
          allow get: if isUserAssociatedWithCompany(companyId);
          allow list: if isUserAssociatedWithCompany(companyId);
          allow create: if isUserAssociatedWithCompany(companyId);
          allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
          allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
      }

      match /companies/{companyId}/sales/{saleId} {
          /**
           * @description Allows read and write access to sales for users associated with the company.
           * @path /companies/{companyId}/sales/{saleId}
           * @allow (get, list) if isUserAssociatedWithCompany(companyId);
           * @allow (create, update, delete) if isUserAssociatedWithCompany(companyId);
           * @principle Restricts sale access to authorized company users.
           */
          allow get: if isUserAssociatedWithCompany(companyId);
          allow list: if isUserAssociatedWithCompany(companyId);
          allow create: if isUserAssociatedWithCompany(companyId);
          allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
          allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
      }

      match /companies/{companyId}/fees/{feeId} {
          /**
           * @description Allows read and write access to fees for users associated with the company.
           * @path /companies/{companyId}/fees/{feeId}
           * @allow (get, list) if isUserAssociatedWithCompany(companyId);
           * @allow (create, update, delete) if isUserAssociatedWithCompany(companyId);
           * @principle Restricts fee access to authorized company users.
           */
          allow get: if isUserAssociatedWithCompany(companyId);
          allow list: if isUserAssociatedWithCompany(companyId);
          allow create: if isUserAssociatedWithCompany(companyId);
          allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
          allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
      }

      match /users/{userId}/account-groups/{accountGroupId} {
          /**
           * @description Allows read and write access to account groups for the specific user.
           * @path /users/{userId}/account-groups/{accountGroupId}
           * @allow (get, list) if isOwner(userId);
           * @allow (create, update, delete) if isOwner(userId);
           * @principle Restricts account group access to the owner user.
           */
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
      }

      match /users/{userId}/institutions/{institutionId} {
          /**
           * @description Allows read and write access to institutions for the specific user.
           * @path /users/{userId}/institutions/{institutionId}
           * @allow (get, list) if isOwner(userId);
           * @allow (create, update, delete) if isOwner(userId);
           * @principle Restricts institution access to the owner user.
           */
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
      }

      match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
          /**
           * @description Allows read and write access to family allowance parameters for the specific user.
           * @path /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId}
           * @allow (get, list) if isOwner(userId);
           * @allow (create, update, delete) if isOwner(userId);
           * @principle Restricts family allowance parameter access to the owner user.
           */
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
      }

      match /users/{userId}/tax-parameters/{taxParameterId} {
          /**
           * @description Allows read and write access to tax parameters for the specific user.
           * @path /users/{userId}/tax-parameters/{taxParameterId}
           * @allow (get, list) if isOwner(userId);
           * @allow (create, update, delete) if isOwner(userId);
           * @principle Restricts tax parameter access to the owner user.
           */
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
      }

       match /users/{userId}/health-entities/{healthEntityId} {
            /**
             * @description Allows read and write access to health entities for the specific user.
             * @path /users/{userId}/health-entities/{healthEntityId}
             * @allow (get, list) if isOwner(userId);
             * @allow (create, update, delete) if isOwner(userId);
             * @principle Restricts health entity access to the owner user.
             */
            allow get: if isOwner(userId);
            allow list: if isOwner(userId);
            allow create: if isOwner(userId);
            allow update: if isExistingOwner(userId);
            allow delete: if isExistingOwner(userId);
        }

        match /users/{userId}/afp-entities/{afpEntityId} {
            /**
             * @description Allows read and write access to AFP entities for the specific user.
             * @path /users/{userId}/afp-entities/{afpEntityId}
             * @allow (get, list) if isOwner(userId);
             * @allow (create, update, delete) if isOwner(userId);
             * @principle Restricts AFP entity access to the owner user.
             */
            allow get: if isOwner(userId);
            allow list: if isOwner(userId);
            allow create: if isOwner(userId);
            allow update: if isExistingOwner(userId);
            allow delete: if isExistingOwner(userId);
        }
  }
}