/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data,
 *              and a shared access model for companies and their related data. Only authenticated
 *              users can access the database. Users can only read and write their own profile data.
 *              Companies are top-level documents. Only users associated with a company (as specified in their `companyIds` array)
 *              can read and write company data, including subcollections like accounts, vouchers, etc.
 *
 * @dataStructure
 *  /users/{userId} - User profile data, owned by the user.
 *  /companies/{companyId} - Company data, accessible to users in the company.
 *  /companies/{companyId}/{subcollection} - Subcollections for company-specific data.
 *  /users/{userId}/{collection} - Subcollections for user-specific settings and configuration.
 *
 * @keySecurityDecisions
 *  - Users can only manage their own profiles.
 *  - Users can only manage companies they are associated with through their `companyIds` array.
 *  - Listing of companies is disallowed to prevent unauthorized data access.
 *
 * @denormalizationForAuthorization
 *  - User profiles contain a `companyIds` array to quickly determine which companies a user can access. This avoids the need to query separate membership collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the user profile
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is associated with the company
    function isUserAssociatedWithCompany(companyId) {
        return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
    }

    // Helper function to check if the user is associated with the company for list operation
    function isUserAssociatedWithAnyCompany() {
        return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).size() > 0;
    }

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is signed in and owns the profile.
     * @deny (get, create, update, delete) if the user is not signed in or does not own the profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; //No listing of users

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users associated with a company to read and write company data.
     * @path /companies/{companyId}
     * @allow (get, create, update, delete) if the user is signed in and is associated with the company.
     * @deny (get, create, update, delete) if the user is not signed in or is not associated with the company.
     * @principle Enforces company-based access control.
     */
    match /companies/{companyId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if false; //Prevent listing of all companies

        allow create: if isUserAssociatedWithAnyCompany();
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Allows users associated with a company to read and write accounts for that company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, create, update, delete) if the user is signed in and is associated with the company.
     * @deny (get, create, update, delete) if the user is not signed in or is not associated with the company.
     * @principle Enforces company-based access control for accounts.
     */
    match /companies/{companyId}/accounts/{accountId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);

        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Allows users associated with a company to read and write vouchers for that company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, create, update, delete) if the user is signed in and is associated with the company.
     * @deny (get, create, update, delete) if the user is not signed in or is not associated with the company.
     * @principle Enforces company-based access control for vouchers.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);

      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId);
      allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Allows users associated with a company to read and write subjects for that company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, create, update, delete) if the user is signed in and is associated with the company.
     * @deny (get, create, update, delete) if the user is not signed in or is not associated with the company.
     * @principle Enforces company-based access control for subjects.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);

      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId);
      allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Allows users associated with a company to read and write cost centers for that company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, create, update, delete) if the user is signed in and is associated with the company.
     * @deny (get, create, update, delete) if the user is not signed in or is not associated with the company.
     * @principle Enforces company-based access control for cost centers.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);

        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Allows users associated with a company to read and write employees for that company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, create, update, delete) if the user is signed in and is associated with the company.
     * @deny (get, create, update, delete) if the user is not signed in or is not associated with the company.
     * @principle Enforces company-based access control for employees.
     */
    match /companies/{companyId}/employees/{employeeId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);

        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Allows users associated with a company to read and write purchases for that company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, create, update, delete) if the user is signed in and is associated with the company.
     * @deny (get, create, update, delete) if the user is not signed in or is not associated with the company.
     * @principle Enforces company-based access control for purchases.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);

        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Allows users associated with a company to read and write sales for that company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, create, update, delete) if the user is signed in and is associated with the company.
     * @deny (get, create, update, delete) if the user is not signed in or is not associated with the company.
     * @principle Enforces company-based access control for sales.
     */
    match /companies/{companyId}/sales/{saleId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);

        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Allows users associated with a company to read and write fees for that company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, create, update, delete) if the user is signed in and is associated with the company.
     * @deny (get, create, update, delete) if the user is not signed in or is not associated with the company.
     * @principle Enforces company-based access control for fees.
     */
    match /companies/{companyId}/fees/{feeId} {
        allow get: if isUserAssociatedWithCompany(companyId);
        allow list: if isUserAssociatedWithCompany(companyId);

        allow create: if isUserAssociatedWithCompany(companyId);
        allow update: if isUserAssociatedWithCompany(companyId);
        allow delete: if isUserAssociatedWithCompany(companyId);
    }

    /**
     * @description Allows users to read and write their own account groups.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (get, create, update, delete) if the user is signed in and owns the account group.
     * @deny (get, create, update, delete) if the user is not signed in or does not own the account group.
     * @principle Enforces document ownership for account groups.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to read and write their own institutions.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (get, create, update, delete) if the user is signed in and owns the institution.
     * @deny (get, create, update, delete) if the user is not signed in or does not own the institution.
     * @principle Enforces document ownership for institutions.
     */
    match /users/{userId}/institutions/{institutionId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);

        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to read and write their own family allowance parameters.
     * @path /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (get, create, update, delete) if the user is signed in and owns the parameter.
     * @deny (get, create, update, delete) if the user is not signed in or does not own the parameter.
     * @principle Enforces document ownership for family allowance parameters.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);

        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to read and write their own tax parameters.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     * @allow (get, create, update, delete) if the user is signed in and owns the parameter.
     * @deny (get, create, update, delete) if the user is not signed in or does not own the parameter.
     * @principle Enforces document ownership for tax parameters.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);

        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to read and write their own health entities.
     * @path /users/{userId}/health-entities/{healthEntityId}
     * @allow (get, create, update, delete) if the user is signed in and owns the entity.
     * @deny (get, create, update, delete) if the user is not signed in or does not own the entity.
     * @principle Enforces document ownership for health entities.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);

        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to read and write their own AFP entities.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     * @allow (get, create, update, delete) if the user is signed in and owns the entity.
     * @deny (get, create, update, delete) if the user is not signed in or does not own the entity.
     * @principle Enforces document ownership for AFP entities.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);

        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}