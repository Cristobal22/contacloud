rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own profile (auth.uid == userId).
     * @allow (get, update, delete) If the user is the owner of the profile (auth.uid == userId).
     * @deny (create, get, list, update, delete) If the user is not authenticated.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the companies collection.
     * @path /companies
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read company data.
     */
    match /companies {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to accounts subcollection of a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) If the user is authenticated and the company exists.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read accounts data for a specific company.
     */
    match /companies/{companyId}/accounts/{accountId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the vouchers subcollection of a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read vouchers data for a specific company.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the subjects subcollection of a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read subjects data for a specific company.
     */
    match /companies/{companyId}/subjects/{subjectId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the cost-centers subcollection of a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read cost-centers data for a specific company.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the employees subcollection of a company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read employees data for a specific company.
     */
    match /companies/{companyId}/employees/{employeeId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

     /**
     * @description Controls access to the purchases subcollection of a company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read purchases data for a specific company.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the sales subcollection of a company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read sales data for a specific company.
     */
    match /companies/{companyId}/sales/{saleId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the fees subcollection of a company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read fees data for a specific company.
     */
    match /companies/{companyId}/fees/{feeId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the account-groups collection.
     * @path /account-groups/{accountGroupId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read account-groups data.
     */
    match /account-groups/{accountGroupId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the institutions collection.
     * @path /institutions/{institutionId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read institutions data.
     */
    match /institutions/{institutionId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the family-allowance-parameters collection.
     * @path /family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read family-allowance-parameters data.
     */
    match /family-allowance-parameters/{familyAllowanceParameterId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the tax-parameters collection.
     * @path /tax-parameters/{taxParameterId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read tax-parameters data.
     */
    match /tax-parameters/{taxParameterId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the health-entities collection.
     * @path /health-entities/{healthEntityId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read health-entities data.
     */
    match /health-entities/{healthEntityId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the afp-entities collection.
     * @path /afp-entities/{afpEntityId}
     * @allow (get, list) If the user is authenticated.
     * @deny (create, update, delete) No write access in this prototype.
     * @principle Authenticated users can read afp-entities data.
     */
    match /afp-entities/{afpEntityId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}