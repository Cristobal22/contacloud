/**
 * @fileoverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model. Users can only access data
 * related to companies they are associated with.  Admin users can manage all data.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user and admins.
 * - /companies/{companyId}: Company information, accessible to users associated with the company and admins.
 * - /companies/{companyId}/*: Data related to a specific company, accessible to users associated with that company and admins.
 * - Top-Level Collections (e.g., /economic-indicators, /health-entities, /afp-entities, /family-allowance-parameters, /tax-parameters, /institutions):
 *   These collections contain global, read-only data used for calculations and configuration.  Write access is denied.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - The default security posture is strict: if a relationship or role is not explicitly defined, access is denied.
 * - Top-level collections containing global data are read-only for all users.
 *
 * Denormalization for Authorization:
 * - The `UserProfile` entity contains a `companyIds` array, which is used to determine which companies a user has access to.
 *   This avoids the need for complex queries to determine company membership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Fundamental check for authenticated access.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-specific data access.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     * @path N/A
     */
    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    /**
     * @description Checks if the current user is associated with the given company ID.
     * @path N/A
     */
    function isUserAssociatedWithCompany(companyId) {
      return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]) || isAdmin());
    }
    
    /**
     * @description Checks if the user is an existing owner and the resource exists.
     * @path N/A
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for user profile information.
     * @path /users/{userId}
     * @allow (get, list) - Authenticated user accessing their own profile.
     * @allow (create) - Authenticated user creating their own profile.
     * @allow (update, delete) - Authenticated user updating their own profile.
     * @deny (get, list) - Any user attempting to access another user's profile.
     * @deny (create) - User attempting to create a profile with a mismatched user ID.
     * @deny (update, delete) - Any user attempting to modify another user's profile.
     * @principle Enforces document ownership for profile management.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for company information.
     * @path /companies/{companyId}
     * @allow (get, list) - Users associated with the company, or admins.
     * @allow (create) - Any authenticated user can create a company (subject to app-level validation).
     * @allow (update, delete) - Users associated with the company AND the owner of the company, or admins.
     * @deny (create) - if the user is not authenticated.
     * @deny (update, delete) - If user is not associated with company and is not the owner, and is not an admin.
     * @principle Enforces company-level access control based on user association and ownership.
     */
    match /companies/{companyId} {
      allow get: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if isSignedIn();
      allow update: if (isUserAssociatedWithCompany(companyId) && resource.data.ownerId == request.auth.uid && resource != null) || isAdmin();
      allow delete: if (isUserAssociatedWithCompany(companyId) && resource.data.ownerId == request.auth.uid && resource != null) || isAdmin();
    }

    /**
     * @description Rules for accounts within a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) - Users associated with the company, or admins.
     * @allow (create, update, delete) - Users associated with the company, or admins.
     * @deny (get, list, create, update, delete) - Users not associated with the company.
     * @principle Enforces company-level access control for accounting data.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow list: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow create: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
    }

    /**
     * @description Rules for vouchers within a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) - Users associated with the company, or admins.
     * @allow (create, update, delete) - Users associated with the company, or admins.
     * @deny (get, list, create, update, delete) - Users not associated with the company.
     * @principle Enforces company-level access control for accounting vouchers.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow list: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow create: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
    }

    /**
     * @description Rules for subjects (clients, providers) within a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) - Users associated with the company, or admins.
     * @allow (create, update, delete) - Users associated with the company, or admins.
     * @deny (get, list, create, update, delete) - Users not associated with the company.
     * @principle Enforces company-level access control for subject management.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow list: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow create: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
    }

    /**
     * @description Rules for cost centers within a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) - Users associated with the company, or admins.
     * @allow (create, update, delete) - Users associated with the company, or admins.
     * @deny (get, list, create, update, delete) - Users not associated with the company.
     * @principle Enforces company-level access control for cost center management.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow list: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow create: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
    }

    /**
     * @description Rules for employees within a company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) - Users associated with the company, or admins.
     * @allow (create, update, delete) - Users associated with the company, or admins.
     * @deny (get, list, create, update, delete) - Users not associated with the company.
     * @principle Enforces company-level access control for employee management.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow list: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow create: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
    }

    /**
     * @description Rules for payrolls within a company.
     * @path /companies/{companyId}/payrolls/{payrollId}
     * @allow (get, list) - Users associated with the company, or admins.
     * @allow (create, update, delete) - Users associated with the company, or admins.
     * @deny (get, list, create, update, delete) - Users not associated with the company.
     * @principle Enforces company-level access control for payroll data.
     */
    match /companies/{companyId}/payrolls/{payrollId} {
      allow get: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow list: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow create: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
    }

    /**
     * @description Rules for purchases within a company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) - Users associated with the company, or admins.
     * @allow (create, update, delete) - Users associated with the company, or admins.
     * @deny (get, list, create, update, delete) - Users not associated with the company.
     * @principle Enforces company-level access control for purchase documents.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow list: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow create: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
    }

    /**
     * @description Rules for sales within a company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) - Users associated with the company, or admins.
     * @allow (create, update, delete) - Users associated with the company, or admins.
     * @deny (get, list, create, update, delete) - Users not associated with the company.
     * @principle Enforces company-level access control for sales documents.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow list: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow create: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
    }

    /**
     * @description Rules for fees within a company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) - Users associated with the company, or admins.
     * @allow (create, update, delete) - Users associated with the company, or admins.
     * @deny (get, list, create, update, delete) - Users not associated with the company.
     * @principle Enforces company-level access control for fee documents.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow list: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow create: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
    }

    /**
     * @description Rules for company-specific economic indicators.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     * @allow (get, list) - Users associated with the company, or admins.
     * @allow (create, update, delete) - Users associated with the company, or admins.
     * @deny (get, list, create, update, delete) - Users not associated with the company.
     * @principle Enforces company-level access control for economic indicators.
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
      allow get: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow list: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow create: if isUserAssociatedWithCompany(companyId) || isAdmin();
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null || isAdmin();
    }

    /**
     * @description Rules for user-specific account groups.
     * @path /users/{userId}/account-groups/{groupId}
     * @allow (get, list) - Owner and admins.
     * @allow (create, update, delete) - Owner and admins.
     * @deny (get, list, create, update, delete) - Others.
     * @principle Enforces user-level ownership for account groups.
     */
    match /users/{userId}/account-groups/{groupId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) || isAdmin();
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for global economic indicators.
     * @path /economic-indicators/{indicatorId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     * @principle Provides public read access to global economic indicators while restricting write access.
     */
    match /economic-indicators/{indicatorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Rules for global health entities.
     * @path /health-entities/{entityId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     */
    match /health-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for global AFP entities.
     * @path /afp-entities/{entityId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     */
    match /afp-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for global family allowance parameters.
     * @path /family-allowance-parameters/{paramId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     */
    match /family-allowance-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for global tax parameters (IUT).
     * @path /tax-parameters/{paramId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     */
    match /tax-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for global institutions.
     * @path /institutions/{institutionId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}