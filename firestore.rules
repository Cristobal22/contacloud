/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a role-based access control model, with specific rules
 *  for user profiles and company data.  Global collections for configurations are read accessible.
 * @data-structure
 *  - /users/{userId}: Stores individual user profiles. Access is restricted to the owner of the profile.
 *  - /companies/{companyId}: Stores company information. Write access requires 'Admin' role.
 *  - /companies/{companyId}/accounts: Stores accounts for a specific company. Write access requires 'Admin' role.
 *  - /companies/{companyId}/vouchers: Stores vouchers for a specific company. Write access requires 'Admin' role.
 *  - /companies/{companyId}/subjects: Stores subjects for a specific company. Write access requires 'Admin' role.
 *  - /companies/{companyId}/cost-centers: Stores cost centers for a specific company. Write access requires 'Admin' role.
 *  - /companies/{companyId}/employees: Stores employees for a specific company. Write access requires 'Admin' role.
 *  - /companies/{companyId}/purchases: Stores purchase documents for a specific company. Write access requires 'Admin' role.
 *  - /companies/{companyId}/sales: Stores sales documents for a specific company. Write access requires 'Admin' role.
 *  - /companies/{companyId}/fees: Stores fee documents for a specific company. Write access requires 'Admin' role.
 *  - /account-groups: Stores global account group data. Read-only for all users.
 *  - /institutions: Stores global institution data. Read-only for all users.
 *  - /family-allowance-parameters: Stores global family allowance parameters. Read-only for all users.
 *  - /tax-parameters: Stores global tax parameters. Read-only for all users.
 *  - /health-entities: Stores global health entities. Read-only for all users.
 *  - /afp-entities: Stores global AFP entities. Read-only for all users.
 * @key-security-decisions
 *  - User listing is explicitly denied to protect user privacy.
 *  - Write access to company and related data is strictly limited to 'Admin' users.
 *  - Global configuration collections (e.g., /institutions) are publicly readable but not writable.
 *  - Default security posture for ambiguous relationships is strict owner-only access.
 *  - No schema validation is enforced beyond authorization and relational integrity checks, allowing for rapid data shape iteration.
 * @denormalization-for-authorization N/A
 * @structural-segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param None
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is signed in and their ID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user's ID matches the provided user ID and the resource exists.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is signed in and their ID matches and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     * @return {bool} True if the user has the 'Admin' role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && (request.auth.token.role == 'Admin');
    }

    /**
     * @description User profile collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their profile with matching UID.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (list) - Prevents listing all user profiles.
     * @deny (create) - Non-authenticated user cannot create profile.
     * @deny (update,delete) - Non-authenticated user cannot update or delete profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Company collection.
     * @path /companies/{companyId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Admin user can create.
     * @allow (update, delete) - Admin user can update or delete.
     * @deny (create, update, delete) - Non-admin user cannot create, update or delete.
     * @principle Requires admin role for create, update, and delete operations.
     */
    match /companies/{companyId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Accounts sub-collection for a specific company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Admin user can create.
     * @allow (update, delete) - Admin user can update or delete.
     * @deny (create, update, delete) - Non-admin user cannot create, update or delete.
     * @principle Requires admin role for create, update, and delete operations.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Vouchers sub-collection for a specific company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Admin user can create.
     * @allow (update, delete) - Admin user can update or delete.
     * @deny (create, update, delete) - Non-admin user cannot create, update or delete.
     * @principle Requires admin role for create, update, and delete operations.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Subjects sub-collection for a specific company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Admin user can create.
     * @allow (update, delete) - Admin user can update or delete.
     * @deny (create, update, delete) - Non-admin user cannot create, update or delete.
     * @principle Requires admin role for create, update, and delete operations.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Cost centers sub-collection for a specific company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Admin user can create.
     * @allow (update, delete) - Admin user can update or delete.
     * @deny (create, update, delete) - Non-admin user cannot create, update or delete.
     * @principle Requires admin role for create, update, and delete operations.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Employees sub-collection for a specific company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Admin user can create.
     * @allow (update, delete) - Admin user can update or delete.
     * @deny (create, update, delete) - Non-admin user cannot create, update or delete.
     * @principle Requires admin role for create, update, and delete operations.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Purchases sub-collection for a specific company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Admin user can create.
     * @allow (update, delete) - Admin user can update or delete.
     * @deny (create, update, delete) - Non-admin user cannot create, update or delete.
     * @principle Requires admin role for create, update, and delete operations.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Sales sub-collection for a specific company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Admin user can create.
     * @allow (update, delete) - Admin user can update or delete.
     * @deny (create, update, delete) - Non-admin user cannot create, update or delete.
     * @principle Requires admin role for create, update, and delete operations.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Fees sub-collection for a specific company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Admin user can create.
     * @allow (update, delete) - Admin user can update or delete.
     * @deny (create, update, delete) - Non-admin user cannot create, update or delete.
     * @principle Requires admin role for create, update, and delete operations.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Account groups collection.
     * @path /account-groups/{accountGroupId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     */
    match /account-groups/{accountGroupId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Institutions collection.
     * @path /institutions/{institutionId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Family allowance parameters collection.
     * @path /family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     */
    match /family-allowance-parameters/{familyAllowanceParameterId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Tax parameters collection.
     * @path /tax-parameters/{taxParameterId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     */
    match /tax-parameters/{taxParameterId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Health entities collection.
     * @path /health-entities/{healthEntityId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     */
    match /health-entities/{healthEntityId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description AFP entities collection.
     * @path /afp-entities/{afpEntityId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed.
     */
    match /afp-entities/{afpEntityId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}