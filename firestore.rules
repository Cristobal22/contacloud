/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-owned data and administrative overrides.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information, accessible only to the user themselves.
 * - `/companies/{companyId}`: Stores company data, accessible to users associated with the company (Admin or Accountant).
 * - `/companies/{companyId}/*`: Subcollections under companies are accessible to users associated with the parent company.
 * - `/economic-indicators/{indicatorId}`, `/health-entities/{entityId}`, `/afp-entities/{entityId}`, `/family-allowance-parameters/{paramId}`, `/tax-parameters/{paramId}`, `/institutions/{institutionId}`: Publicly readable collections for global configuration data, but writable only by those with 'Admin' role.
 * - `/users/{userId}/account-groups`: User-specific collection of account groups, accessible only by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Users can only create their own profile.
 * - Most collections follow an ownership or shared-access model, where access is granted based on the authenticated user's ID and their role within a company.
 * - Global data collections (economic indicators, institutions, parameters) are publicly readable but admin-writeable.
 *
 * Denormalization for Authorization:
 * - Company documents do not contain a list of authorized users. Instead, the `UserProfile` contains the `companyIds` array to perform authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get, list, update, delete) - User with matching UID can read, update and delete their profile.
     * @deny (create) - User tries to create a profile with a different UID.
     * @deny (get, list, update, delete) - User tries to read, update or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get, update, delete: if isOwner(userId) && resource != null;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
    }

    /**
     * @description Allows users associated to a company to read and write company data. Only Admin users can create, update or delete companies.
     * @path /companies/{companyId}
     * @allow (get, list) - User is associated with the company can read company data.
     * @allow (create, update, delete) - Only Admin users can create, update or delete company data.
     * @deny (create, update, delete) - Non-Admin users attempt to create, update or delete company data.
     * @deny (get, list) - User not associated to the company tries to read company data.
     * @principle Enforces role-based access control for company data.
     */
    match /companies/{companyId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      function isAccountant() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
      }
      function isAssociatedWithCompany(companyId) {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }
      allow get, list: if isAssociatedWithCompany(companyId);
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows users associated with the parent company to manage accounts.
     * @path /companies/{companyId}/accounts/{accountId}
     */
    match /companies/{companyId}/accounts/{accountId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      function isAccountant() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
      }
       function isAssociatedWithCompany(companyId) {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }
      allow get, list: if isAssociatedWithCompany(companyId);
      allow create, update, delete: if isAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with the parent company to manage vouchers.
     * @path /companies/{companyId}/vouchers/{voucherId}
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      function isAccountant() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
      }
       function isAssociatedWithCompany(companyId) {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }
      allow get, list: if isAssociatedWithCompany(companyId);
      allow create, update, delete: if isAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with the parent company to manage subjects.
     * @path /companies/{companyId}/subjects/{subjectId}
     */
    match /companies/{companyId}/subjects/{subjectId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      function isAccountant() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
      }
       function isAssociatedWithCompany(companyId) {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }
      allow get, list: if isAssociatedWithCompany(companyId);
      allow create, update, delete: if isAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with the parent company to manage cost centers.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      function isAccountant() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
      }
       function isAssociatedWithCompany(companyId) {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }
      allow get, list: if isAssociatedWithCompany(companyId);
      allow create, update, delete: if isAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with the parent company to manage employees.
     * @path /companies/{companyId}/employees/{employeeId}
     */
    match /companies/{companyId}/employees/{employeeId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      function isAccountant() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
      }
       function isAssociatedWithCompany(companyId) {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }
      allow get, list: if isAssociatedWithCompany(companyId);
      allow create, update, delete: if isAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with the parent company to manage payrolls.
     * @path /companies/{companyId}/payrolls/{payrollId}
     */
    match /companies/{companyId}/payrolls/{payrollId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      function isAccountant() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
      }
       function isAssociatedWithCompany(companyId) {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }
      allow get, list: if isAssociatedWithCompany(companyId);
      allow create, update, delete: if isAssociatedWithCompany(companyId) && resource != null;
    }
    /**
     * @description Allows users associated with the parent company to manage purchases.
     * @path /companies/{companyId}/purchases/{purchaseId}
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      function isAccountant() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
      }
       function isAssociatedWithCompany(companyId) {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }
      allow get, list: if isAssociatedWithCompany(companyId);
      allow create, update, delete: if isAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with the parent company to manage sales.
     * @path /companies/{companyId}/sales/{saleId}
     */
    match /companies/{companyId}/sales/{saleId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      function isAccountant() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
      }
       function isAssociatedWithCompany(companyId) {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }
      allow get, list: if isAssociatedWithCompany(companyId);
      allow create, update, delete: if isAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with the parent company to manage fees.
     * @path /companies/{companyId}/fees/{feeId}
     */
    match /companies/{companyId}/fees/{feeId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      function isAccountant() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
      }
       function isAssociatedWithCompany(companyId) {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }
      allow get, list: if isAssociatedWithCompany(companyId);
      allow create, update, delete: if isAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with the parent company to read and write company-specific economic indicators.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      function isAccountant() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
      }
       function isAssociatedWithCompany(companyId) {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }
      allow get, list: if isAssociatedWithCompany(companyId);
      allow create, update, delete: if isAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows a user to read and write their own account groups.
     * @path /users/{userId}/account-groups/{accountGroupId}
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get, list, update, delete: if isOwner(userId) && resource != null;
      allow create: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read global economic indicators, but only Admins can write.
     * @path /economic-indicators/{indicatorId}
     */
    match /economic-indicators/{indicatorId} {
     function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      allow get, list: if true;
      allow create, update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows anyone to read health entities, but only Admins can write.
     * @path /health-entities/{entityId}
     */
    match /health-entities/{entityId} {
       function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      allow get, list: if true;
      allow create, update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows anyone to read AFP entities, but only Admins can write.
     * @path /afp-entities/{entityId}
     */
    match /afp-entities/{entityId} {
       function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      allow get, list: if true;
      allow create, update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows anyone to read family allowance parameters, but only Admins can write.
     * @path /family-allowance-parameters/{paramId}
     */
    match /family-allowance-parameters/{paramId} {
       function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      allow get, list: if true;
      allow create, update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows anyone to read tax parameters, but only Admins can write.
     * @path /tax-parameters/{paramId}
     */
    match /tax-parameters/{paramId} {
       function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      allow get, list: if true;
      allow create, update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows anyone to read institutions, but only Admins can write.
     * @path /institutions/{institutionId}
     */
    match /institutions/{institutionId} {
       function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      }
      allow get, list: if true;
      allow create, update, delete: if isAdmin() && resource != null;
    }
  }
}