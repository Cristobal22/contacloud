rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function getUserCompanyIds() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
    }

    function isUserAssociatedWithCompany(companyId) {
      return isSignedIn() && companyId in getUserCompanyIds();
    }

    // --- Public/Admin Collections ---
    match /economic-indicators/{id} { allow get, list: if true; allow write: if isAdmin(); }
    match /health-entities/{id} { allow get, list: if true; allow write: if isAdmin(); }
    match /afp-entities/{id} { allow get, list: if true; allow write: if isAdmin(); }
    match /family-allowance-parameters/{id} { allow get, list: if true; allow write: if isAdmin(); }
    match /tax-parameters/{id} { allow get, list: if true; allow write: if isAdmin(); }
    match /taxable-caps/{id} { allow get, list: if true; allow write: if isAdmin(); }

    // --- Path-Specific Rules ---
    match /users/{userId} {
      allow get, update, create, delete: if isOwner(userId);
      allow list: if false;
    }

    match /companies/{companyId} {
      allow get, list: if isUserAssociatedWithCompany(companyId);
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.ownerId);

      // Explicit rules for subcollections. This is more specific and reliable
      // than a generic wildcard or a collection group rule for direct path queries.
      match /employees/{employeeId} {
        allow read, write: if isUserAssociatedWithCompany(companyId);
      }
      match /payrolls/{payrollId} {
        allow read, write: if isUserAssociatedWithCompany(companyId);
      }
    }

    // --- Collection Group Rule ---
    // This rule is intended for collection group queries (e.g., across all 'employees' collections).
    // It's less specific than the path-specific rules above.
    match /{path=**}/{subcollection}/{docId} {
        allow read, write: if isSignedIn() && resource.data.companyId in getUserCompanyIds();
    }
  }
}
