/**
 * @file Firebase Security Rules for Accounting Platform
 * @core-philosophy This ruleset enforces a role-based access control model,
 *  where 'Admin' users have broad read access and user-specific data is
 *  protected by ownership. Data integrity is ensured by validating key
 *  fields on create and update operations.
 * @data-structure
 *  - /users/{userId}: Stores user profiles, accessible to admins and the user themselves.
 *  - /companies: Stores company data, publicly readable, writable only by admins.
 *  - /companies/{companyId}/*: Subcollections for company-specific data, writable only by admins.
 *  - /account-groups, /institutions, /family-allowance-parameters, /tax-parameters, /health-entities, /afp-entities:
 *    Global collections, publicly readable, writable only by admins.
 * @key-security-decisions
 *  - User listing is restricted to admins.
 *  - Read-only collections (e.g., /account-groups) are publicly readable.
 *  - Company-related data is namespaced under /companies/{companyId}/... and secured by admin privileges.
 * @denormalization-for-authorization None needed in this basic ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Controls access to user profile data.
     * @path: /users/{userId}
     * @allow: User with UID 'user123' can read their own profile (get)
     *          request.auth.uid == 'user123'
     * @allow: Admin user can read any user profile (get)
     *          request.auth.token.role == 'Admin'
     * @allow: User with UID 'user123' can create their own profile (create)
     *          request.auth.uid == 'user123'
     * @allow: User with UID 'user123' can update their own profile (update)
     *          request.auth.uid == 'user123'
     * @deny: User with UID 'user123' cannot read another user's profile (get)
     *         request.auth.uid != 'anotherUser'
     * @deny: User with UID 'user123' cannot create another user's profile (create)
     *         request.auth.uid != 'anotherUser'
     * @deny: User with UID 'user123' cannot update another user's profile (update)
     *         request.auth.uid != 'anotherUser'
     * @principle: Enforces document ownership for writes, restricts reads to owner and admins.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if false;
    }

    /**
     * @description: Controls access to company data.
     * @path: /companies
     * @allow: Any user can read company data (get, list)
     *          true
     * @allow: Admin can create new companies (create)
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot create, update, or delete companies.
     *          request.auth.token.role != 'Admin'
     * @principle: Public read, admin-only writes.
     */
    match /companies/{companyId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to company-specific account data.
     * @path: /companies/{companyId}/accounts/{accountId}
     * @allow: Admin user can read or write account data (get, list, create, update, delete)
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot access account data.
     *          request.auth.token.role != 'Admin'
     * @principle: Admin-only access to company account data.
     */
    match /companies/{companyId}/accounts/{accountId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to company-specific voucher data.
     * @path: /companies/{companyId}/vouchers/{voucherId}
     * @allow: Admin user can read or write voucher data (get, list, create, update, delete)
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot access voucher data.
     *          request.auth.token.role != 'Admin'
     * @principle: Admin-only access to company voucher data.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to company-specific subject data.
     * @path: /companies/{companyId}/subjects/{subjectId}
     * @allow: Admin user can read or write subject data (get, list, create, update, delete)
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot access subject data.
     *          request.auth.token.role != 'Admin'
     * @principle: Admin-only access to company subject data.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to company-specific cost center data.
     * @path: /companies/{companyId}/cost-centers/{costCenterId}
     * @allow: Admin user can read or write cost center data (get, list, create, update, delete)
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot access cost center data.
     *          request.auth.token.role != 'Admin'
     * @principle: Admin-only access to company cost center data.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to company-specific employee data.
     * @path: /companies/{companyId}/employees/{employeeId}
     * @allow: Admin user can read or write employee data (get, list, create, update, delete)
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot access employee data.
     *          request.auth.token.role != 'Admin'
     * @principle: Admin-only access to company employee data.
     */
    match /companies/{companyId}/employees/{employeeId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }
    
    /**
     * @description: Controls access to company-specific purchase data.
     * @path: /companies/{companyId}/purchases/{purchaseId}
     * @allow: Admin user can read or write purchase data (get, list, create, update, delete)
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot access purchase data.
     *          request.auth.token.role != 'Admin'
     * @principle: Admin-only access to company purchase data.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to company-specific sales data.
     * @path: /companies/{companyId}/sales/{saleId}
     * @allow: Admin user can read or write sale data (get, list, create, update, delete)
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot access sales data.
     *          request.auth.token.role != 'Admin'
     * @principle: Admin-only access to company sale data.
     */
    match /companies/{companyId}/sales/{saleId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to company-specific fee data.
     * @path: /companies/{companyId}/fees/{feeId}
     * @allow: Admin user can read or write fee data (get, list, create, update, delete)
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot access fee data.
     *          request.auth.token.role != 'Admin'
     * @principle: Admin-only access to company fee data.
     */
    match /companies/{companyId}/fees/{feeId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to global account group data.
     * @path: /account-groups/{accountGroupId}
     * @allow: Any user can read account group data (get, list)
     *          true
     * @allow: Admin can create, update, or delete account groups.
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot create, update, or delete account groups.
     *          request.auth.token.role != 'Admin'
     * @principle: Public read, admin-only writes.
     */
    match /account-groups/{accountGroupId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if true;
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to global institution data.
     * @path: /institutions/{institutionId}
     * @allow: Any user can read institution data (get, list)
     *          true
     * @allow: Admin can create, update, or delete institutions.
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot create, update, or delete institutions.
     *          request.auth.token.role != 'Admin'
     * @principle: Public read, admin-only writes.
     */
    match /institutions/{institutionId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if true;
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to global family allowance parameter data.
     * @path: /family-allowance-parameters/{parameterId}
     * @allow: Any user can read family allowance parameter data (get, list)
     *          true
     * @allow: Admin can create, update, or delete family allowance parameters.
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot create, update, or delete family allowance parameters.
     *          request.auth.token.role != 'Admin'
     * @principle: Public read, admin-only writes.
     */
    match /family-allowance-parameters/{parameterId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if true;
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to global tax parameter data.
     * @path: /tax-parameters/{parameterId}
     * @allow: Any user can read tax parameter data (get, list)
     *          true
     * @allow: Admin can create, update, or delete tax parameters.
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot create, update, or delete tax parameters.
     *          request.auth.token.role != 'Admin'
     * @principle: Public read, admin-only writes.
     */
    match /tax-parameters/{parameterId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if true;
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to global health entities data.
     * @path: /health-entities/{healthEntityId}
     * @allow: Any user can read health entities data (get, list)
     *          true
     * @allow: Admin can create, update, or delete health entities.
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot create, update, or delete health entities.
     *          request.auth.token.role != 'Admin'
     * @principle: Public read, admin-only writes.
     */
    match /health-entities/{healthEntityId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if true;
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Controls access to global AFP entities data.
     * @path: /afp-entities/{afpEntityId}
     * @allow: Any user can read AFP entities data (get, list)
     *          true
     * @allow: Admin can create, update, or delete AFP entities.
     *          request.auth.token.role == 'Admin'
     * @deny: Non-admin users cannot create, update, or delete AFP entities.
     *          request.auth.token.role != 'Admin'
     * @principle: Public read, admin-only writes.
     */
    match /afp-entities/{afpEntityId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
       allow get, list: if true;
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }
  }
}