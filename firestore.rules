/**
 * @fileoverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. User profiles are private
 * and only accessible to the owning user. Companies are accessible to
 * users associated with them through the 'companyIds' array in their user
 * profile.  Data within a company (accounts, vouchers, etc.) is accessible
 * to users associated with that company. Some data, like global configuration
 * settings, is only manageable by Admin users.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.  Each user can only access their own profile.
 * - /companies/{companyId}: Company information.
 * - /companies/{companyId}/accounts: Accounting accounts for the company.
 * - /companies/{companyId}/vouchers: Accounting vouchers for the company.
 * - /companies/{companyId}/subjects: Subjects (clients, providers) for the company.
 * - /companies/{companyId}/cost-centers: Cost centers for the company.
 * - /companies/{companyId}/employees: Employees for the company.
 * - /companies/{companyId}/purchases: Purchase documents for the company.
 * - /companies/{companyId}/sales: Sale documents for the company.
 * - /companies/{companyId}/fees: Fee documents for the company.
 * - /users/{userId}/account-groups: Account groups defined by the user.
 * - /users/{userId}/institutions: Institutions defined by the user.
 * - /users/{userId}/family-allowance-parameters: Family allowance parameters defined by the user.
 * - /users/{userId}/tax-parameters: Tax parameters defined by the user.
 * - /users/{userId}/health-entities: Health entities defined by the user.
 * - /users/{userId}/afp-entities: AFP entities defined by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Company access is controlled through denormalized 'companyIds' on the user profile.
 * - Data validation is minimized in this prototyping phase.
 *
 * Denormalization for Authorization:
 *  - The 'companyIds' array on the UserProfile is critical for efficient
 *    authorization.  It allows us to quickly check if a user has access to
 *    a specific company without having to perform additional reads.
 *
 * Structural Segregation:
 *  - User-specific data (account groups, institutions, parameters, entities) is stored in
 *    private subcollections under each user's profile. This ensures that one user cannot
 *    access another user's configuration data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is associated with the company via their profile.
     */
    function isUserInCompany(companyId) {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
    }

    /**
     * @description Checks if the authenticated user is associated with the company and the document exists.
     */
    function isExistingUserInCompany(companyId) {
        return isUserInCompany(companyId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin (has "Admin" role).
     */
    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Admin";
    }


    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (get) User can read their own profile.
     * @allow (create) User can create their profile if the UID matches the document ID.
     * @allow (update) User can update their own profile.
     * @allow (delete) User can delete their own profile.
     * @deny (get) User cannot read another user's profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @principle Enforces document ownership and self-creation.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for company documents.
     * @path /companies/{companyId}
     * @allow (get) User associated with the company can read the company.
     * @allow (create) User associated with the company can create the company.
     * @allow (update) User associated with the company can update the company.
     * @allow (delete) User associated with the company can delete the company.
     * @deny (get) User not associated with the company cannot read the company.
     * @deny (create) User not associated with the company cannot create a company.
     * @principle Controls company access based on user association.
     */
    match /companies/{companyId} {
        allow get: if isUserInCompany(companyId);
        allow list: if isUserInCompany(companyId);
        allow create: if isAdmin(); // Only admins can create companies
        allow update: if isExistingUserInCompany(companyId);
        allow delete: if isExistingUserInCompany(companyId);
    }

    /**
     * @description Rules for account documents within a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get) User associated with the company can read the account.
     * @allow (create) User associated with the company can create an account.
     * @allow (update) User associated with the company can update the account.
     * @allow (delete) User associated with the company can delete the account.
     * @deny (get) User not associated with the company cannot read the account.
     * @deny (create) User not associated with the company cannot create an account.
     * @principle Controls account access based on company association.
     */
    match /companies/{companyId}/accounts/{accountId} {
        allow get: if isUserInCompany(companyId);
        allow list: if isUserInCompany(companyId);
        allow create: if isUserInCompany(companyId);
        allow update: if isExistingUserInCompany(companyId);
        allow delete: if isExistingUserInCompany(companyId);
    }

    /**
     * @description Rules for voucher documents within a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get) User associated with the company can read the voucher.
     * @allow (create) User associated with the company can create a voucher.
     * @allow (update) User associated with the company can update the voucher.
     * @allow (delete) User associated with the company can delete the voucher.
     * @deny (get) User not associated with the company cannot read the voucher.
     * @deny (create) User not associated with the company cannot create a voucher.
     * @principle Controls voucher access based on company association.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
        allow get: if isUserInCompany(companyId);
        allow list: if isUserInCompany(companyId);
        allow create: if isUserInCompany(companyId);
        allow update: if isExistingUserInCompany(companyId);
        allow delete: if isExistingUserInCompany(companyId);
    }

   /**
     * @description Rules for subject documents within a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get) User associated with the company can read the subject.
     * @allow (create) User associated with the company can create a subject.
     * @allow (update) User associated with the company can update the subject.
     * @allow (delete) User associated with the company can delete the subject.
     * @deny (get) User not associated with the company cannot read the subject.
     * @deny (create) User not associated with the company cannot create a subject.
     * @principle Controls subject access based on company association.
     */
    match /companies/{companyId}/subjects/{subjectId} {
        allow get: if isUserInCompany(companyId);
        allow list: if isUserInCompany(companyId);
        allow create: if isUserInCompany(companyId);
        allow update: if isExistingUserInCompany(companyId);
        allow delete: if isExistingUserInCompany(companyId);
    }

    /**
     * @description Rules for cost-center documents within a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get) User associated with the company can read the cost center.
     * @allow (create) User associated with the company can create a cost center.
     * @allow (update) User associated with the company can update the cost center.
     * @allow (delete) User associated with the company can delete the cost center.
     * @deny (get) User not associated with the company cannot read the cost center.
     * @deny (create) User not associated with the company cannot create a cost center.
     * @principle Controls cost center access based on company association.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
        allow get: if isUserInCompany(companyId);
        allow list: if isUserInCompany(companyId);
        allow create: if isUserInCompany(companyId);
        allow update: if isExistingUserInCompany(companyId);
        allow delete: if isExistingUserInCompany(companyId);
    }

    /**
     * @description Rules for employee documents within a company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get) User associated with the company can read the employee.
     * @allow (create) User associated with the company can create an employee.
     * @allow (update) User associated with the company can update the employee.
     * @allow (delete) User associated with the company can delete the employee.
     * @deny (get) User not associated with the company cannot read the employee.
     * @deny (create) User not associated with the company cannot create an employee.
     * @principle Controls employee access based on company association.
     */
    match /companies/{companyId}/employees/{employeeId} {
        allow get: if isUserInCompany(companyId);
        allow list: if isUserInCompany(companyId);
        allow create: if isUserInCompany(companyId);
        allow update: if isExistingUserInCompany(companyId);
        allow delete: if isExistingUserInCompany(companyId);
    }
    
     /**
      * @description Rules for purchase documents within a company.
      * @path /companies/{companyId}/purchases/{purchaseId}
      * @allow (get) User associated with the company can read the purchase.
      * @allow (create) User associated with the company can create a purchase.
      * @allow (update) User associated with the company can update the purchase.
      * @allow (delete) User associated with the company can delete the purchase.
      * @deny (get) User not associated with the company cannot read the purchase.
      * @deny (create) User not associated with the company cannot create a purchase.
      * @principle Controls purchase access based on company association.
      */
     match /companies/{companyId}/purchases/{purchaseId} {
         allow get: if isUserInCompany(companyId);
         allow list: if isUserInCompany(companyId);
         allow create: if isUserInCompany(companyId);
         allow update: if isExistingUserInCompany(companyId);
         allow delete: if isExistingUserInCompany(companyId);
     }

     /**
      * @description Rules for sale documents within a company.
      * @path /companies/{companyId}/sales/{saleId}
      * @allow (get) User associated with the company can read the sale.
      * @allow (create) User associated with the company can create a sale.
      * @allow (update) User associated with the company can update the sale.
      * @allow (delete) User associated with the company can delete the sale.
      * @deny (get) User not associated with the company cannot read the sale.
      * @deny (create) User not associated with the company cannot create a sale.
      * @principle Controls sale access based on company association.
      */
     match /companies/{companyId}/sales/{saleId} {
         allow get: if isUserInCompany(companyId);
         allow list: if isUserInCompany(companyId);
         allow create: if isUserInCompany(companyId);
         allow update: if isExistingUserInCompany(companyId);
         allow delete: if isExistingUserInCompany(companyId);
     }

     /**
      * @description Rules for fee documents within a company.
      * @path /companies/{companyId}/fees/{feeId}
      * @allow (get) User associated with the company can read the fee.
      * @allow (create) User associated with the company can create a fee.
      * @allow (update) User associated with the company can update the fee.
      * @allow (delete) User associated with the company can delete the fee.
      * @deny (get) User not associated with the company cannot read the fee.
      * @deny (create) User not associated with the company cannot create a fee.
      * @principle Controls fee access based on company association.
      */
     match /companies/{companyId}/fees/{feeId} {
         allow get: if isUserInCompany(companyId);
         allow list: if isUserInCompany(companyId);
         allow create: if isUserInCompany(companyId);
         allow update: if isExistingUserInCompany(companyId);
         allow delete: if isExistingUserInCompany(companyId);
     }
    

    /**
     * @description Rules for account-group documents within a user.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (get) User can read their own account group.
     * @allow (create) User can create their own account group.
     * @allow (update) User can update their own account group.
     * @allow (delete) User can delete their own account group.
     * @deny (get) User cannot read another user's account group.
     * @deny (create) User cannot create an account group for another user.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for institution documents within a user.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (get) User can read their own institution.
     * @allow (create) User can create their own institution.
     * @allow (update) User can update their own institution.
     * @allow (delete) User can delete their own institution.
     * @deny (get) User cannot read another user's institution.
     * @deny (create) User cannot create an institution for another user.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for family-allowance-parameter documents within a user.
     * @path /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (get) User can read their own family allowance parameter.
     * @allow (create) User can create their own family allowance parameter.
     * @allow (update) User can update their own family allowance parameter.
     * @allow (delete) User can delete their own family allowance parameter.
     * @deny (get) User cannot read another user's family allowance parameter.
     * @deny (create) User cannot create a family allowance parameter for another user.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for tax-parameter documents within a user.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     * @allow (get) User can read their own tax parameter.
     * @allow (create) User can create their own tax parameter.
     * @allow (update) User can update their own tax parameter.
     * @allow (delete) User can delete their own tax parameter.
     * @deny (get) User cannot read another user's tax parameter.
     * @deny (create) User cannot create a tax parameter for another user.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

     /**
      * @description Rules for health-entity documents within a user.
      * @path /users/{userId}/health-entities/{healthEntityId}
      * @allow (get) User can read their own health entity.
      * @allow (create) User can create their own health entity.
      * @allow (update) User can update their own health entity.
      * @allow (delete) User can delete their own health entity.
      * @deny (get) User cannot read another user's health entity.
      * @deny (create) User cannot create a health entity for another user.
      * @principle Enforces document ownership.
      */
     match /users/{userId}/health-entities/{healthEntityId} {
       allow get: if isOwner(userId);
       allow list: if isOwner(userId);
       allow create: if isOwner(userId);
       allow update: if isOwner(userId) && resource != null;
       allow delete: if isOwner(userId) && resource != null;
     }

     /**
      * @description Rules for afp-entity documents within a user.
      * @path /users/{userId}/afp-entities/{afpEntityId}
      * @allow (get) User can read their own afp entity.
      * @allow (create) User can create their own afp entity.
      * @allow (update) User can update their own afp entity.
      * @allow (delete) User can delete their own afp entity.
      * @deny (get) User cannot read another user's afp entity.
      * @deny (create) User cannot create an afp entity for another user.
      * @principle Enforces document ownership.
      */
     match /users/{userId}/afp-entities/{afpEntityId} {
       allow get: if isOwner(userId);
       allow list: if isOwner(userId);
       allow create: if isOwner(userId);
       allow update: if isOwner(userId) && resource != null;
       allow delete: if isOwner(userId) && resource != null;
     }
  }
}