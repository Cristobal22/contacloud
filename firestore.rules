/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model for user profiles
 *  and a company-based ownership model for all other data, where data is segregated per company.
 *  Global collections are read-only.
 * @data-structure
 *  - /users/{userId}: Stores individual user profiles, accessible only by the user themselves.
 *  - /companies: Stores company profiles. Write access is not defined in this prototyping phase.
 *  - /companies/{companyId}/*: Subcollections for company-specific data, such as accounts, vouchers, subjects, cost centers and employees.
 * @key-security-decisions
 *  - User listing is explicitly denied to protect user privacy.
 *  - Write access to the /companies collection is not defined in this phase, requiring manual backend management for creating company records.
 *  - Global collections (/account-groups, /institutions, etc.) are read-only, intended for platform-level configuration.
 * @denormalization-for-authorization N/A: Not applicable in this version.
 * @structural-segregation N/A: Not applicable in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description User profile collection. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own profile if the userId matches their auth.uid.
     * @deny (create) - User cannot create a profile with a userId that doesn't match their auth.uid.
     * @deny (get, update, delete) - User cannot read/write someone else's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Company collection.
     * @path /companies
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access in this version.
     * @principle Restricts write access to admins only.
     */
    match /companies {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation
    }

    /**
     * @description Account sub-collection for a specific company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access in this version.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company-based authorization
    }

    /**
     * @description Voucher sub-collection for a specific company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access in this version.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company-based authorization
    }

    /**
     * @description Subject sub-collection for a specific company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access in this version.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company-based authorization
    }

    /**
     * @description Cost Center sub-collection for a specific company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access in this version.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company-based authorization
    }

    /**
     * @description Employee sub-collection for a specific company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access in this version.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company-based authorization
    }

     /**
     * @description Purchase sub-collection for a specific company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access in this version.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company-based authorization
    }

    /**
     * @description Sale sub-collection for a specific company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access in this version.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company-based authorization
    }

    /**
     * @description Fee sub-collection for a specific company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access in this version.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company-based authorization
    }

    /**
     * @description Account Group collection.
     * @path /account-groups
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Global data, read-only access.
     */
    match /account-groups/{accountGroupId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Institutions collection.
     * @path /institutions
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Global data, read-only access.
     */
    match /institutions/{institutionId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Family Allowance Parameters collection.
     * @path /family-allowance-parameters
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Global data, read-only access.
     */
    match /family-allowance-parameters/{familyAllowanceParameterId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Tax Parameters collection.
     * @path /tax-parameters
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Global data, read-only access.
     */
    match /tax-parameters/{taxParameterId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Health Entities collection.
     * @path /health-entities
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Global data, read-only access.
     */
    match /health-entities/{healthEntityId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description AFP Entities collection.
     * @path /afp-entities
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Global data, read-only access.
     */
    match /afp-entities/{afpEntityId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}