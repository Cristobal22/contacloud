/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data
 *              and a role-based model for company-related data.  It prioritizes security
 *              by restricting access to resources based on user authentication and roles.
 * @dataStructure
 *  - /users/{userId}: Stores individual user profiles.
 *  - /companies: Stores company data.
 *  - /companies/{companyId}/*: Stores data related to specific companies.
 * @keySecurityDecisions
 *  - Users can only read and write their own profile data under /users/{userId}.
 *  - Listing users is denied to prevent information disclosure.
 *  - Company data access is role-based, managed via the UserProfile.role field.
 *  - Data validation is relaxed in this prototyping phase, focusing on authorization.
 *  - It's crucial to create Admin users. Without an Admin user, no one will be able to manage companies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
        return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');
    }

    function isAccountant() {
        return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant');
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (UID matches).
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the companies collection. Only Admins can create.
     *              Everyone can read.
     * @path /companies
     * @allow (create) - If the user is an Admin.
     * @allow (get, list) - Public read access.
     * @deny (update, delete) - Only admins can update and delete
     * @principle Restricts company creation to admins, allows public read access.
     */
    match /companies {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to accounts within a company. Only Admins and Accountants can create, update and delete.
     *              Everyone can read.
     * @path /companies/{companyId}/accounts
     * @allow (create) - If the user is an Admin or Accountant.
     * @allow (get, list) - Public read access.
     * @deny (update, delete) - Only admins and accountants can update and delete
     * @principle Restricts company creation to admins and accountants, allows public read access.
     */
    match /companies/{companyId}/accounts/{accountId} {
        allow get, list: if true;
        allow create: if isAdmin() || isAccountant();
        allow update: if isAdmin() || isAccountant();
        allow delete: if isAdmin() || isAccountant();
    }

    /**
     * @description Controls access to vouchers within a company. Only Admins and Accountants can create, update and delete.
     *              Everyone can read.
     * @path /companies/{companyId}/vouchers
     * @allow (create) - If the user is an Admin or Accountant.
     * @allow (get, list) - Public read access.
     * @deny (update, delete) - Only admins and accountants can update and delete
     * @principle Restricts company creation to admins and accountants, allows public read access.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
        allow get, list: if true;
        allow create: if isAdmin() || isAccountant();
        allow update: if isAdmin() || isAccountant();
        allow delete: if isAdmin() || isAccountant();
    }

    /**
     * @description Controls access to subjects within a company. Only Admins and Accountants can create, update and delete.
     *              Everyone can read.
     * @path /companies/{companyId}/subjects
     * @allow (create) - If the user is an Admin or Accountant.
     * @allow (get, list) - Public read access.
     * @deny (update, delete) - Only admins and accountants can update and delete
     * @principle Restricts company creation to admins and accountants, allows public read access.
     */
    match /companies/{companyId}/subjects/{subjectId} {
        allow get, list: if true;
        allow create: if isAdmin() || isAccountant();
        allow update: if isAdmin() || isAccountant();
        allow delete: if isAdmin() || isAccountant();
    }

    /**
     * @description Controls access to cost-centers within a company. Only Admins and Accountants can create, update and delete.
     *              Everyone can read.
     * @path /companies/{companyId}/cost-centers
     * @allow (create) - If the user is an Admin or Accountant.
     * @allow (get, list) - Public read access.
     * @deny (update, delete) - Only admins and accountants can update and delete
     * @principle Restricts company creation to admins and accountants, allows public read access.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
        allow get, list: if true;
        allow create: if isAdmin() || isAccountant();
        allow update: if isAdmin() || isAccountant();
        allow delete: if isAdmin() || isAccountant();
    }

   /**
     * @description Controls access to employees within a company. Only Admins and Accountants can create, update and delete.
     *              Everyone can read.
     * @path /companies/{companyId}/employees
     * @allow (create) - If the user is an Admin or Accountant.
     * @allow (get, list) - Public read access.
     * @deny (update, delete) - Only admins and accountants can update and delete
     * @principle Restricts company creation to admins and accountants, allows public read access.
     */
    match /companies/{companyId}/employees/{employeeId} {
        allow get, list: if true;
        allow create: if isAdmin() || isAccountant();
        allow update: if isAdmin() || isAccountant();
        allow delete: if isAdmin() || isAccountant();
    }

    /**
     * @description Controls access to purchases within a company. Only Admins and Accountants can create, update and delete.
     *              Everyone can read.
     * @path /companies/{companyId}/purchases
     * @allow (create) - If the user is an Admin or Accountant.
     * @allow (get, list) - Public read access.
     * @deny (update, delete) - Only admins and accountants can update and delete
     * @principle Restricts company creation to admins and accountants, allows public read access.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
        allow get, list: if true;
        allow create: if isAdmin() || isAccountant();
        allow update: if isAdmin() || isAccountant();
        allow delete: if isAdmin() || isAccountant();
    }

    /**
     * @description Controls access to sales within a company. Only Admins and Accountants can create, update and delete.
     *              Everyone can read.
     * @path /companies/{companyId}/sales
     * @allow (create) - If the user is an Admin or Accountant.
     * @allow (get, list) - Public read access.
     * @deny (update, delete) - Only admins and accountants can update and delete
     * @principle Restricts company creation to admins and accountants, allows public read access.
     */
    match /companies/{companyId}/sales/{saleId} {
        allow get, list: if true;
        allow create: if isAdmin() || isAccountant();
        allow update: if isAdmin() || isAccountant();
        allow delete: if isAdmin() || isAccountant();
    }

    /**
     * @description Controls access to fees within a company. Only Admins and Accountants can create, update and delete.
     *              Everyone can read.
     * @path /companies/{companyId}/fees
     * @allow (create) - If the user is an Admin or Accountant.
     * @allow (get, list) - Public read access.
     * @deny (update, delete) - Only admins and accountants can update and delete
     * @principle Restricts company creation to admins and accountants, allows public read access.
     */
    match /companies/{companyId}/fees/{feeId} {
        allow get, list: if true;
        allow create: if isAdmin() || isAccountant();
        allow update: if isAdmin() || isAccountant();
        allow delete: if isAdmin() || isAccountant();
    }

    /**
     * @description Controls access to account groups within a user's scope.
     * @path /users/{userId}/account-groups
     * @allow (get, list) - If the user is the owner.
     * @allow (create, update, delete) - If the user is the owner.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces user-specific data access for account groups.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to institutions within a user's scope.
     * @path /users/{userId}/institutions
     * @allow (get, list) - If the user is the owner.
     * @allow (create, update, delete) - If the user is the owner.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces user-specific data access for institutions.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to family allowance parameters within a user's scope.
     * @path /users/{userId}/family-allowance-parameters
     * @allow (get, list) - If the user is the owner.
     * @allow (create, update, delete) - If the user is the owner.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces user-specific data access for family allowance parameters.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tax parameters within a user's scope.
     * @path /users/{userId}/tax-parameters
     * @allow (get, list) - If the user is the owner.
     * @allow (create, update, delete) - If the user is the owner.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces user-specific data access for tax parameters.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to health entities within a user's scope.
     * @path /users/{userId}/health-entities
     * @allow (get, list) - If the user is the owner.
     * @allow (create, update, delete) - If the user is the owner.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces user-specific data access for health entities.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to AFP entities within a user's scope.
     * @path /users/{userId}/afp-entities
     * @allow (get, list) - If the user is the owner.
     * @allow (create, update, delete) - If the user is the owner.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces user-specific data access for AFP entities.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}