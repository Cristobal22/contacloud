/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model for personal data
 *  and a company-based ownership model for accounting data. Users can only access their
 *  own profile data.  Company data access is implicitly granted to all authenticated users.
 * @data-structure
 *  - /users/{userId}: User profiles, accessible only by the owning user.
 *  - /companies/{companyId}: Companies, accessible by any authenticated user.
 *  - /companies/{companyId}/accounts: Accounts for a company, accessible by any authenticated user.
 *  - /companies/{companyId}/vouchers: Vouchers for a company, accessible by any authenticated user.
 *  - /companies/{companyId}/subjects: Subjects for a company, accessible by any authenticated user.
 *  - /companies/{companyId}/cost-centers: Cost centers for a company, accessible by any authenticated user.
 *  - /companies/{companyId}/employees: Employees for a company, accessible by any authenticated user.
 *  - /companies/{companyId}/purchases: Purchases for a company, accessible by any authenticated user.
 *  - /companies/{companyId}/sales: Sales for a company, accessible by any authenticated user.
 *  - /companies/{companyId}/fees: Fees for a company, accessible by any authenticated user.
 *  - /users/{userId}/account-groups: Account groups for a user, accessible only by the owning user.
 *  - /users/{userId}/institutions: Institutions for a user, accessible only by the owning user.
 *  - /users/{userId}/family-allowance-parameters: Family allowance parameters for a user, accessible only by the owning user.
 *  - /users/{userId}/tax-parameters: Tax parameters for a user, accessible only by the owning user.
 *  - /users/{userId}/health-entities: Health entities for a user, accessible only by the owning user.
 *  - /users/{userId}/afp-entities: AFP entities for a user, accessible only by the owning user.
 * @key-security-decisions
 *  - Listing of all users is explicitly denied.
 * @denormalization-for-authorization N/A - No denormalization is needed at this time.
 * @structural-segregation N/A - No structural segregation is needed at this time.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the owning user can access it.
     * @path /users/{userId}
     * @allow (create) User 'testuser' with uid '123' can create their profile if request.auth.uid == '123' and request.resource.data.uid == '123'.
     * @deny (create) User 'testuser' with uid '123' cannot create a profile for userId '456'.
     * @allow (get) User 'testuser' with uid '123' can read their profile at /users/123.
     * @deny (get) User 'testuser' with uid '123' cannot read the profile of another user at /users/456.
     * @allow (update) User 'testuser' with uid '123' can update their profile at /users/123.
     * @deny (update) User 'testuser' with uid '123' cannot update the profile of another user at /users/456.
     * @allow (delete) User 'testuser' with uid '123' can delete their profile at /users/123.
     * @deny (delete) User 'testuser' with uid '123' cannot delete the profile of another user at /users/456.
     * @principle Enforces document ownership for all read/write operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages company data, allowing access to any authenticated user.
     * @path /companies/{companyId}
     * @allow (get) Any authenticated user can read company data.
     * @allow (list) Any authenticated user can list companies.
     * @deny (create) No one can create a company (for prototyping, should be admin later).
     * @deny (update) No one can update a company (for prototyping, should be admin or company owner later).
     * @deny (delete) No one can delete a company (for prototyping, should be admin later).
     * @principle Grants read access to any authenticated user, restricts write access.
     */
    match /companies/{companyId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages account data within a specific company, allowing access to any authenticated user.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get) Any authenticated user can read account data.
     * @allow (list) Any authenticated user can list accounts.
     * @deny (create) No one can create an account (for prototyping, should be admin or company owner later).
     * @deny (update) No one can update an account (for prototyping, should be admin or company owner later).
     * @deny (delete) No one can delete an account (for prototyping, should be admin or company owner later).
     * @principle Grants read access to any authenticated user, restricts write access.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages voucher data within a specific company, allowing access to any authenticated user.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get) Any authenticated user can read voucher data.
     * @allow (list) Any authenticated user can list vouchers.
     * @deny (create) No one can create a voucher (for prototyping, should be admin or company owner later).
     * @deny (update) No one can update a voucher (for prototyping, should be admin or company owner later).
     * @deny (delete) No one can delete a voucher (for prototyping, should be admin or company owner later).
     * @principle Grants read access to any authenticated user, restricts write access.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages subject data within a specific company, allowing access to any authenticated user.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get) Any authenticated user can read subject data.
     * @allow (list) Any authenticated user can list subjects.
     * @deny (create) No one can create a subject (for prototyping, should be admin or company owner later).
     * @deny (update) No one can update a subject (for prototyping, should be admin or company owner later).
     * @deny (delete) No one can delete a subject (for prototyping, should be admin or company owner later).
     * @principle Grants read access to any authenticated user, restricts write access.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages cost center data within a specific company, allowing access to any authenticated user.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get) Any authenticated user can read cost center data.
     * @allow (list) Any authenticated user can list cost centers.
     * @deny (create) No one can create a cost center (for prototyping, should be admin or company owner later).
     * @deny (update) No one can update a cost center (for prototyping, should be admin or company owner later).
     * @deny (delete) No one can delete a cost center (for prototyping, should be admin or company owner later).
     * @principle Grants read access to any authenticated user, restricts write access.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages employee data within a specific company, allowing access to any authenticated user.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get) Any authenticated user can read employee data.
     * @allow (list) Any authenticated user can list employees.
     * @deny (create) No one can create an employee (for prototyping, should be admin or company owner later).
     * @deny (update) No one can update an employee (for prototyping, should be admin or company owner later).
     * @deny (delete) No one can delete an employee (for prototyping, should be admin or company owner later).
     * @principle Grants read access to any authenticated user, restricts write access.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Manages purchase data within a specific company, allowing access to any authenticated user.
      * @path /companies/{companyId}/purchases/{purchaseId}
      * @allow (get) Any authenticated user can read purchase data.
      * @allow (list) Any authenticated user can list purchases.
      * @deny (create) No one can create a purchase document (for prototyping, should be admin or company owner later).
      * @deny (update) No one can update a purchase document (for prototyping, should be admin or company owner later).
      * @deny (delete) No one can delete a purchase document (for prototyping, should be admin or company owner later).
      * @principle Grants read access to any authenticated user, restricts write access.
      */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages sales data within a specific company, allowing access to any authenticated user.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get) Any authenticated user can read sale data.
     * @allow (list) Any authenticated user can list sales.
     * @deny (create) No one can create a sale document (for prototyping, should be admin or company owner later).
     * @deny (update) No one can update a sale document (for prototyping, should be admin or company owner later).
     * @deny (delete) No one can delete a sale document (for prototyping, should be admin or company owner later).
     * @principle Grants read access to any authenticated user, restricts write access.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages fee data within a specific company, allowing access to any authenticated user.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get) Any authenticated user can read fee data.
     * @allow (list) Any authenticated user can list fees.
     * @deny (create) No one can create a fee document (for prototyping, should be admin or company owner later).
     * @deny (update) No one can update a fee document (for prototyping, should be admin or company owner later).
     * @deny (delete) No one can delete a fee document (for prototyping, should be admin or company owner later).
     * @principle Grants read access to any authenticated user, restricts write access.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user-specific account group data.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (create) User 'testuser' with uid '123' can create an account group if request.auth.uid == '123'.
     * @deny (create) User 'testuser' with uid '123' cannot create an account group for userId '456'.
     * @allow (get) User 'testuser' with uid '123' can read their account group at /users/123/account-groups/abc.
     * @allow (list) User 'testuser' with uid '123' can list their account groups at /users/123/account-groups.
     * @deny (get) User 'testuser' with uid '123' cannot read the account group of another user at /users/456/account-groups/abc.
     * @deny (list) User 'testuser' with uid '123' cannot list the account groups of another user at /users/456/account-groups.
     * @allow (update) User 'testuser' with uid '123' can update their account group at /users/123/account-groups/abc.
     * @deny (update) User 'testuser' with uid '123' cannot update the account group of another user at /users/456/account-groups/abc.
     * @allow (delete) User 'testuser' with uid '123' can delete their account group at /users/123/account-groups/abc.
     * @deny (delete) User 'testuser' with uid '123' cannot delete the account group of another user at /users/456/account-groups/abc.
     * @principle Enforces document ownership for all read/write operations.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user-specific institution data.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (create) User 'testuser' with uid '123' can create an institution if request.auth.uid == '123'.
     * @deny (create) User 'testuser' with uid '123' cannot create an institution for userId '456'.
     * @allow (get) User 'testuser' with uid '123' can read their institution at /users/123/institutions/abc.
     * @allow (list) User 'testuser' with uid '123' can list their institutions at /users/123/institutions.
     * @deny (get) User 'testuser' with uid '123' cannot read the institution of another user at /users/456/institutions/abc.
     * @deny (list) User 'testuser' with uid '123' cannot list the institutions of another user at /users/456/institutions.
     * @allow (update) User 'testuser' with uid '123' can update their institution at /users/123/institutions/abc.
     * @deny (update) User 'testuser' with uid '123' cannot update the institution of another user at /users/456/institutions/abc.
     * @allow (delete) User 'testuser' with uid '123' can delete their institution at /users/123/institutions/abc.
     * @deny (delete) User 'testuser' with uid '123' cannot delete the institution of another user at /users/456/institutions/abc.
     * @principle Enforces document ownership for all read/write operations.
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user-specific family allowance parameter data.
     * @path /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (create) User 'testuser' with uid '123' can create a family allowance parameter if request.auth.uid == '123'.
     * @deny (create) User 'testuser' with uid '123' cannot create a family allowance parameter for userId '456'.
     * @allow (get) User 'testuser' with uid '123' can read their family allowance parameter at /users/123/family-allowance-parameters/abc.
     * @allow (list) User 'testuser' with uid '123' can list their family allowance parameters at /users/123/family-allowance-parameters.
     * @deny (get) User 'testuser' with uid '123' cannot read the family allowance parameter of another user at /users/456/family-allowance-parameters/abc.
     * @deny (list) User 'testuser' with uid '123' cannot list the family allowance parameters of another user at /users/456/family-allowance-parameters.
     * @allow (update) User 'testuser' with uid '123' can update their family allowance parameter at /users/123/family-allowance-parameters/abc.
     * @deny (update) User 'testuser' with uid '123' cannot update the family allowance parameter of another user at /users/456/family-allowance-parameters/abc.
     * @allow (delete) User 'testuser' with uid '123' can delete their family allowance parameter at /users/123/family-allowance-parameters/abc.
     * @deny (delete) User 'testuser' with uid '123' cannot delete the family allowance parameter of another user at /users/456/family-allowance-parameters/abc.
     * @principle Enforces document ownership for all read/write operations.
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user-specific tax parameter data.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     * @allow (create) User 'testuser' with uid '123' can create a tax parameter if request.auth.uid == '123'.
     * @deny (create) User 'testuser' with uid '123' cannot create a tax parameter for userId '456'.
     * @allow (get) User 'testuser' with uid '123' can read their tax parameter at /users/123/tax-parameters/abc.
     * @allow (list) User 'testuser' with uid '123' can list their tax parameters at /users/123/tax-parameters.
     * @deny (get) User 'testuser' with uid '123' cannot read the tax parameter of another user at /users/456/tax-parameters/abc.
     * @deny (list) User 'testuser' with uid '123' cannot list the tax parameters of another user at /users/456/tax-parameters.
     * @allow (update) User 'testuser' with uid '123' can update their tax parameter at /users/123/tax-parameters/abc.
     * @deny (update) User 'testuser' with uid '123' cannot update the tax parameter of another user at /users/456/tax-parameters/abc.
     * @allow (delete) User 'testuser' with uid '123' can delete their tax parameter at /users/123/tax-parameters/abc.
     * @deny (delete) User 'testuser' with uid '123' cannot delete the tax parameter of another user at /users/456/tax-parameters/abc.
     * @principle Enforces document ownership for all read/write operations.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Manages user-specific health entity data.
      * @path /users/{userId}/health-entities/{healthEntityId}
      * @allow (create) User 'testuser' with uid '123' can create a health entity if request.auth.uid == '123'.
      * @deny (create) User 'testuser' with uid '123' cannot create a health entity for userId '456'.
      * @allow (get) User 'testuser' with uid '123' can read their health entity at /users/123/health-entities/abc.
      * @allow (list) User 'testuser' with uid '123' can list their health entities at /users/123/health-entities.
      * @deny (get) User 'testuser' with uid '123' cannot read the health entity of another user at /users/456/health-entities/abc.
      * @deny (list) User 'testuser' with uid '123' cannot list the health entities of another user at /users/456/health-entities.
      * @allow (update) User 'testuser' with uid '123' can update their health entity at /users/123/health-entities/abc.
      * @deny (update) User 'testuser' with uid '123' cannot update the health entity of another user at /users/456/health-entities/abc.
      * @allow (delete) User 'testuser' with uid '123' can delete their health entity at /users/123/health-entities/abc.
      * @deny (delete) User 'testuser' with uid '123' cannot delete the health entity of another user at /users/456/health-entities/abc.
      * @principle Enforces document ownership for all read/write operations.
      */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user-specific AFP entity data.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     * @allow (create) User 'testuser' with uid '123' can create an AFP entity if request.auth.uid == '123'.
     * @deny (create) User 'testuser' with uid '123' cannot create an AFP entity for userId '456'.
     * @allow (get) User 'testuser' with uid '123' can read their AFP entity at /users/123/afp-entities/abc.
     * @allow (list) User 'testuser' with uid '123' can list their AFP entities at /users/123/afp-entities.
     * @deny (get) User 'testuser' with uid '123' cannot read the AFP entity of another user at /users/456/afp-entities/abc.
     * @deny (list) User 'testuser' with uid '123' cannot list the AFP entities of another user at /users/456/afp-entities.
     * @allow (update) User 'testuser' with uid '123' can update their AFP entity at /users/123/afp-entities/abc.
     * @deny (update) User 'testuser' with uid '123' cannot update the AFP entity of another user at /users/456/afp-entities/abc.
     * @allow (delete) User 'testuser' with uid '123' can delete their AFP entity at /users/123/afp-entities/abc.
     * @deny (delete) User 'testuser' with uid '123' cannot delete the AFP entity of another user at /users/456/afp-entities/abc.
     * @principle Enforces document ownership for all read/write operations.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}