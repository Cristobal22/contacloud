/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-tenant security model where users are associated with companies, and access to company data is restricted to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /companies/{companyId}: Stores company data. Access to company data requires the user to be associated with the company via the 'companyIds' array in their user profile.
 * - /companies/{companyId}/*: Subcollections under a company (e.g., accounts, vouchers) inherit the same access control as the parent company.
 * - /account-groups, /institutions, /family-allowance-parameters, /tax-parameters, /health-entities, /afp-entities: Global collections that are publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile data.
 * - Users can only access data for companies they are explicitly associated with.
 * - Global collections (account-groups, institutions, parameters) are publicly readable but not writable.
 * - Data validation is minimized in this prototyping phase to allow flexible data shapes.
 *
 * Denormalization for Authorization:
 * - The 'UserProfile' includes a 'companyIds' array. This denormalization allows rules to quickly check if a user is authorized to access a company's data without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with matching UID can access their profile.
     * @deny (get, create, update, delete) User attempts to access another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows users associated with a company to read company data.
     * @path /companies/{companyId}
     * @allow (get, list) User associated with company can read company data.
     * @deny (get, list) User not associated with company attempts to read company data.
     * @principle Enforces multi-tenancy; users can only access companies they are associated with.
     */
    match /companies/{companyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isUserAssociatedWithCompany(companyId) {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }
      
      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if false;
      allow create: if false; 
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Allows users associated with a company to manage accounts for that company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) User associated with company can read accounts.
     * @deny (get, list) User not associated with company attempts to read accounts.
     * @principle Enforces multi-tenancy; users can only access companies they are associated with.
     */
    match /companies/{companyId}/accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isUserAssociatedWithCompany(companyId) {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId) ;
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with a company to manage vouchers for that company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) User associated with company can read vouchers.
     * @deny (get, list) User not associated with company attempts to read vouchers.
     * @principle Enforces multi-tenancy; users can only access companies they are associated with.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isUserAssociatedWithCompany(companyId) {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

     /**
     * @description Allows users associated with a company to manage subjects for that company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) User associated with company can read subjects.
     * @deny (get, list) User not associated with company attempts to read subjects.
     * @principle Enforces multi-tenancy; users can only access companies they are associated with.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isUserAssociatedWithCompany(companyId) {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with a company to manage cost centers for that company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) User associated with company can read cost centers.
     * @deny (get, list) User not associated with company attempts to read cost centers.
     * @principle Enforces multi-tenancy; users can only access companies they are associated with.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isUserAssociatedWithCompany(companyId) {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with a company to manage employees for that company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) User associated with company can read employees.
     * @deny (get, list) User not associated with company attempts to read employees.
     * @principle Enforces multi-tenancy; users can only access companies they are associated with.
     */
    match /companies/{companyId}/employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isUserAssociatedWithCompany(companyId) {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with a company to manage purchases for that company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) User associated with company can read purchases.
     * @deny (get, list) User not associated with company attempts to read purchases.
     * @principle Enforces multi-tenancy; users can only access companies they are associated with.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isUserAssociatedWithCompany(companyId) {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with a company to manage sales for that company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) User associated with company can read sales.
     * @deny (get, list) User not associated with company attempts to read sales.
     * @principle Enforces multi-tenancy; users can only access companies they are associated with.
     */
    match /companies/{companyId}/sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isUserAssociatedWithCompany(companyId) {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows users associated with a company to manage fees for that company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) User associated with company can read fees.
     * @deny (get, list) User not associated with company attempts to read fees.
     * @principle Enforces multi-tenancy; users can only access companies they are associated with.
     */
    match /companies/{companyId}/fees/{feeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isUserAssociatedWithCompany(companyId) {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
      }

      allow get: if isUserAssociatedWithCompany(companyId);
      allow list: if isUserAssociatedWithCompany(companyId);
      allow create: if isUserAssociatedWithCompany(companyId);
      allow update: if isUserAssociatedWithCompany(companyId) && resource != null;
      allow delete: if isUserAssociatedWithCompany(companyId) && resource != null;
    }

    /**
     * @description Allows anyone to read account groups. Write access is denied.
     * @path /account-groups/{accountGroupId}
     * @allow (get, list) Any user can read account groups.
     * @deny (create, update, delete) No one can modify account groups.
     * @principle Global read-only collection.
     */
    match /account-groups/{accountGroupId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read institutions. Write access is denied.
     * @path /institutions/{institutionId}
     * @allow (get, list) Any user can read institutions.
     * @deny (create, update, delete) No one can modify institutions.
     * @principle Global read-only collection.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read family allowance parameters. Write access is denied.
     * @path /family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (get, list) Any user can read family allowance parameters.
     * @deny (create, update, delete) No one can modify family allowance parameters.
     * @principle Global read-only collection.
     */
    match /family-allowance-parameters/{familyAllowanceParameterId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read tax parameters. Write access is denied.
     * @path /tax-parameters/{taxParameterId}
     * @allow (get, list) Any user can read tax parameters.
     * @deny (create, update, delete) No one can modify tax parameters.
     * @principle Global read-only collection.
     */
    match /tax-parameters/{taxParameterId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read health entities. Write access is denied.
     * @path /health-entities/{healthEntityId}
     * @allow (get, list) Any user can read health entities.
     * @deny (create, update, delete) No one can modify health entities.
     * @principle Global read-only collection.
     */
    match /health-entities/{healthEntityId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read AFP entities. Write access is denied.
     * @path /afp-entities/{afpEntityId}
     * @allow (get, list) Any user can read AFP entities.
     * @deny (create, update, delete) No one can modify AFP entities.
     * @principle Global read-only collection.
     */
    match /afp-entities/{afpEntityId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}