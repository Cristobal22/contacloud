/**
 * @fileoverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a company-centric model for business data.
 * Users can only manage their own profiles. Companies and their associated data (accounts, vouchers, etc.)
 * are secured such that only authorized users (owners, admins, accountants) can access them.
 * Global configuration collections (economic indicators, institutions, etc.) are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, owned by the user with matching UID.
 * - /companies/{companyId}: Company data, owned by a specific user (ownerId).
 * - /companies/{companyId}/accounts: Accounting accounts for the company.
 * - /companies/{companyId}/vouchers: Accounting vouchers for the company.
 * - /companies/{companyId}/subjects: Subjects (clients, providers) for the company.
 * - /companies/{companyId}/cost-centers: Cost centers for the company.
 * - /companies/{companyId}/employees: Employees for the company.
 * - /companies/{companyId}/payrolls: Payroll data for the company.
 * - /economic-indicators/{indicatorId}: Publicly readable economic indicator data.
 * - /institutions/{institutionId}: Publicly readable institution data.
 * - /family-allowance-parameters/{paramId}: Publicly readable family allowance parameters.
 * - /tax-parameters/{paramId}: Publicly readable tax parameters.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Global configuration collections (economic-indicators, institutions) are publicly readable.
 * - Write access to company-related data is restricted to authorized users.
 *
 * Denormalization for Authorization:
 * To ensure efficient security rules, the following authorization-related data denormalizations are recommended:
 * - Companies: The `Company` document must contain an `ownerId` field representing the UID of the user who owns the company.
 * This enables fast ownership checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data, allowing only the user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures company data, allowing only the owner to read and write company data.
     * @path /companies/{companyId}
     * @allow (create, update, delete) if request.auth.uid == resource.data.ownerId
     * @allow (get, list) if request.auth.uid == resource.data.ownerId
     * @deny (create, update, delete) if request.auth.uid != resource.data.ownerId
     * @deny (get, list) if request.auth.uid != resource.data.ownerId
     * @principle Enforces document ownership for companies.
     */
    match /companies/{companyId} {
        function isOwner(companyId) {
            return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
        }
        allow get: if true;
        allow list: if true;
        allow create: if request.resource.data.ownerId == request.auth.uid;
        allow update: if isExistingOwner(companyId);
        allow delete: if isExistingOwner(companyId);

        function isExistingOwner(companyId) {
            return (isOwner(companyId) && resource != null);
        }

        /**
         * @description Secures company accounts, allowing only the company owner to manage them.
         * @path /companies/{companyId}/accounts/{accountId}
         * @allow (create, update, delete) if isOwner(companyId)
         * @allow (get, list) if isOwner(companyId)
         * @deny (create, update, delete) if !isOwner(companyId)
         * @deny (get, list) if !isOwner(companyId)
         * @principle Enforces company ownership for managing accounts.
         */
        match /accounts/{accountId} {
            allow get: if isOwner(companyId);
            allow list: if isOwner(companyId);
            allow create: if isOwner(companyId);
            allow update: if isExistingOwner(companyId);
            allow delete: if isExistingOwner(companyId);
        }

        /**
         * @description Secures company vouchers, allowing only the company owner to manage them.
         * @path /companies/{companyId}/vouchers/{voucherId}
         * @allow (create, update, delete) if isOwner(companyId)
         * @allow (get, list) if isOwner(companyId)
         * @deny (create, update, delete) if !isOwner(companyId)
         * @deny (get, list) if !isOwner(companyId)
         */
        match /vouchers/{voucherId} {
            allow get: if isOwner(companyId);
            allow list: if isOwner(companyId);
            allow create: if isOwner(companyId);
            allow update: if isExistingOwner(companyId);
            allow delete: if isExistingOwner(companyId);
        }

        /**
         * @description Secures company subjects, allowing only the company owner to manage them.
         * @path /companies/{companyId}/subjects/{subjectId}
         */
        match /subjects/{subjectId} {
            allow get: if isOwner(companyId);
            allow list: if isOwner(companyId);
            allow create: if isOwner(companyId);
            allow update: if isExistingOwner(companyId);
            allow delete: if isExistingOwner(companyId);
        }

        /**
         * @description Secures company cost centers, allowing only the company owner to manage them.
         * @path /companies/{companyId}/cost-centers/{costCenterId}
         */
        match /cost-centers/{costCenterId} {
            allow get: if isOwner(companyId);
            allow list: if isOwner(companyId);
            allow create: if isOwner(companyId);
            allow update: if isExistingOwner(companyId);
            allow delete: if isExistingOwner(companyId);
        }

        /**
         * @description Secures company employees, allowing only the company owner to manage them.
         * @path /companies/{companyId}/employees/{employeeId}
         */
        match /employees/{employeeId} {
            allow get: if isOwner(companyId);
            allow list: if isOwner(companyId);
            allow create: if isOwner(companyId);
            allow update: if isExistingOwner(companyId);
            allow delete: if isExistingOwner(companyId);
        }

        /**
         * @description Secures company payrolls, allowing only the company owner to manage them.
         * @path /companies/{companyId}/payrolls/{payrollId}
         */
        match /payrolls/{payrollId} {
            allow get: if isOwner(companyId);
            allow list: if isOwner(companyId);
            allow create: if isOwner(companyId);
            allow update: if isExistingOwner(companyId);
            allow delete: if isExistingOwner(companyId);
        }
         /**
          * @description Secures company purchases, allowing only the company owner to manage them.
          * @path /companies/{companyId}/purchases/{purchaseId}
          */
        match /purchases/{purchaseId} {
            allow get: if isOwner(companyId);
            allow list: if isOwner(companyId);
            allow create: if isOwner(companyId);
            allow update: if isExistingOwner(companyId);
            allow delete: if isExistingOwner(companyId);
        }

        /**
         * @description Secures company sales, allowing only the company owner to manage them.
         * @path /companies/{companyId}/sales/{saleId}
         */
        match /sales/{saleId} {
            allow get: if isOwner(companyId);
            allow list: if isOwner(companyId);
            allow create: if isOwner(companyId);
            allow update: if isExistingOwner(companyId);
            allow delete: if isExistingOwner(companyId);
        }

        /**
         * @description Secures company fees, allowing only the company owner to manage them.
         * @path /companies/{companyId}/fees/{feeId}
         */
        match /fees/{feeId} {
            allow get: if isOwner(companyId);
            allow list: if isOwner(companyId);
            allow create: if isOwner(companyId);
            allow update: if isExistingOwner(companyId);
            allow delete: if isExistingOwner(companyId);
        }

        /**
         * @description Secures company economic indicators overrides, allowing only the company owner to manage them.
         * @path /companies/{companyId}/economic-indicators/{indicatorId}
         */
        match /economic-indicators/{indicatorId} {
            allow get: if isOwner(companyId);
            allow list: if isOwner(companyId);
            allow create: if isOwner(companyId);
            allow update: if isExistingOwner(companyId);
            allow delete: if isExistingOwner(companyId);
        }
    }

    /**
     * @description Secures user-specific account groups, allowing only the user to manage their own groups.
     * @path /users/{userId}/account-groups/{groupId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     */
    match /users/{userId}/account-groups/{groupId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to global economic indicators. Write access is denied.
     * @path /economic-indicators/{indicatorId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if false
     */
    match /economic-indicators/{indicatorId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to health entities. Write access is denied.
     * @path /health-entities/{entityId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if false
     */
    match /health-entities/{entityId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to AFP entities. Write access is denied.
     * @path /afp-entities/{entityId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if false
     */
    match /afp-entities/{entityId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to family allowance parameters. Write access is denied.
     * @path /family-allowance-parameters/{paramId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if false
     */
    match /family-allowance-parameters/{paramId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to tax parameters. Write access is denied.
     * @path /tax-parameters/{paramId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if false
     */
    match /tax-parameters/{paramId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to institutions. Write access is denied.
     * @path /institutions/{institutionId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if false
     */
    match /institutions/{institutionId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}