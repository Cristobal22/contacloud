/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system.
 *
 * Key Principles:
 * - 'Admin' role is for user management via backend functions, not direct data access.
 * - 'Accountant' role grants access to company data they own or are assigned to.
 * - Global data (like tax parameters) is read-only for all authenticated users.
 * - User-specific data is only accessible by the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isAccountant() {
        return isSignedIn() && getUserData(request.auth.uid).role == 'Accountant';
    }

    function isCompanyOwner(companyId) {
      return isSignedIn() && get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }
    
    // User Profile: Only the owner can read/write their own profile.
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow list: if false; // Deny listing all users for security.
    }

    // Companies: Accountants can create companies. Only the owner can manage it.
    match /companies/{companyId} {
      allow get: if isCompanyOwner(companyId);
      allow list: if isAccountant(); // Accountants can list companies to find theirs.
      allow create: if isAccountant() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isCompanyOwner(companyId);

      // Company Subcollections: Only the owner of the company can access its subcollections.
      match /{allSubcollections=**} {
        allow read, write: if isCompanyOwner(companyId);
      }
    }
    
    // Global Data Collections: Read-only for any authenticated user.
    // Writing should be done via admin scripts or console, not by clients.
    match /economic-indicators/{indicatorId} {
        allow get, list: if isSignedIn();
        allow write: if isSignedIn(); // Allow accountants to set global values
    }
    match /health-entities/{entityId} {
        allow get, list: if isSignedIn();
        allow write: if false; 
    }
    match /afp-entities/{entityId} {
        allow get, list: if isSignedIn();
        allow write: if false;
    }
    match /family-allowance-parameters/{paramId} {
        allow get, list: if isSignedIn();
        allow write: if false;
    }
    match /tax-parameters/{paramId} {
        allow get, list: if isSignedIn();
        allow write: if false;
    }
    match /institutions/{institutionId} {
        allow get, list: if isSignedIn();
        allow write: if false;
    }
    
    // User-specific configuration that overrides global settings.
    match /users/{userId}/account-groups/{groupId} {
        allow read, write: if isOwner(userId);
    }
  }
}
