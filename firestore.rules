/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and restricts company data access to authorized users. Global parameter and entity
 * data (account groups, institutions, etc.) are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, owned by the user with the corresponding UID.
 * - /companies/{companyId}: Company data, access to which is not explicitly defined
 *   in this ruleset, implying a need for additional access control mechanisms (e.g., roles).
 * - /companies/{companyId}/accounts, /companies/{companyId}/vouchers, etc.:
 *   Company-specific subcollections, access to which is not explicitly defined in this ruleset.
 * - /account-groups, /institutions, etc.: Global collections for parameter data.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned by the authenticated user.
 * - Company and company subcollection access is currently undefined, representing
 *   a security gap that requires further access control implementation based on roles
 *   or shared access patterns.
 * - Global parameter collections are publicly readable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data with owner-only access.
     * @path /users/{userId}
     * @allow (create) User with UID 'gJ2gDGMD3mUaGUUeDnjOuaTzwIm2' can create their own profile.
     * @allow (get, update, delete) User with UID 'gJ2gDGMD3mUaGUUeDnjOuaTzwIm2' can access their own profile.
     * @deny (create) User with UID 'otherUserId' cannot create a profile for 'gJ2gDGMD3mUaGUUeDnjOuaTzwIm2'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Verified user can create their own profile.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      // Only the user can read their own profile.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      // Only the user can update their own profile, and the uid is immutable.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      // Only the user can delete their own profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Define access control rules for the 'companies' collection.
     * @path /companies
     * @allow (get, list) Public read access is granted to all users, including unauthenticated ones.
     * @deny (create, update, delete) All write operations are denied to everyone.
     * @principle  Public read access with owner-only writes.
     */
    match /companies/{companyId} {
       allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Define access control rules for the 'accounts' subcollection.
     * @path /companies/{companyId}/accounts
     * @allow (get, list) Public read access is granted to all users, including unauthenticated ones.
     * @deny (create, update, delete) All write operations are denied to everyone.
     * @principle  Public read access with owner-only writes.
     */
    match /companies/{companyId}/accounts/{accountId} {
       allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

        /**
     * @description Define access control rules for the 'vouchers' subcollection.
     * @path /companies/{companyId}/vouchers
     * @allow (get, list) Public read access is granted to all users, including unauthenticated ones.
     * @deny (create, update, delete) All write operations are denied to everyone.
     * @principle  Public read access with owner-only writes.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
       allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Define access control rules for the 'subjects' subcollection.
     * @path /companies/{companyId}/subjects
     * @allow (get, list) Public read access is granted to all users, including unauthenticated ones.
     * @deny (create, update, delete) All write operations are denied to everyone.
     * @principle  Public read access with owner-only writes.
     */
    match /companies/{companyId}/subjects/{subjectId} {
       allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Define access control rules for the 'cost-centers' subcollection.
     * @path /companies/{companyId}/cost-centers
     * @allow (get, list) Public read access is granted to all users, including unauthenticated ones.
     * @deny (create, update, delete) All write operations are denied to everyone.
     * @principle  Public read access with owner-only writes.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
       allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Define access control rules for the 'employees' subcollection.
     * @path /companies/{companyId}/employees
     * @allow (get, list) Public read access is granted to all users, including unauthenticated ones.
     * @deny (create, update, delete) All write operations are denied to everyone.
     * @principle  Public read access with owner-only writes.
     */
    match /companies/{companyId}/employees/{employeeId} {
       allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Define access control rules for the 'purchases' subcollection.
     * @path /companies/{companyId}/purchases
     * @allow (get, list) Public read access is granted to all users, including unauthenticated ones.
     * @deny (create, update, delete) All write operations are denied to everyone.
     * @principle  Public read access with owner-only writes.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
       allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Define access control rules for the 'sales' subcollection.
     * @path /companies/{companyId}/sales
     * @allow (get, list) Public read access is granted to all users, including unauthenticated ones.
     * @deny (create, update, delete) All write operations are denied to everyone.
     * @principle  Public read access with owner-only writes.
     */
    match /companies/{companyId}/sales/{saleId} {
       allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Define access control rules for the 'fees' subcollection.
     * @path /companies/{companyId}/fees
     * @allow (get, list) Public read access is granted to all users, including unauthenticated ones.
     * @deny (create, update, delete) All write operations are denied to everyone.
     * @principle  Public read access with owner-only writes.
     */
    match /companies/{companyId}/fees/{feeId} {
       allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allow public read-only access to account groups.
     * @path /account-groups/{accountGroupId}
     * @allow (get, list) All users, including unauthenticated ones, can read account groups.
     * @deny (create, update, delete) No one can create, update, or delete account groups.
     * @principle Provides public access to static account group data.
     */
    match /account-groups/{accountGroupId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow public read-only access to institutions.
     * @path /institutions/{institutionId}
     * @allow (get, list) All users, including unauthenticated ones, can read institutions.
     * @deny (create, update, delete) No one can create, update, or delete institutions.
     * @principle Provides public access to static institution data.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow public read-only access to family allowance parameters.
     * @path /family-allowance-parameters/{familyAllowanceParameterId}
     * @allow (get, list) All users, including unauthenticated ones, can read family allowance parameters.
     * @deny (create, update, delete) No one can create, update, or delete family allowance parameters.
     * @principle Provides public access to static family allowance parameter data.
     */
    match /family-allowance-parameters/{familyAllowanceParameterId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow public read-only access to tax parameters.
     * @path /tax-parameters/{taxParameterId}
     * @allow (get, list) All users, including unauthenticated ones, can read tax parameters.
     * @deny (create, update, delete) No one can create, update, or delete tax parameters.
     * @principle Provides public access to static tax parameter data.
     */
    match /tax-parameters/{taxParameterId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow public read-only access to health entities.
     * @path /health-entities/{healthEntityId}
     * @allow (get, list) All users, including unauthenticated ones, can read health entities.
     * @deny (create, update, delete) No one can create, update, or delete health entities.
     * @principle Provides public access to static health entity data.
     */
     match /health-entities/{healthEntityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow public read-only access to AFP entities.
     * @path /afp-entities/{afpEntityId}
     * @allow (get, list) All users, including unauthenticated ones, can read AFP entities.
     * @deny (create, update, delete) No one can create, update, or delete AFP entities.
     */
     match /afp-entities/{afpEntityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}