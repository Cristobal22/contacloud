/**
 * @fileOverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. User profiles are private and
 * owned by the individual user. Company data is generally shared between users
 * who are associated with the company. Accountants can also create companies.
 * Certain global configuration data (AccountGroups, Institutions, etc.) are private to each user.
 *
 * Data Structure:
 * - /users/{userId}: User profile data.
 * - /companies/{companyId}: Company data.
 * - /companies/{companyId}/accounts: Chart of accounts for a company.
 * - /companies/{companyId}/vouchers: Accounting vouchers.
 * - /companies/{companyId}/subjects: Clients, providers, etc.
 * - /companies/{companyId}/cost-centers: Cost centers.
 * - /companies/{companyId}/employees: Employees.
 * - /companies/{companyId}/purchases: Purchase documents.
 * - /companies/{companyId}/sales: Sales documents.
 * - /companies/{companyId}/fees: Fee documents.
 * - /users/{userId}/account-groups: User-specific account groups.
 * - /users/{userId}/institutions: User-specific institutions.
 * - /users/{userId}/family-allowance-parameters: User-specific family allowance parameters.
 * - /users/{userId}/tax-parameters: User-specific tax parameters.
 * - /users/{userId}/health-entities: User-specific health entities.
 * - /users/{userId}/afp-entities: User-specific AFP entities.
 *
 * Key Security Decisions:
 * - User profiles are strictly private (owner-only access).
 * - Accountants can create companies.
 * - Company-related data access is based on the user's 'companyIds' array in their profile.
 * - Read-only collections are not used in this version.
 * - Schema validation is relaxed for rapid prototyping but authorization is strictly enforced.
 *
 * Denormalization for Authorization:
 * - The 'companyIds' array on the UserProfile is critical.
 *   It allows rules to quickly check if a user is authorized to access company-specific data without performing extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != userId
     * @deny (update) if request.auth.uid != userId
     * @deny (delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure companies. Accountants and Admins can create companies. Users with the companyId in their profile can read and write.
     * @path /companies/{companyId}
     * @allow (get, list) if request.auth.uid in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds
     * @allow (create) if hasRole(['Accountant', 'Admin'])
     * @allow (update, delete) if request.auth.uid in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds
     * @deny (create) if !hasRole(['Accountant', 'Admin'])
     * @principle Enforces role-based creation and company membership for access.
     */
    match /companies/{companyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function hasRole(roles) {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
      }

      function isMemberOfCompany(companyId) {
        return isSignedIn() && companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
      }

      function isExistingCompanyMember(companyId) {
        return isMemberOfCompany(companyId) && resource != null;
      }

      allow get: if isMemberOfCompany(companyId);
      allow list: if isSignedIn();
      allow create: if hasRole(['Accountant', 'Admin']);
      allow update: if isExistingCompanyMember(companyId);
      allow delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Secure accounts. Only users associated with the company can access accounts.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list, create, update, delete) if request.auth.uid in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds
     * @deny (create) if request.resource.data.companyId != companyId
     * @deny (update) if request.resource.data.companyId != companyId
     * @principle Enforces company membership for access and validates relational integrity.
     */
    match /companies/{companyId}/accounts/{accountId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isMemberOfCompany(companyId) {
          return isSignedIn() && companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
        }

        function isExistingCompanyMember(companyId) {
          return isMemberOfCompany(companyId) && resource != null;
        }

        allow get: if isMemberOfCompany(companyId);
        allow list: if isMemberOfCompany(companyId);
        allow create: if isMemberOfCompany(companyId);
        allow update: if isExistingCompanyMember(companyId);
        allow delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Secure vouchers. Only users associated with the company can access vouchers.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list, create, update, delete) if request.auth.uid in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds
     * @deny (create) if request.resource.data.companyId != companyId
     * @deny (update) if request.resource.data.companyId != companyId
     * @principle Enforces company membership for access and validates relational integrity.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isMemberOfCompany(companyId) {
          return isSignedIn() && companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
        }

        function isExistingCompanyMember(companyId) {
          return isMemberOfCompany(companyId) && resource != null;
        }

        allow get: if isMemberOfCompany(companyId);
        allow list: if isMemberOfCompany(companyId);
        allow create: if isMemberOfCompany(companyId);
        allow update: if isExistingCompanyMember(companyId);
        allow delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Secure subjects. Only users associated with the company can access subjects.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list, create, update, delete) if request.auth.uid in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds
     * @deny (create) if request.resource.data.companyId != companyId
     * @deny (update) if request.resource.data.companyId != companyId
     * @principle Enforces company membership for access and validates relational integrity.
     */
    match /companies/{companyId}/subjects/{subjectId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isMemberOfCompany(companyId) {
          return isSignedIn() && companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
        }

        function isExistingCompanyMember(companyId) {
          return isMemberOfCompany(companyId) && resource != null;
        }

        allow get: if isMemberOfCompany(companyId);
        allow list: if isMemberOfCompany(companyId);
        allow create: if isMemberOfCompany(companyId);
        allow update: if isExistingCompanyMember(companyId);
        allow delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Secure cost centers. Only users associated with the company can access cost centers.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list, create, update, delete) if request.auth.uid in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds
     * @deny (create) if request.resource.data.companyId != companyId
     * @deny (update) if request.resource.data.companyId != companyId
     * @principle Enforces company membership for access and validates relational integrity.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isMemberOfCompany(companyId) {
          return isSignedIn() && companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
        }

        function isExistingCompanyMember(companyId) {
          return isMemberOfCompany(companyId) && resource != null;
        }

        allow get: if isMemberOfCompany(companyId);
        allow list: if isMemberOfCompany(companyId);
        allow create: if isMemberOfCompany(companyId);
        allow update: if isExistingCompanyMember(companyId);
        allow delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Secure employees. Only users associated with the company can access employees.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list, create, update, delete) if request.auth.uid in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds
     * @deny (create) if request.resource.data.companyId != companyId
     * @deny (update) if request.resource.data.companyId != companyId
     * @principle Enforces company membership for access and validates relational integrity.
     */
    match /companies/{companyId}/employees/{employeeId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isMemberOfCompany(companyId) {
          return isSignedIn() && companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
        }

        function isExistingCompanyMember(companyId) {
          return isMemberOfCompany(companyId) && resource != null;
        }

        allow get: if isMemberOfCompany(companyId);
        allow list: if isMemberOfCompany(companyId);
        allow create: if isMemberOfCompany(companyId);
        allow update: if isExistingCompanyMember(companyId);
        allow delete: if isExistingCompanyMember(companyId);
    }

      /**
     * @description Secure purchases. Only users associated with the company can access purchases.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list, create, update, delete) if request.auth.uid in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds
     * @deny (create) if request.resource.data.companyId != companyId
     * @deny (update) if request.resource.data.companyId != companyId
     * @principle Enforces company membership for access and validates relational integrity.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isMemberOfCompany(companyId) {
          return isSignedIn() && companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
        }

        function isExistingCompanyMember(companyId) {
          return isMemberOfCompany(companyId) && resource != null;
        }

        allow get: if isMemberOfCompany(companyId);
        allow list: if isMemberOfCompany(companyId);
        allow create: if isMemberOfCompany(companyId);
        allow update: if isExistingCompanyMember(companyId);
        allow delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Secure sales. Only users associated with the company can access sales.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list, create, update, delete) if request.auth.uid in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds
     * @deny (create) if request.resource.data.companyId != companyId
     * @deny (update) if request.resource.data.companyId != companyId
     * @principle Enforces company membership for access and validates relational integrity.
     */
    match /companies/{companyId}/sales/{saleId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isMemberOfCompany(companyId) {
          return isSignedIn() && companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
        }

        function isExistingCompanyMember(companyId) {
          return isMemberOfCompany(companyId) && resource != null;
        }

        allow get: if isMemberOfCompany(companyId);
        allow list: if isMemberOfCompany(companyId);
        allow create: if isMemberOfCompany(companyId);
        allow update: if isExistingCompanyMember(companyId);
        allow delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Secure fees. Only users associated with the company can access fees.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list, create, update, delete) if request.auth.uid in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds
     * @deny (create) if request.resource.data.companyId != companyId
     * @deny (update) if request.resource.data.companyId != companyId
     * @principle Enforces company membership for access and validates relational integrity.
     */
    match /companies/{companyId}/fees/{feeId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isMemberOfCompany(companyId) {
          return isSignedIn() && companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds;
        }

        function isExistingCompanyMember(companyId) {
          return isMemberOfCompany(companyId) && resource != null;
        }

        allow get: if isMemberOfCompany(companyId);
        allow list: if isMemberOfCompany(companyId);
        allow create: if isMemberOfCompany(companyId);
        allow update: if isExistingCompanyMember(companyId);
        allow delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Secure account groups. Only the owner can access their account groups.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId
     * @deny (create) if request.resource.data.id != accountGroupId
     * @deny (update) if request.resource.data.id != accountGroupId
     * @principle Enforces document ownership for all operations and validates relational integrity.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure institutions. Only the owner can access their institutions.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId
     * @deny (create) if request.resource.data.id != institutionId
     * @deny (update) if request.resource.data.id != institutionId
     * @principle Enforces document ownership for all operations and validates relational integrity.
     */
    match /users/{userId}/institutions/{institutionId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure family allowance parameters. Only the owner can access their parameters.
     * @path /users/{userId}/family-allowance-parameters/{parameterId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId
     * @deny (create) if request.resource.data.id != parameterId
     * @deny (update) if request.resource.data.id != parameterId
     * @principle Enforces document ownership for all operations and validates relational integrity.
     */
    match /users/{userId}/family-allowance-parameters/{parameterId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure tax parameters. Only the owner can access their parameters.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId
     * @deny (create) if request.resource.data.id != taxParameterId
     * @deny (update) if request.resource.data.id != taxParameterId
     * @principle Enforces document ownership for all operations and validates relational integrity.
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Secure health entities. Only the owner can access their health entities.
     * @path /users/{userId}/health-entities/{healthEntityId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId
     * @deny (create) if request.resource.data.id != healthEntityId
     * @deny (update) if request.resource.data.id != healthEntityId
     * @principle Enforces document ownership for all operations and validates relational integrity.
     */
    match /users/{userId}/health-entities/{healthEntityId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure AFP entities. Only the owner can access their AFP entities.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId
     * @deny (create) if request.resource.data.id != afpEntityId
     * @deny (update) if request.resource.data.id != afpEntityId
     * @principle Enforces document ownership for all operations and validates relational integrity.
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}