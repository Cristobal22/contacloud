rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
     * @description Checks if the user has the 'Admin' role.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    /**
     * @description Checks if the user has the 'Accountant' role.
     */
    function isAccountant() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Accountant';
    }

    /**
     * @description Checks if the user is an existing owner (isSignedIn, isOwner and the document exists).
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }


    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (get) User can read their own profile.
     * @allow (create) User can create their own profile.
     * @allow (update) User can update their own profile.
     * @deny (list) User cannot list all profiles.
     * @deny (create) User cannot create another user's profile.
     * @deny (update) User cannot update another user's profile.
     * @principle Enforces document ownership and restricts access to user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if false;
    }

    /**
     * @description Security rules for companies.
     * @path /companies/{companyId}
     * @allow (get) Owner or Admin can read company data.
     * @allow (create) Owner can create company data.
     * @allow (update) Owner or Admin can update company data.
     * @allow (delete) Owner or Admin can delete company data.
     * @deny (create) Non-owner cannot create company data.
     * @deny (update) Non-owner cannot update company data.
     * @principle Enforces document ownership for company data.
     */
    match /companies/{companyId} {
      allow get: if isAdmin() || resource.data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isAdmin() || (isSignedIn() && request.resource.data.ownerId == request.auth.uid);
      allow update: if isAdmin() || (isSignedIn() && resource.data.ownerId == request.auth.uid);
      allow delete: if isAdmin() || (isSignedIn() && resource.data.ownerId == request.auth.uid);
    }

    /**
     * @description Security rules for accounts under a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get) Owner or Admin can read account data.
     * @allow (create) Owner or Admin can create account data.
     * @allow (update) Owner or Admin can update account data.
     * @allow (delete) Owner or Admin can delete account data.
     * @deny (create) Non-owner cannot create account data.
     * @deny (update) Non-owner cannot update account data.
     * @principle Enforces document ownership for accounts.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow update: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow delete: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for vouchers under a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get) Owner or Admin can read voucher data.
     * @allow (create) Owner or Admin can create voucher data.
     * @allow (update) Owner or Admin can update voucher data.
     * @allow (delete) Owner or Admin can delete voucher data.
     * @deny (create) Non-owner cannot create voucher data.
     * @deny (update) Non-owner cannot update voucher data.
     * @principle Enforces document ownership for vouchers.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow update: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow delete: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for subjects under a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get) Owner or Admin can read subject data.
     * @allow (create) Owner or Admin can create subject data.
     * @allow (update) Owner or Admin can update subject data.
     * @allow (delete) Owner or Admin can delete subject data.
     * @deny (create) Non-owner cannot create subject data.
     * @deny (update) Non-owner cannot update subject data.
     * @principle Enforces document ownership for subjects.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow update: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow delete: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for cost centers under a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get) Owner or Admin can read cost center data.
     * @allow (create) Owner or Admin can create cost center data.
     * @allow (update) Owner or Admin can update cost center data.
     * @allow (delete) Owner or Admin can delete cost center data.
     * @deny (create) Non-owner cannot create cost center data.
     * @deny (update) Non-owner cannot update cost center data.
     * @principle Enforces document ownership for cost centers.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow update: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow delete: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for employees under a company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get) Owner or Admin can read employee data.
     * @allow (create) Owner or Admin can create employee data.
     * @allow (update) Owner or Admin can update employee data.
     * @allow (delete) Owner or Admin can delete employee data.
     * @deny (create) Non-owner cannot create employee data.
     * @deny (update) Non-owner cannot update employee data.
     * @principle Enforces document ownership for employees.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow update: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow delete: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for payrolls under a company.
     * @path /companies/{companyId}/payrolls/{payrollId}
     * @allow (get) Owner or Admin can read payroll data.
     * @allow (create) Owner or Admin can create payroll data.
     * @allow (update) Owner or Admin can update payroll data.
     * @allow (delete) Owner or Admin can delete payroll data.
     * @deny (create) Non-owner cannot create payroll data.
     * @deny (update) Non-owner cannot update payroll data.
     * @principle Enforces document ownership for payrolls.
     */
    match /companies/{companyId}/payrolls/{payrollId} {
      allow get: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow update: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow delete: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

     /**
     * @description Security rules for purchases under a company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get) Owner or Admin can read purchase data.
     * @allow (create) Owner or Admin can create purchase data.
     * @allow (update) Owner or Admin can update purchase data.
     * @allow (delete) Owner or Admin can delete purchase data.
     * @deny (create) Non-owner cannot create purchase data.
     * @deny (update) Non-owner cannot update purchase data.
     * @principle Enforces document ownership for purchases.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow update: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow delete: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for sales under a company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get) Owner or Admin can read sale data.
     * @allow (create) Owner or Admin can create sale data.
     * @allow (update) Owner or Admin can update sale data.
     * @allow (delete) Owner or Admin can delete sale data.
     * @deny (create) Non-owner cannot create sale data.
     * @deny (update) Non-owner cannot update sale data.
     * @principle Enforces document ownership for sales.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow update: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow delete: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for fees under a company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get) Owner or Admin can read fee data.
     * @allow (create) Owner or Admin can create fee data.
     * @allow (update) Owner or Admin can update fee data.
     * @allow (delete) Owner or Admin can delete fee data.
     * @deny (create) Non-owner cannot create fee data.
     * @deny (update) Non-owner cannot update fee data.
     * @principle Enforces document ownership for fees.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow update: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow delete: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Security rules for company-specific economic indicators.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     * @allow (get) Owner or Admin can read economic indicator data.
     * @allow (create) Owner or Admin can create economic indicator data.
     * @allow (update) Owner or Admin can update economic indicator data.
     * @allow (delete) Owner or Admin can delete economic indicator data.
     * @deny (create) Non-owner cannot create economic indicator data.
     * @deny (update) Non-owner cannot update economic indicator data.
     * @principle Enforces document ownership for economic indicators within a company.
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
      allow get: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow update: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
      allow delete: if isAdmin() || get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

     /**
     * @description Security rules for account groups under a user.
     * @path /users/{userId}/account-groups/{groupId}
     * @allow (get) Owner can read account group data.
     * @allow (create) Owner can create account group data.
     * @allow (update) Owner can update account group data.
     * @allow (delete) Owner can delete account group data.
     * @deny (create) Non-owner cannot create account group data.
     * @deny (update) Non-owner cannot update account group data.
     * @principle Enforces document ownership for account groups.
     */
    match /users/{userId}/account-groups/{groupId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for global economic indicators.
     * @path /economic-indicators/{indicatorId}
     * @allow (get) Public read access for all users.
     * @allow (create) Admin-only access for creation.
     * @allow (update) Admin-only access for updates.
     * @allow (delete) Admin-only access for deletion.
     * @principle Public read, admin-only write for global parameters.
     */
    match /economic-indicators/{indicatorId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for global health entities.
     * @path /health-entities/{entityId}
     * @allow (get) Public read access for all users.
     * @allow (create) Admin-only access for creation.
     * @allow (update) Admin-only access for updates.
     * @allow (delete) Admin-only access for deletion.
     * @principle Public read, admin-only write for global parameters.
     */
    match /health-entities/{entityId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for global AFP entities.
     * @path /afp-entities/{entityId}
     * @allow (get) Public read access for all users.
     * @allow (create) Admin-only access for creation.
     * @allow (update) Admin-only access for updates.
     * @allow (delete) Admin-only access for deletion.
     * @principle Public read, admin-only write for global parameters.
     */
    match /afp-entities/{entityId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for global family allowance parameters.
     * @path /family-allowance-parameters/{paramId}
     * @allow (get) Public read access for all users.
     * @allow (create) Admin-only access for creation.
     * @allow (update) Admin-only access for updates.
     * @allow (delete) Admin-only access for deletion.
     * @principle Public read, admin-only write for global parameters.
     */
    match /family-allowance-parameters/{paramId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for global tax parameters.
     * @path /tax-parameters/{paramId}
     * @allow (get) Public read access for all users.
     * @allow (create) Admin-only access for creation.
     * @allow (update) Admin-only access for updates.
     * @allow (delete) Admin-only access for deletion.
     * @principle Public read, admin-only write for global parameters.
     */
    match /tax-parameters/{paramId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

      /**
     * @description Security rules for global taxable caps.
     * @path /taxable-caps/{capId}
     * @allow (get) Public read access for all users.
     * @allow (create) Admin-only access for creation.
     * @allow (update) Admin-only access for updates.
     * @allow (delete) Admin-only access for deletion.
     * @principle Public read, admin-only write for global parameters.
     */
    match /taxable-caps/{capId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}