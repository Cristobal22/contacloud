/**
 * @fileoverview Firestore Security Rules for the accounting platform.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model. Users can only access their own profile data.
 * Companies are the main data isolation unit, and only authorized users (Admins, Accountants)
 * associated with a company can access its data.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only by the user themselves and Admins.
 * - /companies/{companyId}: Stores company data. Access is controlled via the user's role and association with the company.
 * - /companies/{companyId}/*: Subcollections contain data related to a specific company (accounts, vouchers, etc.).
 * - /economic-indicators/{indicatorId}: Publicly readable collection of global economic indicators.
 * - /health-entities/{entityId}, /afp-entities/{entityId}, /family-allowance-parameters/{paramId}, /tax-parameters/{paramId}, /institutions/{institutionId}: Public read-only collections for system configuration.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data. Admins can create/update users.
 * - Company data is accessible only to users explicitly associated with that company (Admin/Accountant).
 * - Listing users is disallowed to prevent data leakage.
 * - Global configuration collections (economic indicators, entities) are publicly readable but not writable by clients.
 * - All write operations require user authentication.
 *
 * Denormalization for Authorization:
 * - The UserProfile includes a `companyIds` array to quickly check a user's association with companies.
 * - Company documents include an `ownerId` to determine the creator/owner of the company.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, update, delete) if isOwner(userId)
     * @allow (create) if request.auth.uid == userId
     * @deny (get, update, delete) if !isSignedIn()
     * @deny (create) if request.auth.uid != request.resource.data.uid
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to company information.
     * @path /companies/{companyId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if !isSignedIn()
     * @principle Enforces company ownership for writes.
     */
    match /companies/{companyId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to accounts within a specific company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if !isSignedIn()
     * @principle Enforces access based on company membership.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to vouchers within a specific company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if !isSignedIn()
     * @principle Enforces access based on company membership.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to subjects within a specific company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if !isSignedIn()
     * @principle Enforces access based on company membership.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to cost centers within a specific company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if !isSignedIn()
     * @principle Enforces access based on company membership.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to employees within a specific company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if !isSignedIn()
     * @principle Enforces access based on company membership.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to payrolls within a specific company.
     * @path /companies/{companyId}/payrolls/{payrollId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if !isSignedIn()
     * @principle Enforces access based on company membership.
     */
    match /companies/{companyId}/payrolls/{payrollId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to purchases within a specific company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if !isSignedIn()
     * @principle Enforces access based on company membership.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to sales within a specific company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if !isSignedIn()
     * @principle Enforces access based on company membership.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
     * @description Controls access to fees within a specific company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if !isSignedIn()
     * @principle Enforces access based on company membership.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to company-specific economic indicators.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if !isSignedIn()
     * @principle Enforces access based on company membership.
     */
    match /companies/{companyId}/economic-indicators/{indicatorId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to user-specific account groups.
     * @path /users/{userId}/account-groups/{groupId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (get, update, delete) if !isSignedIn()
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/account-groups/{groupId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to global economic indicators.
     * @path /economic-indicators/{indicatorId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true;
     * @principle Allows public read access to economic indicators.
     */
    match /economic-indicators/{indicatorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

        /**
     * @description Controls access to global health entities.
     * @path /health-entities/{entityId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true;
     * @principle Allows public read access to health entities.
     */
    match /health-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to global AFP entities.
     * @path /afp-entities/{entityId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true;
     * @principle Allows public read access to AFP entities.
     */
    match /afp-entities/{entityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to global family allowance parameters.
     * @path /family-allowance-parameters/{paramId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true;
     * @principle Allows public read access to family allowance parameters.
     */
    match /family-allowance-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to global tax parameters.
     * @path /tax-parameters/{paramId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true;
     * @principle Allows public read access to tax parameters.
     */
    match /tax-parameters/{paramId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to global institutions.
     * @path /institutions/{institutionId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true;
     * @principle Allows public read access to institutions.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}