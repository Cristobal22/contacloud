/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-tenant security model where users can manage companies and their associated financial data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. User documents are self-owned, meaning a user can only create, read, update, or delete their own profile.
 * - /companies/{companyId}: Stores company data. Only users associated with a company (through the 'companyIds' array in their profile) can read company details.  Company creation is unrestricted to allow for onboarding flows. However, writes (update/delete) are restricted to the owner of the company.
 * - /companies/{companyId}/{collections}: Subcollections under a company (e.g., accounts, vouchers, subjects) store financial data related to that specific company. Access to these subcollections is restricted to users who are associated with the parent company through their user profile.
 * - /users/{userId}/{collections}: Subcollections under a user (e.g., account-groups, institutions) store configuration and parameters specific to each user. User documents are self-owned, meaning a user can only create, read, update, or delete their own data.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles (self-ownership).
 * - Access to company data and its subcollections is based on user association with the company (checked via the 'companyIds' array in the user's profile).
 * - Listing of companies is explicitly denied to prevent unauthorized data access.
 * - Company creation is open to allow onboarding, but updates and deletes are restricted to the company owner.
 * - No data validation is performed in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - The 'companyIds' array in the user profile is crucial for quickly determining which companies a user has access to. This avoids the need to query a separate membership collection.
 * - The `ownerId` field on the `/companies/{companyId}` document enables performant security rules based on ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access. Users can only read, update, and delete their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create a profile if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can access their profile if request.auth.uid == 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_def' cannot access user_abc's profile because request.auth.uid != 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages company access. Any authenticated user can create a company.
     *              Updates and deletes are restricted to the company owner. Listing companies is disallowed.
     * @path /companies
     * @allow (create) - Any signed-in user can create a company.
     * @deny (list) - No user can list all companies.
     * @allow (update, delete) - Only the company owner can update or delete.
     * @principle Allows open company creation while restricting modifications to the owner.
     */
    match /companies/{companyId} {
      function isCompanyMember(companyId) {
          return exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && size(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds) > 0
          && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }

      function isCompanyOwner(companyId) {
        return resource.data.ownerId == request.auth.uid;
      }

      allow get: if isCompanyMember(companyId);
      allow list: if false;
      allow create: if request.auth.uid != null; // Allow any authenticated user to create a company
      allow update: if isCompanyOwner(companyId);
      allow delete: if isCompanyOwner(companyId);
    }

    /**
     * @description Manages access to accounts subcollection for a specific company. Only users associated with the company can access accounts.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) - Users with 'companyId' in their profile can read.
     * @allow (create, update, delete) - Users with 'companyId' in their profile can write.
     * @deny (get, list) - Users without 'companyId' cannot read.
     * @deny (create, update, delete) - Users without 'companyId' cannot write.
     * @principle Restricts access to company-specific subcollections based on user association.
     */
    match /companies/{companyId}/accounts/{accountId} {
      function isCompanyMember(companyId) {
          return exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && size(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds) > 0
          && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }

      allow get: if isCompanyMember(companyId);
      allow list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update: if isCompanyMember(companyId);
      allow delete: if isCompanyMember(companyId);
    }

    /**
     * @description Manages access to vouchers subcollection for a specific company. Only users associated with the company can access vouchers.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) - Users with 'companyId' in their profile can read.
     * @allow (create, update, delete) - Users with 'companyId' in their profile can write.
     * @deny (get, list) - Users without 'companyId' cannot read.
     * @deny (create, update, delete) - Users without 'companyId' cannot write.
     * @principle Restricts access to company-specific subcollections based on user association.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      function isCompanyMember(companyId) {
          return exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && size(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds) > 0
          && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }

      allow get: if isCompanyMember(companyId);
      allow list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update: if isCompanyMember(companyId);
      allow delete: if isCompanyMember(companyId);
    }

    /**
     * @description Manages access to subjects subcollection for a specific company. Only users associated with the company can access subjects.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) - Users with 'companyId' in their profile can read.
     * @allow (create, update, delete) - Users with 'companyId' in their profile can write.
     * @deny (get, list) - Users without 'companyId' cannot read.
     * @deny (create, update, delete) - Users without 'companyId' cannot write.
     * @principle Restricts access to company-specific subcollections based on user association.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      function isCompanyMember(companyId) {
          return exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && size(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds) > 0
          && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }

      allow get: if isCompanyMember(companyId);
      allow list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update: if isCompanyMember(companyId);
      allow delete: if isCompanyMember(companyId);
    }

    /**
     * @description Manages access to cost-centers subcollection for a specific company. Only users associated with the company can access cost-centers.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      function isCompanyMember(companyId) {
          return exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && size(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds) > 0
          && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }

      allow get: if isCompanyMember(companyId);
      allow list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update: if isCompanyMember(companyId);
      allow delete: if isCompanyMember(companyId);
    }

    /**
     * @description Manages access to employees subcollection for a specific company. Only users associated with the company can access employees.
     * @path /companies/{companyId}/employees/{employeeId}
     */
    match /companies/{companyId}/employees/{employeeId} {
      function isCompanyMember(companyId) {
          return exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && size(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds) > 0
          && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }

      allow get: if isCompanyMember(companyId);
      allow list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update: if isCompanyMember(companyId);
      allow delete: if isCompanyMember(companyId);
    }

    /**
     * @description Manages access to purchases subcollection for a specific company. Only users associated with the company can access purchases.
     * @path /companies/{companyId}/purchases/{purchaseId}
     */
    match /companies/{companyId}/purchases/{purchaseId} {
       function isCompanyMember(companyId) {
          return exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && size(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds) > 0
          && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }

      allow get: if isCompanyMember(companyId);
      allow list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update: if isCompanyMember(companyId);
      allow delete: if isCompanyMember(companyId);
    }

    /**
     * @description Manages access to sales subcollection for a specific company. Only users associated with the company can access sales.
     * @path /companies/{companyId}/sales/{saleId}
     */
    match /companies/{companyId}/sales/{saleId} {
      function isCompanyMember(companyId) {
          return exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && size(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds) > 0
          && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }

      allow get: if isCompanyMember(companyId);
      allow list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update: if isCompanyMember(companyId);
      allow delete: if isCompanyMember(companyId);
    }

     /**
      * @description Manages access to fees subcollection for a specific company. Only users associated with the company can access fees.
      * @path /companies/{companyId}/fees/{feeId}
      */
    match /companies/{companyId}/fees/{feeId} {
       function isCompanyMember(companyId) {
          return exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && size(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds) > 0
          && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds).hasAny([companyId]);
      }

      allow get: if isCompanyMember(companyId);
      allow list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update: if isCompanyMember(companyId);
      allow delete: if isCompanyMember(companyId);
    }

    /**
     * @description Manages access to account-groups subcollection for a specific user. Only the owner can access.
     * @path /users/{userId}/account-groups/{accountGroupId}
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to institutions subcollection for a specific user. Only the owner can access.
     * @path /users/{userId}/institutions/{institutionId}
     */
    match /users/{userId}/institutions/{institutionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to family-allowance-parameters subcollection for a specific user. Only the owner can access.
     * @path /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId}
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to tax-parameters subcollection for a specific user. Only the owner can access.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to health-entities subcollection for a specific user. Only the owner can access.
     * @path /users/{userId}/health-entities/{healthEntityId}
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to afp-entities subcollection for a specific user. Only the owner can access.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}