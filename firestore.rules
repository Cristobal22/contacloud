/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership and role-based access model.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}.
 * - Companies are stored under /companies/{companyId}.
 * - Most data related to companies (accounts, vouchers, subjects, etc.) are stored in subcollections under /companies/{companyId}.
 * - Global configuration data (economic indicators, health entities, AFP entities, tax parameters, institutions) are stored in top-level collections.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Only authenticated users are allowed to create companies, and they become the owner.
 * - Company data and its subcollections can only be accessed by users associated with the company (either the owner or users with specific roles within the company, as denormalized on the UserProfile).
 * - Global configuration data is publicly readable but writable only by users with the "Admin" role.
 * - Listing of companies is denied to address the reported error, a more granular access control mechanism may be required for company listing in future iterations.
 *
 * Denormalization for Authorization:
 * - UserProfile.companyIds: This array contains the IDs of the companies a user is associated with.  This avoids the need for complex collection group queries to determine company access.
 * - Company.ownerId: Stores the UID of the user who created the company, allowing for simple ownership checks.
 *
 * Structural Segregation:
 * - Private user data (UserProfile) is stored under /users/{userId}, while potentially public company data is stored under /companies/{companyId}.  This simplifies read access for public company data while maintaining privacy for user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} - True if the user is signed in and the UID matches, false otherwise.
     * @example
     * Calling `isOwner('someUserId')` will return true if `request.auth.uid` is equal to 'someUserId'.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the existing document (used for update/delete).
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} - True if the user is signed in, the UID matches, and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Checks if the authenticated user has the "Admin" role.
     * @returns {boolean} True if the user's role is "Admin", false otherwise.
     * @note This implementation requires that the user's role is stored in their custom claims.
     */
    function isAdmin() {
        return isSignedIn() && request.auth.token.role == "Admin";
    }
    
    /**
     * @description Checks if the authenticated user is associated with the company id.
     * @param {string} companyId - The company ID to compare against.
     * @returns {boolean} - True if the user is signed in and the UID matches, false otherwise.
     * @example
     * Calling `isAssociatedWithCompany('someCompanyId')` will return true if `request.auth.uid` is present in the companyIds array of the user profile.
     */
    function isAssociatedWithCompany(companyId) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - An authenticated user can read, update, and delete their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (update, delete) - A user cannot update or delete another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for companies.
     * @path /companies/{companyId}
     * @allow (create) - An authenticated user can create a company. The ownerId will be set to the user's UID.
     * @allow (get, update, delete) - Only the owner of the company can read, update, or delete it.
     * @deny (create) - Only authenticated users can create companies.
     * @deny (update, delete) - Only the owner can update or delete a company.
     * @principle Enforces document ownership for writes.
     */
    match /companies/{companyId} {
      allow get: if isAssociatedWithCompany(companyId);
      allow list: if false; // CRITICAL: Preventing listing to address the error reported by NextJS. More granular access control may be required.
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Rules for accounts within a company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) - Only users associated with the company can read accounts.
     * @allow (create, update, delete) - Only users associated with the company can create, update, or delete accounts.
     * @deny (create, update, delete) - Non-company users cannot create, update, or delete accounts.
     * @principle Enforces company-level access control.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get: if isAssociatedWithCompany(companyId);
      allow list: if isAssociatedWithCompany(companyId);
      allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
      allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Rules for vouchers within a company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) - Only users associated with the company can read vouchers.
     * @allow (create, update, delete) - Only users associated with the company can create, update, or delete vouchers.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get: if isAssociatedWithCompany(companyId);
      allow list: if isAssociatedWithCompany(companyId);
      allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
      allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Rules for subjects within a company.
     * @path /companies/{companyId}/subjects/{subjectId}
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get: if isAssociatedWithCompany(companyId);
      allow list: if isAssociatedWithCompany(companyId);
      allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
      allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Rules for cost centers within a company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get: if isAssociatedWithCompany(companyId);
      allow list: if isAssociatedWithCompany(companyId);
      allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
      allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Rules for employees within a company.
     * @path /companies/{companyId}/employees/{employeeId}
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get: if isAssociatedWithCompany(companyId);
      allow list: if isAssociatedWithCompany(companyId);
      allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
      allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Rules for payrolls within a company.
     * @path /companies/{companyId}/payrolls/{payrollId}
     */
    match /companies/{companyId}/payrolls/{payrollId} {
      allow get: if isAssociatedWithCompany(companyId);
      allow list: if isAssociatedWithCompany(companyId);
      allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
      allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }
    
    /**
     * @description Rules for purchases within a company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get: if isAssociatedWithCompany(companyId);
      allow list: if isAssociatedWithCompany(companyId);
      allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
      allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Rules for sales within a company.
     * @path /companies/{companyId}/sales/{saleId}
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get: if isAssociatedWithCompany(companyId);
      allow list: if isAssociatedWithCompany(companyId);
      allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
      allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Rules for fees within a company.
     * @path /companies/{companyId}/fees/{feeId}
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get: if isAssociatedWithCompany(companyId);
      allow list: if isAssociatedWithCompany(companyId);
      allow create: if isAssociatedWithCompany(companyId) && request.resource.data.companyId == companyId;
      allow update: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
      allow delete: if isAssociatedWithCompany(companyId) && resource.data.companyId == companyId;
    }
    
    /**
     * @description Rules for company-specific overrides for monthly economic indicators.
     * @path /companies/{companyId}/economic-indicators/{indicatorId}
     */
     match /companies/{companyId}/economic-indicators/{indicatorId} {
      allow get: if isAssociatedWithCompany(companyId);
      allow list: if isAssociatedWithCompany(companyId);
      allow create: if isAssociatedWithCompany(companyId);
      allow update: if isAssociatedWithCompany(companyId);
      allow delete: if isAssociatedWithCompany(companyId);
    }

    /**
     * @description Rules for user-specific account groups.
     * @path /users/{userId}/account-groups/{groupId}
     */
    match /users/{userId}/account-groups/{groupId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for global economic indicators.
     * @path /economic-indicators/{indicatorId}
     */
    match /economic-indicators/{indicatorId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for global health entities.
     * @path /health-entities/{entityId}
     */
    match /health-entities/{entityId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for global AFP entities.
     * @path /afp-entities/{entityId}
     */
    match /afp-entities/{entityId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for global family allowance parameters.
     * @path /family-allowance-parameters/{paramId}
     */
    match /family-allowance-parameters/{paramId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for global tax parameters.
     * @path /tax-parameters/{paramId}
     */
    match /tax-parameters/{paramId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for global institutions.
     * @path /institutions/{institutionId}
     */
    match /institutions/{institutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}