rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user has the 'admin' or 'accountant' role.
     * @returns {boolean} True if the user has the role, false otherwise.
     */
    function hasAdminOrAccountantRole() {
      return isSignedIn() && (request.auth.token.role == 'Admin' || request.auth.token.role == 'Accountant');
    }

    /**
     * @description Checks if the authenticated user has the 'admin' role.
     * @returns {boolean} True if the user has the role, false otherwise.
     */
    function hasAdminRole() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the UIDs match and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(resource);
    }
    
    /**
     * @description Grants access to a user's profile.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to the companies collection for admins and accountants.
     * @path /companies
     */
    match /companies/{companyId} {
      allow get: if true;
      allow list: if true;
      allow create: if hasAdminOrAccountantRole();
      allow update: if hasAdminOrAccountantRole();
      allow delete: if hasAdminRole();
    }

    /**
     * @description Grants access to the accounts sub-collection for admins and accountants.
     * @path /companies/{companyId}/accounts/{accountId}
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get: if hasAdminOrAccountantRole();
      allow list: if false;
      allow create: if hasAdminOrAccountantRole() && request.resource.data.companyId == companyId;
      allow update: if hasAdminOrAccountantRole();
      allow delete: if hasAdminRole();
    }

    /**
     * @description Grants access to the vouchers sub-collection for admins and accountants.
     * @path /companies/{companyId}/vouchers/{voucherId}
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get: if hasAdminOrAccountantRole();
      allow list: if false;
      allow create: if hasAdminOrAccountantRole() && request.resource.data.companyId == companyId;
      allow update: if hasAdminOrAccountantRole();
      allow delete: if hasAdminRole();
    }

    /**
     * @description Grants access to the subjects sub-collection for admins and accountants.
     * @path /companies/{companyId}/subjects/{subjectId}
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get: if hasAdminOrAccountantRole();
      allow list: if false;
      allow create: if hasAdminOrAccountantRole() && request.resource.data.companyId == companyId;
      allow update: if hasAdminOrAccountantRole();
      allow delete: if hasAdminRole();
    }

    /**
     * @description Grants access to the cost-centers sub-collection for admins and accountants.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get: if hasAdminOrAccountantRole();
      allow list: if false;
      allow create: if hasAdminOrAccountantRole() && request.resource.data.companyId == companyId;
      allow update: if hasAdminOrAccountantRole();
      allow delete: if hasAdminRole();
    }

    /**
     * @description Grants access to the employees sub-collection for admins and accountants.
     * @path /companies/{companyId}/employees/{employeeId}
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get: if hasAdminOrAccountantRole();
      allow list: if false;
      allow create: if hasAdminOrAccountantRole() && request.resource.data.companyId == companyId;
      allow update: if hasAdminOrAccountantRole();
      allow delete: if hasAdminRole();
    }
    
     /**
     * @description Grants access to the purchases sub-collection for admins and accountants.
     * @path /companies/{companyId}/purchases/{purchaseId}
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get: if hasAdminOrAccountantRole();
      allow list: if false;
      allow create: if hasAdminOrAccountantRole() && request.resource.data.companyId == companyId;
      allow update: if hasAdminOrAccountantRole();
      allow delete: if hasAdminRole();
    }

    /**
     * @description Grants access to the sales sub-collection for admins and accountants.
     * @path /companies/{companyId}/sales/{saleId}
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get: if hasAdminOrAccountantRole();
      allow list: if false;
      allow create: if hasAdminOrAccountantRole() && request.resource.data.companyId == companyId;
      allow update: if hasAdminOrAccountantRole();
      allow delete: if hasAdminRole();
    }

     /**
     * @description Grants access to the fees sub-collection for admins and accountants.
     * @path /companies/{companyId}/fees/{feeId}
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get: if hasAdminOrAccountantRole();
      allow list: if false;
      allow create: if hasAdminOrAccountantRole() && request.resource.data.companyId == companyId;
      allow update: if hasAdminOrAccountantRole();
      allow delete: if hasAdminRole();
    }

    /**
     * @description Grants access to a user's account groups.
     * @path /users/{userId}/account-groups/{accountGroupId}
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to a user's institutions.
     * @path /users/{userId}/institutions/{institutionId}
     */
    match /users/{userId}/institutions/{institutionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to a user's family allowance parameters.
     * @path /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId}
     */
    match /users/{userId}/family-allowance-parameters/{familyAllowanceParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to a user's tax parameters.
     * @path /users/{userId}/tax-parameters/{taxParameterId}
     */
    match /users/{userId}/tax-parameters/{taxParameterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    
    /**
     * @description Grants access to a user's health entities.
     * @path /users/{userId}/health-entities/{healthEntityId}
     */
    match /users/{userId}/health-entities/{healthEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to a user's AFP entities.
     * @path /users/{userId}/afp-entities/{afpEntityId}
     */
    match /users/{userId}/afp-entities/{afpEntityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}