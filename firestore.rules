/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership and role-based access control model for the accounting platform.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}.
 * - Companies are stored under /companies/{companyId}.
 * - Company-related data (accounts, vouchers, etc.) are stored as subcollections under /companies/{companyId}.
 * - User-specific configuration data (account groups, institutions, parameters) are stored as subcollections under /users/{userId}.
 *
 * Key Security Decisions:
 * - User profiles are only accessible to the user themselves.
 * - Listing of users is explicitly denied.
 * - Company data is accessible to users associated with that company.
 * - User-specific configuration is only accessible to the user themselves.
 *
 * Denormalization for Authorization:
 * - To simplify rules and improve performance, company-related documents should include a `companyId` field.
 * - User-related documents should include a `userId` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, allowing only the user to read and write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) User with uid 'user123' can access /users/user123.
     * @allow (create) User with uid 'user123' can create /users/user123 if request.auth.uid == 'user123'.
     * @deny (get, update, delete) User with uid 'user456' cannot access /users/user123.
     * @deny (create) User with uid 'user456' cannot create /users/user123.
     * @principle Enforces document ownership for user profiles, restricts access to a user's own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects the listing of all users.
     * @path /users
     * @allow None - Listing users is disallowed.
     * @deny List operation on /users.
     * @principle Disallows listing of users for privacy.
     */
    match /users {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }


    /**
     * @description Manages company data.  Currently allows public read access to company data.
     * @path /companies/{companyId}
     * @allow (get, list) Any user can read company data.
     * @deny (create, update, delete) No user can create, update, or delete company data without authorization (TODO: Implement company role management).
     * @principle Placeholder for future role-based access control for companies.
     */
    match /companies/{companyId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company role validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages accounts for a specific company.
     * @path /companies/{companyId}/accounts/{accountId}
     * @allow (get, list) Any user can read accounts data.
     * @deny (create, update, delete) No user can create, update, or delete account data without authorization (TODO: Implement company role management).
     * @principle Placeholder for future role-based access control for company accounts.
     */
    match /companies/{companyId}/accounts/{accountId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company role validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages accounting vouchers for a specific company.
     * @path /companies/{companyId}/vouchers/{voucherId}
     * @allow (get, list) Any user can read vouchers data.
     * @deny (create, update, delete) No user can create, update, or delete voucher data without authorization (TODO: Implement company role management).
     * @principle Placeholder for future role-based access control for company vouchers.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company role validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages subjects (clients, providers) for a specific company.
     * @path /companies/{companyId}/subjects/{subjectId}
     * @allow (get, list) Any user can read subjects data.
     * @deny (create, update, delete) No user can create, update, or delete subject data without authorization (TODO: Implement company role management).
     * @principle Placeholder for future role-based access control for company subjects.
     */
    match /companies/{companyId}/subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company role validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages cost centers for a specific company.
     * @path /companies/{companyId}/cost-centers/{costCenterId}
     * @allow (get, list) Any user can read cost centers data.
     * @deny (create, update, delete) No user can create, update, or delete cost center data without authorization (TODO: Implement company role management).
     * @principle Placeholder for future role-based access control for company cost centers.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company role validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages employees for a specific company.
     * @path /companies/{companyId}/employees/{employeeId}
     * @allow (get, list) Any user can read employees data.
     * @deny (create, update, delete) No user can create, update, or delete employee data without authorization (TODO: Implement company role management).
     * @principle Placeholder for future role-based access control for company employees.
     */
    match /companies/{companyId}/employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company role validation once the schema is updated with an ownership field.
    }
    
    /**
     * @description Manages purchases for a specific company.
     * @path /companies/{companyId}/purchases/{purchaseId}
     * @allow (get, list) Any user can read purchases data.
     * @deny (create, update, delete) No user can create, update, or delete purchase data without authorization (TODO: Implement company role management).
     * @principle Placeholder for future role-based access control for company purchases.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company role validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages sales for a specific company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) Any user can read sales data.
     * @deny (create, update, delete) No user can create, update, or delete sale data without authorization (TODO: Implement company role management).
     * @principle Placeholder for future role-based access control for company sales.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company role validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages fees for a specific company.
     * @path /companies/{companyId}/fees/{feeId}
     * @allow (get, list) Any user can read fees data.
     * @deny (create, update, delete) No user can create, update, or delete fee data without authorization (TODO: Implement company role management).
     * @principle Placeholder for future role-based access control for company fees.
     */
    match /companies/{companyId}/fees/{feeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add company role validation once the schema is updated with an ownership field.
    }

    /**
     * @description Protects user-specific account groups data.
     * @path /users/{userId}/account-groups/{accountGroupId}
     * @allow (get, update, delete) User with uid 'user123' can access /users/user123/account-groups/group1.
     * @allow (create) User with uid 'user123' can create /users/user123/account-groups/group1 if request.auth.uid == 'user123'.
     * @deny (get, update, delete) User with uid 'user456' cannot access /users/user123/account-groups/group1.
     * @deny (create) User with uid 'user456' cannot create /users/user123/account-groups/group1.
     * @principle Enforces document ownership, restricts access to a user's own data.
     */
    match /users/{userId}/account-groups/{accountGroupId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects user-specific institution data.
     * @path /users/{userId}/institutions/{institutionId}
     * @allow (get, update, delete) User with uid 'user123' can access /users/user123/institutions/inst1.
     * @allow (create) User with uid 'user123' can create /users/user123/institutions/inst1 if request.auth.uid == 'user123'.
     * @deny (get, update, delete) User with uid 'user456' cannot access /users/user123/institutions/inst1.
     * @deny (create) User with uid 'user456' cannot create /users/user123/institutions/inst1.
     * @principle Enforces document ownership, restricts access to a user's own data.
     */
    match /users/{userId}/institutions/{institutionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects user-specific family allowance parameters data.
     * @path /users/{userId}/family-allowance-parameters/{parameterId}
     * @allow (get, update, delete) User with uid 'user123' can access /users/user123/family-allowance-parameters/param1.
     * @allow (create) User with uid 'user123' can create /users/user123/family-allowance-parameters/param1 if request.auth.uid == 'user123'.
     * @deny (get, update, delete) User with uid 'user456' cannot access /users/user123/family-allowance-parameters/param1.
     * @deny (create) User with uid 'user456' cannot create /users/user123/family-allowance-parameters/param1.
     * @principle Enforces document ownership, restricts access to a user's own data.
     */
    match /users/{userId}/family-allowance-parameters/{parameterId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects user-specific tax parameters data.
     * @path /users/{userId}/tax-parameters/{parameterId}
     * @allow (get, update, delete) User with uid 'user123' can access /users/user123/tax-parameters/tax1.
     * @allow (create) User with uid 'user123' can create /users/user123/tax-parameters/tax1 if request.auth.uid == 'user123'.
     * @deny (get, update, delete) User with uid 'user456' cannot access /users/user123/tax-parameters/tax1.
     * @deny (create) User with uid 'user456' cannot create /users/user123/tax-parameters/tax1.
     * @principle Enforces document ownership, restricts access to a user's own data.
     */
    match /users/{userId}/tax-parameters/{parameterId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects user-specific health entities data.
     * @path /users/{userId}/health-entities/{entityId}
     * @allow (get, update, delete) User with uid 'user123' can access /users/user123/health-entities/health1.
     * @allow (create) User with uid 'user123' can create /users/user123/health-entities/health1 if request.auth.uid == 'user123'.
     * @deny (get, update, delete) User with uid 'user456' cannot access /users/user123/health-entities/health1.
     * @deny (create) User with uid 'user456' cannot create /users/user123/health-entities/health1.
     * @principle Enforces document ownership, restricts access to a user's own data.
     */
    match /users/{userId}/health-entities/{entityId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects user-specific AFP entities data.
     * @path /users/{userId}/afp-entities/{entityId}
     * @allow (get, update, delete) User with uid 'user123' can access /users/user123/afp-entities/afp1.
     * @allow (create) User with uid 'user123' can create /users/user123/afp-entities/afp1 if request.auth.uid == 'user123'.
     * @deny (get, update, delete) User with uid 'user456' cannot access /users/user123/afp-entities/afp1.
     * @deny (create) User with uid 'user456' cannot create /users/user123/afp-entities/afp1.
     * @principle Enforces document ownership, restricts access to a user's own data.
     */
    match /users/{userId}/afp-entities/{entityId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}