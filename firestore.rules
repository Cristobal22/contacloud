rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' creates their profile.
     * @allow (get, update, delete) User with uid 'user123' reads/updates/deletes their own profile.
     * @deny (get, update, delete) User with uid 'user456' tries to access user 'user123' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the companies collection. Allows read access to anyone.
     *              Write access is denied, as company creation should be handled
     *              via a backend process or restricted admin interface.
     * @path /companies
     * @allow (get, list) Any user can read company data.
     * @deny (create, update, delete) All users are denied from creating, updating, or deleting company data directly.
     * @principle Public read access with restricted writes.
     */
    match /companies/{companyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the accounts sub-collection for a company.
     *              Allows read and write access to users associated with the company.
     * @path /companies/{companyId}/accounts
     * @allow (get, list, create, update, delete) Users who are part of company 'company123' can access its accounts.
     * @deny (get, list, create, update, delete) Users not part of company 'company123' cannot access its accounts.
     * @principle Restricts access to company-specific data based on user association.
     */
    match /companies/{companyId}/accounts/{accountId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCompanyMember(companyId) {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
        }
        allow get: if isCompanyMember(companyId);
        allow list: if isCompanyMember(companyId);
        allow create: if isCompanyMember(companyId);
        allow update: if isCompanyMember(companyId) && exists(resource);
        allow delete: if isCompanyMember(companyId) && exists(resource);
    }

    /**
     * @description Secures the vouchers sub-collection for a company.
     *              Allows read and write access to users associated with the company.
     * @path /companies/{companyId}/vouchers
     * @allow (get, list, create, update, delete) Users who are part of company 'company123' can access its vouchers.
     * @deny (get, list, create, update, delete) Users not part of company 'company123' cannot access its vouchers.
     * @principle Restricts access to company-specific data based on user association.
     */
    match /companies/{companyId}/vouchers/{voucherId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCompanyMember(companyId) {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
        }
        allow get: if isCompanyMember(companyId);
        allow list: if isCompanyMember(companyId);
        allow create: if isCompanyMember(companyId);
        allow update: if isCompanyMember(companyId) && exists(resource);
        allow delete: if isCompanyMember(companyId) && exists(resource);
    }

    /**
     * @description Secures the subjects sub-collection for a company.
     *              Allows read and write access to users associated with the company.
     * @path /companies/{companyId}/subjects
     * @allow (get, list, create, update, delete) Users who are part of company 'company123' can access its subjects.
     * @deny (get, list, create, update, delete) Users not part of company 'company123' cannot access its subjects.
     * @principle Restricts access to company-specific data based on user association.
     */
    match /companies/{companyId}/subjects/{subjectId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCompanyMember(companyId) {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
        }
        allow get: if isCompanyMember(companyId);
        allow list: if isCompanyMember(companyId);
        allow create: if isCompanyMember(companyId);
        allow update: if isCompanyMember(companyId) && exists(resource);
        allow delete: if isCompanyMember(companyId) && exists(resource);
    }

    /**
     * @description Secures the cost-centers sub-collection for a company.
     *              Allows read and write access to users associated with the company.
     * @path /companies/{companyId}/cost-centers
     * @allow (get, list, create, update, delete) Users who are part of company 'company123' can access its cost centers.
     * @deny (get, list, create, update, delete) Users not part of company 'company123' cannot access its cost centers.
     * @principle Restricts access to company-specific data based on user association.
     */
    match /companies/{companyId}/cost-centers/{costCenterId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCompanyMember(companyId) {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
        }
        allow get: if isCompanyMember(companyId);
        allow list: if isCompanyMember(companyId);
        allow create: if isCompanyMember(companyId);
        allow update: if isCompanyMember(companyId) && exists(resource);
        allow delete: if isCompanyMember(companyId) && exists(resource);
    }

    /**
     * @description Secures the employees sub-collection for a company.
     *              Allows read and write access to users associated with the company.
     * @path /companies/{companyId}/employees
     * @allow (get, list, create, update, delete) Users who are part of company 'company123' can access its employees.
     * @deny (get, list, create, update, delete) Users not part of company 'company123' cannot access its employees.
     * @principle Restricts access to company-specific data based on user association.
     */
    match /companies/{companyId}/employees/{employeeId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCompanyMember(companyId) {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
        }
        allow get: if isCompanyMember(companyId);
        allow list: if isCompanyMember(companyId);
        allow create: if isCompanyMember(companyId);
        allow update: if isCompanyMember(companyId) && exists(resource);
        allow delete: if isCompanyMember(companyId) && exists(resource);
    }

    /**
     * @description Secures the purchases sub-collection for a company.
     *              Allows read and write access to users associated with the company.
     * @path /companies/{companyId}/purchases
     * @allow (get, list, create, update, delete) Users who are part of company 'company123' can access its purchases.
     * @deny (get, list, create, update, delete) Users not part of company 'company123' cannot access its purchases.
     * @principle Restricts access to company-specific data based on user association.
     */
    match /companies/{companyId}/purchases/{purchaseId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCompanyMember(companyId) {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
        }
        allow get: if isCompanyMember(companyId);
        allow list: if isCompanyMember(companyId);
        allow create: if isCompanyMember(companyId);
        allow update: if isCompanyMember(companyId) && exists(resource);
        allow delete: if isCompanyMember(companyId) && exists(resource);
    }

    /**
     * @description Secures the sales sub-collection for a company.
     *              Allows read and write access to users associated with the company.
     * @path /companies/{companyId}/sales
     * @allow (get, list, create, update, delete) Users who are part of company 'company123' can access its sales.
     * @deny (get, list, create, update, delete) Users not part of company 'company123' cannot access its sales.
     * @principle Restricts access to company-specific data based on user association.
     */
    match /companies/{companyId}/sales/{saleId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCompanyMember(companyId) {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
        }
        allow get: if isCompanyMember(companyId);
        allow list: if isCompanyMember(companyId);
        allow create: if isCompanyMember(companyId);
        allow update: if isCompanyMember(companyId) && exists(resource);
        allow delete: if isCompanyMember(companyId) && exists(resource);
    }

    /**
     * @description Secures the fees sub-collection for a company.
     *              Allows read and write access to users associated with the company.
     * @path /companies/{companyId}/fees
     * @allow (get, list, create, update, delete) Users who are part of company 'company123' can access its fees.
     * @deny (get, list, create, update, delete) Users not part of company 'company123' cannot access its fees.
     * @principle Restricts access to company-specific data based on user association.
     */
    match /companies/{companyId}/fees/{feeId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCompanyMember(companyId) {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyIds.hasAny([companyId]);
        }
        allow get: if isCompanyMember(companyId);
        allow list: if isCompanyMember(companyId);
        allow create: if isCompanyMember(companyId);
        allow update: if isCompanyMember(companyId) && exists(resource);
        allow delete: if isCompanyMember(companyId) && exists(resource);
    }

    /**
     * @description Allows public read access to account groups. Write access is denied.
     * @path /account-groups
     * @allow (get, list) Any user can read account group data.
     * @deny (create, update, delete) No user can create, update, or delete account group data.
     * @principle Public read access for global configuration data.
     */
    match /account-groups/{accountGroupId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to institutions. Write access is denied.
     * @path /institutions
     * @allow (get, list) Any user can read institution data.
     * @deny (create, update, delete) No user can create, update, or delete institution data.
     * @principle Public read access for global configuration data.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to family allowance parameters. Write access is denied.
     * @path /family-allowance-parameters
     * @allow (get, list) Any user can read family allowance parameter data.
     * @deny (create, update, delete) No user can create, update, or delete family allowance parameter data.
     * @principle Public read access for global configuration data.
     */
    match /family-allowance-parameters/{familyAllowanceParameterId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to tax parameters. Write access is denied.
     * @path /tax-parameters
     * @allow (get, list) Any user can read tax parameter data.
     * @deny (create, update, delete) No user can create, update, or delete tax parameter data.
     * @principle Public read access for global configuration data.
     */
    match /tax-parameters/{taxParameterId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to health entities. Write access is denied.
     * @path /health-entities
     * @allow (get, list) Any user can read health entity data.
     * @deny (create, update, delete) No user can create, update, or delete health entity data.
     * @principle Public read access for global configuration data.
     */
    match /health-entities/{healthEntityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to AFP entities. Write access is denied.
     * @path /afp-entities
     * @allow (get, list) Any user can read AFP entity data.
     * @deny (create, update, delete) No user can create, update, or delete AFP entity data.
     * @principle Public read access for global configuration data.
     */
    match /afp-entities/{afpEntityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}